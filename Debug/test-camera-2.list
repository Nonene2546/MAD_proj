
test-camera-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd7c  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  0800cf80  0800cf80  0000df80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6a8  0800d6a8  0000f208  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6a8  0800d6a8  0000e6a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6b0  0800d6b0  0000f208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6b0  0800d6b0  0000e6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d6b4  0800d6b4  0000e6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000208  20000000  0800d6b8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00031b84  20000208  0800d8c0  0000f208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20031d8c  0800d8c0  0000fd8c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018881  00000000  00000000  0000f236  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003eb8  00000000  00000000  00027ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001658  00000000  00000000  0002b970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000112d  00000000  00000000  0002cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b487  00000000  00000000  0002e0f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e314  00000000  00000000  0005957c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00100680  00000000  00000000  00077890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00177f10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f48  00000000  00000000  00177f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000047  00000000  00000000  0017ee9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000208 	.word	0x20000208
 800021c:	00000000 	.word	0x00000000
 8000220:	0800cf64 	.word	0x0800cf64

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000020c 	.word	0x2000020c
 800023c:	0800cf64 	.word	0x0800cf64

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a2 	b.w	80009c4 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	460c      	mov	r4, r1
 8000710:	2b00      	cmp	r3, #0
 8000712:	d14e      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000714:	4694      	mov	ip, r2
 8000716:	458c      	cmp	ip, r1
 8000718:	4686      	mov	lr, r0
 800071a:	fab2 f282 	clz	r2, r2
 800071e:	d962      	bls.n	80007e6 <__udivmoddi4+0xde>
 8000720:	b14a      	cbz	r2, 8000736 <__udivmoddi4+0x2e>
 8000722:	f1c2 0320 	rsb	r3, r2, #32
 8000726:	4091      	lsls	r1, r2
 8000728:	fa20 f303 	lsr.w	r3, r0, r3
 800072c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000730:	4319      	orrs	r1, r3
 8000732:	fa00 fe02 	lsl.w	lr, r0, r2
 8000736:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800073a:	fa1f f68c 	uxth.w	r6, ip
 800073e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000742:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000746:	fb07 1114 	mls	r1, r7, r4, r1
 800074a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800074e:	fb04 f106 	mul.w	r1, r4, r6
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f104 30ff 	add.w	r0, r4, #4294967295
 800075e:	f080 8112 	bcs.w	8000986 <__udivmoddi4+0x27e>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 810f 	bls.w	8000986 <__udivmoddi4+0x27e>
 8000768:	3c02      	subs	r4, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a59      	subs	r1, r3, r1
 800076e:	fa1f f38e 	uxth.w	r3, lr
 8000772:	fbb1 f0f7 	udiv	r0, r1, r7
 8000776:	fb07 1110 	mls	r1, r7, r0, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb00 f606 	mul.w	r6, r0, r6
 8000782:	429e      	cmp	r6, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x94>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f100 31ff 	add.w	r1, r0, #4294967295
 800078e:	f080 80fc 	bcs.w	800098a <__udivmoddi4+0x282>
 8000792:	429e      	cmp	r6, r3
 8000794:	f240 80f9 	bls.w	800098a <__udivmoddi4+0x282>
 8000798:	4463      	add	r3, ip
 800079a:	3802      	subs	r0, #2
 800079c:	1b9b      	subs	r3, r3, r6
 800079e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007a2:	2100      	movs	r1, #0
 80007a4:	b11d      	cbz	r5, 80007ae <__udivmoddi4+0xa6>
 80007a6:	40d3      	lsrs	r3, r2
 80007a8:	2200      	movs	r2, #0
 80007aa:	e9c5 3200 	strd	r3, r2, [r5]
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d905      	bls.n	80007c2 <__udivmoddi4+0xba>
 80007b6:	b10d      	cbz	r5, 80007bc <__udivmoddi4+0xb4>
 80007b8:	e9c5 0100 	strd	r0, r1, [r5]
 80007bc:	2100      	movs	r1, #0
 80007be:	4608      	mov	r0, r1
 80007c0:	e7f5      	b.n	80007ae <__udivmoddi4+0xa6>
 80007c2:	fab3 f183 	clz	r1, r3
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d146      	bne.n	8000858 <__udivmoddi4+0x150>
 80007ca:	42a3      	cmp	r3, r4
 80007cc:	d302      	bcc.n	80007d4 <__udivmoddi4+0xcc>
 80007ce:	4290      	cmp	r0, r2
 80007d0:	f0c0 80f0 	bcc.w	80009b4 <__udivmoddi4+0x2ac>
 80007d4:	1a86      	subs	r6, r0, r2
 80007d6:	eb64 0303 	sbc.w	r3, r4, r3
 80007da:	2001      	movs	r0, #1
 80007dc:	2d00      	cmp	r5, #0
 80007de:	d0e6      	beq.n	80007ae <__udivmoddi4+0xa6>
 80007e0:	e9c5 6300 	strd	r6, r3, [r5]
 80007e4:	e7e3      	b.n	80007ae <__udivmoddi4+0xa6>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	f040 8090 	bne.w	800090c <__udivmoddi4+0x204>
 80007ec:	eba1 040c 	sub.w	r4, r1, ip
 80007f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80007f4:	fa1f f78c 	uxth.w	r7, ip
 80007f8:	2101      	movs	r1, #1
 80007fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80007fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000802:	fb08 4416 	mls	r4, r8, r6, r4
 8000806:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800080a:	fb07 f006 	mul.w	r0, r7, r6
 800080e:	4298      	cmp	r0, r3
 8000810:	d908      	bls.n	8000824 <__udivmoddi4+0x11c>
 8000812:	eb1c 0303 	adds.w	r3, ip, r3
 8000816:	f106 34ff 	add.w	r4, r6, #4294967295
 800081a:	d202      	bcs.n	8000822 <__udivmoddi4+0x11a>
 800081c:	4298      	cmp	r0, r3
 800081e:	f200 80cd 	bhi.w	80009bc <__udivmoddi4+0x2b4>
 8000822:	4626      	mov	r6, r4
 8000824:	1a1c      	subs	r4, r3, r0
 8000826:	fa1f f38e 	uxth.w	r3, lr
 800082a:	fbb4 f0f8 	udiv	r0, r4, r8
 800082e:	fb08 4410 	mls	r4, r8, r0, r4
 8000832:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000836:	fb00 f707 	mul.w	r7, r0, r7
 800083a:	429f      	cmp	r7, r3
 800083c:	d908      	bls.n	8000850 <__udivmoddi4+0x148>
 800083e:	eb1c 0303 	adds.w	r3, ip, r3
 8000842:	f100 34ff 	add.w	r4, r0, #4294967295
 8000846:	d202      	bcs.n	800084e <__udivmoddi4+0x146>
 8000848:	429f      	cmp	r7, r3
 800084a:	f200 80b0 	bhi.w	80009ae <__udivmoddi4+0x2a6>
 800084e:	4620      	mov	r0, r4
 8000850:	1bdb      	subs	r3, r3, r7
 8000852:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000856:	e7a5      	b.n	80007a4 <__udivmoddi4+0x9c>
 8000858:	f1c1 0620 	rsb	r6, r1, #32
 800085c:	408b      	lsls	r3, r1
 800085e:	fa22 f706 	lsr.w	r7, r2, r6
 8000862:	431f      	orrs	r7, r3
 8000864:	fa20 fc06 	lsr.w	ip, r0, r6
 8000868:	fa04 f301 	lsl.w	r3, r4, r1
 800086c:	ea43 030c 	orr.w	r3, r3, ip
 8000870:	40f4      	lsrs	r4, r6
 8000872:	fa00 f801 	lsl.w	r8, r0, r1
 8000876:	0c38      	lsrs	r0, r7, #16
 8000878:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800087c:	fbb4 fef0 	udiv	lr, r4, r0
 8000880:	fa1f fc87 	uxth.w	ip, r7
 8000884:	fb00 441e 	mls	r4, r0, lr, r4
 8000888:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800088c:	fb0e f90c 	mul.w	r9, lr, ip
 8000890:	45a1      	cmp	r9, r4
 8000892:	fa02 f201 	lsl.w	r2, r2, r1
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x1a6>
 8000898:	193c      	adds	r4, r7, r4
 800089a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800089e:	f080 8084 	bcs.w	80009aa <__udivmoddi4+0x2a2>
 80008a2:	45a1      	cmp	r9, r4
 80008a4:	f240 8081 	bls.w	80009aa <__udivmoddi4+0x2a2>
 80008a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008ac:	443c      	add	r4, r7
 80008ae:	eba4 0409 	sub.w	r4, r4, r9
 80008b2:	fa1f f983 	uxth.w	r9, r3
 80008b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ba:	fb00 4413 	mls	r4, r0, r3, r4
 80008be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008c6:	45a4      	cmp	ip, r4
 80008c8:	d907      	bls.n	80008da <__udivmoddi4+0x1d2>
 80008ca:	193c      	adds	r4, r7, r4
 80008cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80008d0:	d267      	bcs.n	80009a2 <__udivmoddi4+0x29a>
 80008d2:	45a4      	cmp	ip, r4
 80008d4:	d965      	bls.n	80009a2 <__udivmoddi4+0x29a>
 80008d6:	3b02      	subs	r3, #2
 80008d8:	443c      	add	r4, r7
 80008da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008de:	fba0 9302 	umull	r9, r3, r0, r2
 80008e2:	eba4 040c 	sub.w	r4, r4, ip
 80008e6:	429c      	cmp	r4, r3
 80008e8:	46ce      	mov	lr, r9
 80008ea:	469c      	mov	ip, r3
 80008ec:	d351      	bcc.n	8000992 <__udivmoddi4+0x28a>
 80008ee:	d04e      	beq.n	800098e <__udivmoddi4+0x286>
 80008f0:	b155      	cbz	r5, 8000908 <__udivmoddi4+0x200>
 80008f2:	ebb8 030e 	subs.w	r3, r8, lr
 80008f6:	eb64 040c 	sbc.w	r4, r4, ip
 80008fa:	fa04 f606 	lsl.w	r6, r4, r6
 80008fe:	40cb      	lsrs	r3, r1
 8000900:	431e      	orrs	r6, r3
 8000902:	40cc      	lsrs	r4, r1
 8000904:	e9c5 6400 	strd	r6, r4, [r5]
 8000908:	2100      	movs	r1, #0
 800090a:	e750      	b.n	80007ae <__udivmoddi4+0xa6>
 800090c:	f1c2 0320 	rsb	r3, r2, #32
 8000910:	fa20 f103 	lsr.w	r1, r0, r3
 8000914:	fa0c fc02 	lsl.w	ip, ip, r2
 8000918:	fa24 f303 	lsr.w	r3, r4, r3
 800091c:	4094      	lsls	r4, r2
 800091e:	430c      	orrs	r4, r1
 8000920:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000924:	fa00 fe02 	lsl.w	lr, r0, r2
 8000928:	fa1f f78c 	uxth.w	r7, ip
 800092c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000930:	fb08 3110 	mls	r1, r8, r0, r3
 8000934:	0c23      	lsrs	r3, r4, #16
 8000936:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800093a:	fb00 f107 	mul.w	r1, r0, r7
 800093e:	4299      	cmp	r1, r3
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0x24c>
 8000942:	eb1c 0303 	adds.w	r3, ip, r3
 8000946:	f100 36ff 	add.w	r6, r0, #4294967295
 800094a:	d22c      	bcs.n	80009a6 <__udivmoddi4+0x29e>
 800094c:	4299      	cmp	r1, r3
 800094e:	d92a      	bls.n	80009a6 <__udivmoddi4+0x29e>
 8000950:	3802      	subs	r0, #2
 8000952:	4463      	add	r3, ip
 8000954:	1a5b      	subs	r3, r3, r1
 8000956:	b2a4      	uxth	r4, r4
 8000958:	fbb3 f1f8 	udiv	r1, r3, r8
 800095c:	fb08 3311 	mls	r3, r8, r1, r3
 8000960:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000964:	fb01 f307 	mul.w	r3, r1, r7
 8000968:	42a3      	cmp	r3, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x276>
 800096c:	eb1c 0404 	adds.w	r4, ip, r4
 8000970:	f101 36ff 	add.w	r6, r1, #4294967295
 8000974:	d213      	bcs.n	800099e <__udivmoddi4+0x296>
 8000976:	42a3      	cmp	r3, r4
 8000978:	d911      	bls.n	800099e <__udivmoddi4+0x296>
 800097a:	3902      	subs	r1, #2
 800097c:	4464      	add	r4, ip
 800097e:	1ae4      	subs	r4, r4, r3
 8000980:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000984:	e739      	b.n	80007fa <__udivmoddi4+0xf2>
 8000986:	4604      	mov	r4, r0
 8000988:	e6f0      	b.n	800076c <__udivmoddi4+0x64>
 800098a:	4608      	mov	r0, r1
 800098c:	e706      	b.n	800079c <__udivmoddi4+0x94>
 800098e:	45c8      	cmp	r8, r9
 8000990:	d2ae      	bcs.n	80008f0 <__udivmoddi4+0x1e8>
 8000992:	ebb9 0e02 	subs.w	lr, r9, r2
 8000996:	eb63 0c07 	sbc.w	ip, r3, r7
 800099a:	3801      	subs	r0, #1
 800099c:	e7a8      	b.n	80008f0 <__udivmoddi4+0x1e8>
 800099e:	4631      	mov	r1, r6
 80009a0:	e7ed      	b.n	800097e <__udivmoddi4+0x276>
 80009a2:	4603      	mov	r3, r0
 80009a4:	e799      	b.n	80008da <__udivmoddi4+0x1d2>
 80009a6:	4630      	mov	r0, r6
 80009a8:	e7d4      	b.n	8000954 <__udivmoddi4+0x24c>
 80009aa:	46d6      	mov	lr, sl
 80009ac:	e77f      	b.n	80008ae <__udivmoddi4+0x1a6>
 80009ae:	4463      	add	r3, ip
 80009b0:	3802      	subs	r0, #2
 80009b2:	e74d      	b.n	8000850 <__udivmoddi4+0x148>
 80009b4:	4606      	mov	r6, r0
 80009b6:	4623      	mov	r3, r4
 80009b8:	4608      	mov	r0, r1
 80009ba:	e70f      	b.n	80007dc <__udivmoddi4+0xd4>
 80009bc:	3e02      	subs	r6, #2
 80009be:	4463      	add	r3, ip
 80009c0:	e730      	b.n	8000824 <__udivmoddi4+0x11c>
 80009c2:	bf00      	nop

080009c4 <__aeabi_idiv0>:
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b089      	sub	sp, #36	@ 0x24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	4604      	mov	r4, r0
 80009d0:	4608      	mov	r0, r1
 80009d2:	4611      	mov	r1, r2
 80009d4:	461a      	mov	r2, r3
 80009d6:	4623      	mov	r3, r4
 80009d8:	71fb      	strb	r3, [r7, #7]
 80009da:	4603      	mov	r3, r0
 80009dc:	71bb      	strb	r3, [r7, #6]
 80009de:	460b      	mov	r3, r1
 80009e0:	717b      	strb	r3, [r7, #5]
 80009e2:	4613      	mov	r3, r2
 80009e4:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80009ea:	7dfb      	ldrb	r3, [r7, #23]
 80009ec:	2b1f      	cmp	r3, #31
 80009ee:	d802      	bhi.n	80009f6 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	e002      	b.n	80009fc <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80009f6:	7dfb      	ldrb	r3, [r7, #23]
 80009f8:	3b20      	subs	r3, #32
 80009fa:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80009fc:	2300      	movs	r3, #0
 80009fe:	753b      	strb	r3, [r7, #20]
 8000a00:	e012      	b.n	8000a28 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8000a02:	7dfa      	ldrb	r2, [r7, #23]
 8000a04:	7d38      	ldrb	r0, [r7, #20]
 8000a06:	7d39      	ldrb	r1, [r7, #20]
 8000a08:	4c3b      	ldr	r4, [pc, #236]	@ (8000af8 <ILI9341_Draw_Char+0x130>)
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	4423      	add	r3, r4
 8000a14:	4403      	add	r3, r0
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	f101 0318 	add.w	r3, r1, #24
 8000a1c:	443b      	add	r3, r7
 8000a1e:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8000a22:	7d3b      	ldrb	r3, [r7, #20]
 8000a24:	3301      	adds	r3, #1
 8000a26:	753b      	strb	r3, [r7, #20]
 8000a28:	7d3b      	ldrb	r3, [r7, #20]
 8000a2a:	2b05      	cmp	r3, #5
 8000a2c:	d9e9      	bls.n	8000a02 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8000a2e:	79bb      	ldrb	r3, [r7, #6]
 8000a30:	b298      	uxth	r0, r3
 8000a32:	797b      	ldrb	r3, [r7, #5]
 8000a34:	b299      	uxth	r1, r3
 8000a36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a38:	461a      	mov	r2, r3
 8000a3a:	0052      	lsls	r2, r2, #1
 8000a3c:	4413      	add	r3, r2
 8000a3e:	005b      	lsls	r3, r3, #1
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a44:	00db      	lsls	r3, r3, #3
 8000a46:	b29c      	uxth	r4, r3
 8000a48:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8000a4a:	9300      	str	r3, [sp, #0]
 8000a4c:	4623      	mov	r3, r4
 8000a4e:	f000 fc35 	bl	80012bc <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000a52:	2300      	movs	r3, #0
 8000a54:	757b      	strb	r3, [r7, #21]
 8000a56:	e047      	b.n	8000ae8 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	75bb      	strb	r3, [r7, #22]
 8000a5c:	e03e      	b.n	8000adc <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8000a5e:	7d7b      	ldrb	r3, [r7, #21]
 8000a60:	3318      	adds	r3, #24
 8000a62:	443b      	add	r3, r7
 8000a64:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	7dbb      	ldrb	r3, [r7, #22]
 8000a6c:	fa42 f303 	asr.w	r3, r2, r3
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d02e      	beq.n	8000ad6 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8000a78:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d110      	bne.n	8000aa0 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	7d7b      	ldrb	r3, [r7, #21]
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	4413      	add	r3, r2
 8000a88:	b298      	uxth	r0, r3
 8000a8a:	797b      	ldrb	r3, [r7, #5]
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	7dbb      	ldrb	r3, [r7, #22]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4413      	add	r3, r2
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	887a      	ldrh	r2, [r7, #2]
 8000a98:	4619      	mov	r1, r3
 8000a9a:	f000 fb39 	bl	8001110 <ILI9341_Draw_Pixel>
 8000a9e:	e01a      	b.n	8000ad6 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8000aa0:	79bb      	ldrb	r3, [r7, #6]
 8000aa2:	b29a      	uxth	r2, r3
 8000aa4:	7d7b      	ldrb	r3, [r7, #21]
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000aaa:	fb11 f303 	smulbb	r3, r1, r3
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	4413      	add	r3, r2
 8000ab2:	b298      	uxth	r0, r3
 8000ab4:	797b      	ldrb	r3, [r7, #5]
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	7dbb      	ldrb	r3, [r7, #22]
 8000aba:	b29b      	uxth	r3, r3
 8000abc:	8d39      	ldrh	r1, [r7, #40]	@ 0x28
 8000abe:	fb11 f303 	smulbb	r3, r1, r3
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4413      	add	r3, r2
 8000ac6:	b299      	uxth	r1, r3
 8000ac8:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8000aca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000acc:	887b      	ldrh	r3, [r7, #2]
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	4623      	mov	r3, r4
 8000ad2:	f000 fbf3 	bl	80012bc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8000ad6:	7dbb      	ldrb	r3, [r7, #22]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	75bb      	strb	r3, [r7, #22]
 8000adc:	7dbb      	ldrb	r3, [r7, #22]
 8000ade:	2b07      	cmp	r3, #7
 8000ae0:	d9bd      	bls.n	8000a5e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8000ae2:	7d7b      	ldrb	r3, [r7, #21]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	757b      	strb	r3, [r7, #21]
 8000ae8:	7d7b      	ldrb	r3, [r7, #21]
 8000aea:	2b05      	cmp	r3, #5
 8000aec:	d9b4      	bls.n	8000a58 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8000aee:	bf00      	nop
 8000af0:	bf00      	nop
 8000af2:	371c      	adds	r7, #28
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	0800cf9c 	.word	0x0800cf9c

08000afc <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b085      	sub	sp, #20
 8000b00:	af02      	add	r7, sp, #8
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	4608      	mov	r0, r1
 8000b06:	4611      	mov	r1, r2
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	70fb      	strb	r3, [r7, #3]
 8000b0e:	460b      	mov	r3, r1
 8000b10:	70bb      	strb	r3, [r7, #2]
 8000b12:	4613      	mov	r3, r2
 8000b14:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8000b16:	e017      	b.n	8000b48 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	7818      	ldrb	r0, [r3, #0]
 8000b20:	883c      	ldrh	r4, [r7, #0]
 8000b22:	78ba      	ldrb	r2, [r7, #2]
 8000b24:	78f9      	ldrb	r1, [r7, #3]
 8000b26:	8bbb      	ldrh	r3, [r7, #28]
 8000b28:	9301      	str	r3, [sp, #4]
 8000b2a:	8b3b      	ldrh	r3, [r7, #24]
 8000b2c:	9300      	str	r3, [sp, #0]
 8000b2e:	4623      	mov	r3, r4
 8000b30:	f7ff ff4a 	bl	80009c8 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8000b34:	8b3b      	ldrh	r3, [r7, #24]
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	461a      	mov	r2, r3
 8000b3a:	0052      	lsls	r2, r2, #1
 8000b3c:	4413      	add	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	78fb      	ldrb	r3, [r7, #3]
 8000b44:	4413      	add	r3, r2
 8000b46:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d1e3      	bne.n	8000b18 <ILI9341_Draw_Text+0x1c>
    }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd90      	pop	{r4, r7, pc}
	...

08000b5c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8000b60:	f002 f954 	bl	8002e0c <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8000b64:	f001 fd20 	bl	80025a8 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8000b68:	2200      	movs	r2, #0
 8000b6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000b6e:	4802      	ldr	r0, [pc, #8]	@ (8000b78 <ILI9341_SPI_Init+0x1c>)
 8000b70:	f004 ff64 	bl	8005a3c <HAL_GPIO_WritePin>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40020800 	.word	0x40020800

08000b7c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8000b86:	1df9      	adds	r1, r7, #7
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4803      	ldr	r0, [pc, #12]	@ (8000b9c <ILI9341_SPI_Send+0x20>)
 8000b8e:	f007 f978 	bl	8007e82 <HAL_SPI_Transmit>
}
 8000b92:	bf00      	nop
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20031b88 	.word	0x20031b88

08000ba0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bb0:	480a      	ldr	r0, [pc, #40]	@ (8000bdc <ILI9341_Write_Command+0x3c>)
 8000bb2:	f004 ff43 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4809      	ldr	r0, [pc, #36]	@ (8000be0 <ILI9341_Write_Command+0x40>)
 8000bbc:	f004 ff3e 	bl	8005a3c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ffda 	bl	8000b7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bce:	4803      	ldr	r0, [pc, #12]	@ (8000bdc <ILI9341_Write_Command+0x3c>)
 8000bd0:	f004 ff34 	bl	8005a3c <HAL_GPIO_WritePin>
}
 8000bd4:	bf00      	nop
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40020800 	.word	0x40020800
 8000be0:	40020c00 	.word	0x40020c00

08000be4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8000bee:	2201      	movs	r2, #1
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	480b      	ldr	r0, [pc, #44]	@ (8000c20 <ILI9341_Write_Data+0x3c>)
 8000bf4:	f004 ff22 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000bfe:	4809      	ldr	r0, [pc, #36]	@ (8000c24 <ILI9341_Write_Data+0x40>)
 8000c00:	f004 ff1c 	bl	8005a3c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8000c04:	79fb      	ldrb	r3, [r7, #7]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ffb8 	bl	8000b7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c12:	4804      	ldr	r0, [pc, #16]	@ (8000c24 <ILI9341_Write_Data+0x40>)
 8000c14:	f004 ff12 	bl	8005a3c <HAL_GPIO_WritePin>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40020c00 	.word	0x40020c00
 8000c24:	40020800 	.word	0x40020800

08000c28 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8000c28:	b590      	push	{r4, r7, lr}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4604      	mov	r4, r0
 8000c30:	4608      	mov	r0, r1
 8000c32:	4611      	mov	r1, r2
 8000c34:	461a      	mov	r2, r3
 8000c36:	4623      	mov	r3, r4
 8000c38:	80fb      	strh	r3, [r7, #6]
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	80bb      	strh	r3, [r7, #4]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	807b      	strh	r3, [r7, #2]
 8000c42:	4613      	mov	r3, r2
 8000c44:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8000c46:	202a      	movs	r0, #42	@ 0x2a
 8000c48:	f7ff ffaa 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8000c4c:	88fb      	ldrh	r3, [r7, #6]
 8000c4e:	0a1b      	lsrs	r3, r3, #8
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ffc5 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8000c5a:	88fb      	ldrh	r3, [r7, #6]
 8000c5c:	b2db      	uxtb	r3, r3
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff ffc0 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8000c64:	887b      	ldrh	r3, [r7, #2]
 8000c66:	0a1b      	lsrs	r3, r3, #8
 8000c68:	b29b      	uxth	r3, r3
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff ffb9 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8000c72:	887b      	ldrh	r3, [r7, #2]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff ffb4 	bl	8000be4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8000c7c:	202b      	movs	r0, #43	@ 0x2b
 8000c7e:	f7ff ff8f 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8000c82:	88bb      	ldrh	r3, [r7, #4]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	b2db      	uxtb	r3, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff ffaa 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8000c90:	88bb      	ldrh	r3, [r7, #4]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffa5 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8000c9a:	883b      	ldrh	r3, [r7, #0]
 8000c9c:	0a1b      	lsrs	r3, r3, #8
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff9e 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8000ca8:	883b      	ldrh	r3, [r7, #0]
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff99 	bl	8000be4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8000cb2:	202c      	movs	r0, #44	@ 0x2c
 8000cb4:	f7ff ff74 	bl	8000ba0 <ILI9341_Write_Command>
}
 8000cb8:	bf00      	nop
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd90      	pop	{r4, r7, pc}

08000cc0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cca:	480b      	ldr	r0, [pc, #44]	@ (8000cf8 <ILI9341_Reset+0x38>)
 8000ccc:	f004 feb6 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000cd0:	20c8      	movs	r0, #200	@ 0xc8
 8000cd2:	f002 fb67 	bl	80033a4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cdc:	4806      	ldr	r0, [pc, #24]	@ (8000cf8 <ILI9341_Reset+0x38>)
 8000cde:	f004 fead 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_Delay(200);
 8000ce2:	20c8      	movs	r0, #200	@ 0xc8
 8000ce4:	f002 fb5e 	bl	80033a4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cee:	4802      	ldr	r0, [pc, #8]	@ (8000cf8 <ILI9341_Reset+0x38>)
 8000cf0:	f004 fea4 	bl	8005a3c <HAL_GPIO_WritePin>
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40020800 	.word	0x40020800

08000cfc <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8000d0a:	2036      	movs	r0, #54	@ 0x36
 8000d0c:	f7ff ff48 	bl	8000ba0 <ILI9341_Write_Command>
HAL_Delay(1);
 8000d10:	2001      	movs	r0, #1
 8000d12:	f002 fb47 	bl	80033a4 <HAL_Delay>
	
switch(screen_rotation) 
 8000d16:	7bfb      	ldrb	r3, [r7, #15]
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	d837      	bhi.n	8000d8c <ILI9341_Set_Rotation+0x90>
 8000d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8000d24 <ILI9341_Set_Rotation+0x28>)
 8000d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d22:	bf00      	nop
 8000d24:	08000d35 	.word	0x08000d35
 8000d28:	08000d4b 	.word	0x08000d4b
 8000d2c:	08000d61 	.word	0x08000d61
 8000d30:	08000d77 	.word	0x08000d77
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8000d34:	2048      	movs	r0, #72	@ 0x48
 8000d36:	f7ff ff55 	bl	8000be4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8000d3a:	4b17      	ldr	r3, [pc, #92]	@ (8000d98 <ILI9341_Set_Rotation+0x9c>)
 8000d3c:	22f0      	movs	r2, #240	@ 0xf0
 8000d3e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000d40:	4b16      	ldr	r3, [pc, #88]	@ (8000d9c <ILI9341_Set_Rotation+0xa0>)
 8000d42:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000d46:	801a      	strh	r2, [r3, #0]
			break;
 8000d48:	e021      	b.n	8000d8e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8000d4a:	2028      	movs	r0, #40	@ 0x28
 8000d4c:	f7ff ff4a 	bl	8000be4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000d50:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <ILI9341_Set_Rotation+0x9c>)
 8000d52:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000d56:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000d58:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <ILI9341_Set_Rotation+0xa0>)
 8000d5a:	22f0      	movs	r2, #240	@ 0xf0
 8000d5c:	801a      	strh	r2, [r3, #0]
			break;
 8000d5e:	e016      	b.n	8000d8e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8000d60:	2088      	movs	r0, #136	@ 0x88
 8000d62:	f7ff ff3f 	bl	8000be4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <ILI9341_Set_Rotation+0x9c>)
 8000d68:	22f0      	movs	r2, #240	@ 0xf0
 8000d6a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <ILI9341_Set_Rotation+0xa0>)
 8000d6e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000d72:	801a      	strh	r2, [r3, #0]
			break;
 8000d74:	e00b      	b.n	8000d8e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8000d76:	20e8      	movs	r0, #232	@ 0xe8
 8000d78:	f7ff ff34 	bl	8000be4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <ILI9341_Set_Rotation+0x9c>)
 8000d7e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000d82:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <ILI9341_Set_Rotation+0xa0>)
 8000d86:	22f0      	movs	r2, #240	@ 0xf0
 8000d88:	801a      	strh	r2, [r3, #0]
			break;
 8000d8a:	e000      	b.n	8000d8e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8000d8c:	bf00      	nop
	}
}
 8000d8e:	bf00      	nop
 8000d90:	3710      	adds	r7, #16
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000002 	.word	0x20000002
 8000d9c:	20000000 	.word	0x20000000

08000da0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8000da4:	2201      	movs	r2, #1
 8000da6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000daa:	4802      	ldr	r0, [pc, #8]	@ (8000db4 <ILI9341_Enable+0x14>)
 8000dac:	f004 fe46 	bl	8005a3c <HAL_GPIO_WritePin>
}
 8000db0:	bf00      	nop
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	40020800 	.word	0x40020800

08000db8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8000dbc:	f7ff fff0 	bl	8000da0 <ILI9341_Enable>
ILI9341_SPI_Init();
 8000dc0:	f7ff fecc 	bl	8000b5c <ILI9341_SPI_Init>
ILI9341_Reset();
 8000dc4:	f7ff ff7c 	bl	8000cc0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f7ff fee9 	bl	8000ba0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8000dce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dd2:	f002 fae7 	bl	80033a4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8000dd6:	20cb      	movs	r0, #203	@ 0xcb
 8000dd8:	f7ff fee2 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8000ddc:	2039      	movs	r0, #57	@ 0x39
 8000dde:	f7ff ff01 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8000de2:	202c      	movs	r0, #44	@ 0x2c
 8000de4:	f7ff fefe 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000de8:	2000      	movs	r0, #0
 8000dea:	f7ff fefb 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8000dee:	2034      	movs	r0, #52	@ 0x34
 8000df0:	f7ff fef8 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8000df4:	2002      	movs	r0, #2
 8000df6:	f7ff fef5 	bl	8000be4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8000dfa:	20cf      	movs	r0, #207	@ 0xcf
 8000dfc:	f7ff fed0 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000e00:	2000      	movs	r0, #0
 8000e02:	f7ff feef 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000e06:	20c1      	movs	r0, #193	@ 0xc1
 8000e08:	f7ff feec 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8000e0c:	2030      	movs	r0, #48	@ 0x30
 8000e0e:	f7ff fee9 	bl	8000be4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8000e12:	20e8      	movs	r0, #232	@ 0xe8
 8000e14:	f7ff fec4 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8000e18:	2085      	movs	r0, #133	@ 0x85
 8000e1a:	f7ff fee3 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f7ff fee0 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8000e24:	2078      	movs	r0, #120	@ 0x78
 8000e26:	f7ff fedd 	bl	8000be4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8000e2a:	20ea      	movs	r0, #234	@ 0xea
 8000e2c:	f7ff feb8 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fed7 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fed4 	bl	8000be4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8000e3c:	20ed      	movs	r0, #237	@ 0xed
 8000e3e:	f7ff feaf 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8000e42:	2064      	movs	r0, #100	@ 0x64
 8000e44:	f7ff fece 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000e48:	2003      	movs	r0, #3
 8000e4a:	f7ff fecb 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8000e4e:	2012      	movs	r0, #18
 8000e50:	f7ff fec8 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8000e54:	2081      	movs	r0, #129	@ 0x81
 8000e56:	f7ff fec5 	bl	8000be4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8000e5a:	20f7      	movs	r0, #247	@ 0xf7
 8000e5c:	f7ff fea0 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8000e60:	2020      	movs	r0, #32
 8000e62:	f7ff febf 	bl	8000be4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8000e66:	20c0      	movs	r0, #192	@ 0xc0
 8000e68:	f7ff fe9a 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8000e6c:	2023      	movs	r0, #35	@ 0x23
 8000e6e:	f7ff feb9 	bl	8000be4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8000e72:	20c1      	movs	r0, #193	@ 0xc1
 8000e74:	f7ff fe94 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8000e78:	2010      	movs	r0, #16
 8000e7a:	f7ff feb3 	bl	8000be4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8000e7e:	20c5      	movs	r0, #197	@ 0xc5
 8000e80:	f7ff fe8e 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8000e84:	203e      	movs	r0, #62	@ 0x3e
 8000e86:	f7ff fead 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8000e8a:	2028      	movs	r0, #40	@ 0x28
 8000e8c:	f7ff feaa 	bl	8000be4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8000e90:	20c7      	movs	r0, #199	@ 0xc7
 8000e92:	f7ff fe85 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8000e96:	2086      	movs	r0, #134	@ 0x86
 8000e98:	f7ff fea4 	bl	8000be4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8000e9c:	2036      	movs	r0, #54	@ 0x36
 8000e9e:	f7ff fe7f 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8000ea2:	2048      	movs	r0, #72	@ 0x48
 8000ea4:	f7ff fe9e 	bl	8000be4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8000ea8:	203a      	movs	r0, #58	@ 0x3a
 8000eaa:	f7ff fe79 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8000eae:	2055      	movs	r0, #85	@ 0x55
 8000eb0:	f7ff fe98 	bl	8000be4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8000eb4:	20b1      	movs	r0, #177	@ 0xb1
 8000eb6:	f7ff fe73 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f7ff fe92 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8000ec0:	2018      	movs	r0, #24
 8000ec2:	f7ff fe8f 	bl	8000be4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8000ec6:	20b6      	movs	r0, #182	@ 0xb6
 8000ec8:	f7ff fe6a 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8000ecc:	2008      	movs	r0, #8
 8000ece:	f7ff fe89 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8000ed2:	2082      	movs	r0, #130	@ 0x82
 8000ed4:	f7ff fe86 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8000ed8:	2027      	movs	r0, #39	@ 0x27
 8000eda:	f7ff fe83 	bl	8000be4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8000ede:	20f2      	movs	r0, #242	@ 0xf2
 8000ee0:	f7ff fe5e 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff fe7d 	bl	8000be4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8000eea:	2026      	movs	r0, #38	@ 0x26
 8000eec:	f7ff fe58 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f7ff fe77 	bl	8000be4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8000ef6:	20e0      	movs	r0, #224	@ 0xe0
 8000ef8:	f7ff fe52 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8000efc:	200f      	movs	r0, #15
 8000efe:	f7ff fe71 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000f02:	2031      	movs	r0, #49	@ 0x31
 8000f04:	f7ff fe6e 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8000f08:	202b      	movs	r0, #43	@ 0x2b
 8000f0a:	f7ff fe6b 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000f0e:	200c      	movs	r0, #12
 8000f10:	f7ff fe68 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000f14:	200e      	movs	r0, #14
 8000f16:	f7ff fe65 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000f1a:	2008      	movs	r0, #8
 8000f1c:	f7ff fe62 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8000f20:	204e      	movs	r0, #78	@ 0x4e
 8000f22:	f7ff fe5f 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8000f26:	20f1      	movs	r0, #241	@ 0xf1
 8000f28:	f7ff fe5c 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8000f2c:	2037      	movs	r0, #55	@ 0x37
 8000f2e:	f7ff fe59 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000f32:	2007      	movs	r0, #7
 8000f34:	f7ff fe56 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8000f38:	2010      	movs	r0, #16
 8000f3a:	f7ff fe53 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f7ff fe50 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000f44:	200e      	movs	r0, #14
 8000f46:	f7ff fe4d 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8000f4a:	2009      	movs	r0, #9
 8000f4c:	f7ff fe4a 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8000f50:	2000      	movs	r0, #0
 8000f52:	f7ff fe47 	bl	8000be4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8000f56:	20e1      	movs	r0, #225	@ 0xe1
 8000f58:	f7ff fe22 	bl	8000ba0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f7ff fe41 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8000f62:	200e      	movs	r0, #14
 8000f64:	f7ff fe3e 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8000f68:	2014      	movs	r0, #20
 8000f6a:	f7ff fe3b 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f7ff fe38 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8000f74:	2011      	movs	r0, #17
 8000f76:	f7ff fe35 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8000f7a:	2007      	movs	r0, #7
 8000f7c:	f7ff fe32 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000f80:	2031      	movs	r0, #49	@ 0x31
 8000f82:	f7ff fe2f 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8000f86:	20c1      	movs	r0, #193	@ 0xc1
 8000f88:	f7ff fe2c 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8000f8c:	2048      	movs	r0, #72	@ 0x48
 8000f8e:	f7ff fe29 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8000f92:	2008      	movs	r0, #8
 8000f94:	f7ff fe26 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000f98:	200f      	movs	r0, #15
 8000f9a:	f7ff fe23 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8000f9e:	200c      	movs	r0, #12
 8000fa0:	f7ff fe20 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8000fa4:	2031      	movs	r0, #49	@ 0x31
 8000fa6:	f7ff fe1d 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8000faa:	2036      	movs	r0, #54	@ 0x36
 8000fac:	f7ff fe1a 	bl	8000be4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8000fb0:	200f      	movs	r0, #15
 8000fb2:	f7ff fe17 	bl	8000be4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8000fb6:	2011      	movs	r0, #17
 8000fb8:	f7ff fdf2 	bl	8000ba0 <ILI9341_Write_Command>
HAL_Delay(120);
 8000fbc:	2078      	movs	r0, #120	@ 0x78
 8000fbe:	f002 f9f1 	bl	80033a4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8000fc2:	2029      	movs	r0, #41	@ 0x29
 8000fc4:	f7ff fdec 	bl	8000ba0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f7ff fe97 	bl	8000cfc <ILI9341_Set_Rotation>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8000fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fd8:	b08d      	sub	sp, #52	@ 0x34
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	6039      	str	r1, [r7, #0]
 8000fe0:	80fb      	strh	r3, [r7, #6]
 8000fe2:	466b      	mov	r3, sp
 8000fe4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c
if((Size*2) < BURST_MAX_SIZE)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000ff2:	d202      	bcs.n	8000ffa <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ff8:	e002      	b.n	8001000 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8000ffa:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001000:	2201      	movs	r2, #1
 8001002:	2104      	movs	r1, #4
 8001004:	483f      	ldr	r0, [pc, #252]	@ (8001104 <ILI9341_Draw_Colour_Burst+0x130>)
 8001006:	f004 fd19 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001010:	483d      	ldr	r0, [pc, #244]	@ (8001108 <ILI9341_Draw_Colour_Burst+0x134>)
 8001012:	f004 fd13 	bl	8005a3c <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	b29b      	uxth	r3, r3
 800101c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
unsigned char burst_buffer[Buffer_Size];
 8001020:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001022:	460b      	mov	r3, r1
 8001024:	3b01      	subs	r3, #1
 8001026:	61fb      	str	r3, [r7, #28]
 8001028:	2300      	movs	r3, #0
 800102a:	4688      	mov	r8, r1
 800102c:	4699      	mov	r9, r3
 800102e:	f04f 0200 	mov.w	r2, #0
 8001032:	f04f 0300 	mov.w	r3, #0
 8001036:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800103a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800103e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001042:	2300      	movs	r3, #0
 8001044:	460c      	mov	r4, r1
 8001046:	461d      	mov	r5, r3
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	00eb      	lsls	r3, r5, #3
 8001052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001056:	00e2      	lsls	r2, r4, #3
 8001058:	1dcb      	adds	r3, r1, #7
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	ebad 0d03 	sub.w	sp, sp, r3
 8001062:	466b      	mov	r3, sp
 8001064:	3300      	adds	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800106c:	e00e      	b.n	800108c <ILI9341_Draw_Colour_Burst+0xb8>
	{
		burst_buffer[j] = 	chifted;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001072:	4413      	add	r3, r2
 8001074:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8001078:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800107a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800107c:	3301      	adds	r3, #1
 800107e:	88fa      	ldrh	r2, [r7, #6]
 8001080:	b2d1      	uxtb	r1, r2
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001088:	3302      	adds	r3, #2
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800108c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800108e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001090:	429a      	cmp	r2, r3
 8001092:	d3ec      	bcc.n	800106e <ILI9341_Draw_Colour_Burst+0x9a>
	}

uint32_t Sending_Size = Size*2;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80010a8:	fbb3 f2f2 	udiv	r2, r3, r2
 80010ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80010ae:	fb01 f202 	mul.w	r2, r1, r2
 80010b2:	1a9b      	subs	r3, r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d010      	beq.n	80010de <ILI9341_Draw_Colour_Burst+0x10a>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80010bc:	2300      	movs	r3, #0
 80010be:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c0:	e009      	b.n	80010d6 <ILI9341_Draw_Colour_Burst+0x102>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80010c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010c4:	b29a      	uxth	r2, r3
 80010c6:	230a      	movs	r3, #10
 80010c8:	69b9      	ldr	r1, [r7, #24]
 80010ca:	4810      	ldr	r0, [pc, #64]	@ (800110c <ILI9341_Draw_Colour_Burst+0x138>)
 80010cc:	f006 fed9 	bl	8007e82 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80010d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d2:	3301      	adds	r3, #1
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d3f1      	bcc.n	80010c2 <ILI9341_Draw_Colour_Burst+0xee>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	230a      	movs	r3, #10
 80010e4:	69b9      	ldr	r1, [r7, #24]
 80010e6:	4809      	ldr	r0, [pc, #36]	@ (800110c <ILI9341_Draw_Colour_Burst+0x138>)
 80010e8:	f006 fecb 	bl	8007e82 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010f2:	4805      	ldr	r0, [pc, #20]	@ (8001108 <ILI9341_Draw_Colour_Burst+0x134>)
 80010f4:	f004 fca2 	bl	8005a3c <HAL_GPIO_WritePin>
 80010f8:	46b5      	mov	sp, r6
}
 80010fa:	bf00      	nop
 80010fc:	3734      	adds	r7, #52	@ 0x34
 80010fe:	46bd      	mov	sp, r7
 8001100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001104:	40020c00 	.word	0x40020c00
 8001108:	40020800 	.word	0x40020800
 800110c:	20031b88 	.word	0x20031b88

08001110 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	80fb      	strh	r3, [r7, #6]
 800111a:	460b      	mov	r3, r1
 800111c:	80bb      	strh	r3, [r7, #4]
 800111e:	4613      	mov	r3, r2
 8001120:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001122:	4b61      	ldr	r3, [pc, #388]	@ (80012a8 <ILI9341_Draw_Pixel+0x198>)
 8001124:	881b      	ldrh	r3, [r3, #0]
 8001126:	b29b      	uxth	r3, r3
 8001128:	88fa      	ldrh	r2, [r7, #6]
 800112a:	429a      	cmp	r2, r3
 800112c:	f080 80b8 	bcs.w	80012a0 <ILI9341_Draw_Pixel+0x190>
 8001130:	4b5e      	ldr	r3, [pc, #376]	@ (80012ac <ILI9341_Draw_Pixel+0x19c>)
 8001132:	881b      	ldrh	r3, [r3, #0]
 8001134:	b29b      	uxth	r3, r3
 8001136:	88ba      	ldrh	r2, [r7, #4]
 8001138:	429a      	cmp	r2, r3
 800113a:	f080 80b1 	bcs.w	80012a0 <ILI9341_Draw_Pixel+0x190>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800113e:	2200      	movs	r2, #0
 8001140:	2104      	movs	r1, #4
 8001142:	485b      	ldr	r0, [pc, #364]	@ (80012b0 <ILI9341_Draw_Pixel+0x1a0>)
 8001144:	f004 fc7a 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800114e:	4859      	ldr	r0, [pc, #356]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 8001150:	f004 fc74 	bl	8005a3c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8001154:	202a      	movs	r0, #42	@ 0x2a
 8001156:	f7ff fd11 	bl	8000b7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800115a:	2201      	movs	r2, #1
 800115c:	2104      	movs	r1, #4
 800115e:	4854      	ldr	r0, [pc, #336]	@ (80012b0 <ILI9341_Draw_Pixel+0x1a0>)
 8001160:	f004 fc6c 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001164:	2201      	movs	r2, #1
 8001166:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800116a:	4852      	ldr	r0, [pc, #328]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 800116c:	f004 fc66 	bl	8005a3c <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001170:	2200      	movs	r2, #0
 8001172:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001176:	484f      	ldr	r0, [pc, #316]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 8001178:	f004 fc60 	bl	8005a3c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	0a1b      	lsrs	r3, r3, #8
 8001180:	b29b      	uxth	r3, r3
 8001182:	b2db      	uxtb	r3, r3
 8001184:	753b      	strb	r3, [r7, #20]
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	757b      	strb	r3, [r7, #21]
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	3301      	adds	r3, #1
 8001190:	121b      	asrs	r3, r3, #8
 8001192:	b2db      	uxtb	r3, r3
 8001194:	75bb      	strb	r3, [r7, #22]
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3301      	adds	r3, #1
 800119c:	b2db      	uxtb	r3, r3
 800119e:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 80011a0:	f107 0114 	add.w	r1, r7, #20
 80011a4:	2301      	movs	r3, #1
 80011a6:	2204      	movs	r2, #4
 80011a8:	4843      	ldr	r0, [pc, #268]	@ (80012b8 <ILI9341_Draw_Pixel+0x1a8>)
 80011aa:	f006 fe6a 	bl	8007e82 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80011ae:	2201      	movs	r2, #1
 80011b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011b4:	483f      	ldr	r0, [pc, #252]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 80011b6:	f004 fc41 	bl	8005a3c <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80011ba:	2200      	movs	r2, #0
 80011bc:	2104      	movs	r1, #4
 80011be:	483c      	ldr	r0, [pc, #240]	@ (80012b0 <ILI9341_Draw_Pixel+0x1a0>)
 80011c0:	f004 fc3c 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011ca:	483a      	ldr	r0, [pc, #232]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 80011cc:	f004 fc36 	bl	8005a3c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 80011d0:	202b      	movs	r0, #43	@ 0x2b
 80011d2:	f7ff fcd3 	bl	8000b7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 80011d6:	2201      	movs	r2, #1
 80011d8:	2104      	movs	r1, #4
 80011da:	4835      	ldr	r0, [pc, #212]	@ (80012b0 <ILI9341_Draw_Pixel+0x1a0>)
 80011dc:	f004 fc2e 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011e6:	4833      	ldr	r0, [pc, #204]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 80011e8:	f004 fc28 	bl	8005a3c <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011f2:	4830      	ldr	r0, [pc, #192]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 80011f4:	f004 fc22 	bl	8005a3c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80011f8:	88bb      	ldrh	r3, [r7, #4]
 80011fa:	0a1b      	lsrs	r3, r3, #8
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	743b      	strb	r3, [r7, #16]
 8001202:	88bb      	ldrh	r3, [r7, #4]
 8001204:	b2db      	uxtb	r3, r3
 8001206:	747b      	strb	r3, [r7, #17]
 8001208:	88bb      	ldrh	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	121b      	asrs	r3, r3, #8
 800120e:	b2db      	uxtb	r3, r3
 8001210:	74bb      	strb	r3, [r7, #18]
 8001212:	88bb      	ldrh	r3, [r7, #4]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	3301      	adds	r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 800121c:	f107 0110 	add.w	r1, r7, #16
 8001220:	2301      	movs	r3, #1
 8001222:	2204      	movs	r2, #4
 8001224:	4824      	ldr	r0, [pc, #144]	@ (80012b8 <ILI9341_Draw_Pixel+0x1a8>)
 8001226:	f006 fe2c 	bl	8007e82 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001230:	4820      	ldr	r0, [pc, #128]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 8001232:	f004 fc03 	bl	8005a3c <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001236:	2200      	movs	r2, #0
 8001238:	2104      	movs	r1, #4
 800123a:	481d      	ldr	r0, [pc, #116]	@ (80012b0 <ILI9341_Draw_Pixel+0x1a0>)
 800123c:	f004 fbfe 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8001240:	2200      	movs	r2, #0
 8001242:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001246:	481b      	ldr	r0, [pc, #108]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 8001248:	f004 fbf8 	bl	8005a3c <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800124c:	202c      	movs	r0, #44	@ 0x2c
 800124e:	f7ff fc95 	bl	8000b7c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8001252:	2201      	movs	r2, #1
 8001254:	2104      	movs	r1, #4
 8001256:	4816      	ldr	r0, [pc, #88]	@ (80012b0 <ILI9341_Draw_Pixel+0x1a0>)
 8001258:	f004 fbf0 	bl	8005a3c <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800125c:	2201      	movs	r2, #1
 800125e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001262:	4814      	ldr	r0, [pc, #80]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 8001264:	f004 fbea 	bl	8005a3c <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001268:	2200      	movs	r2, #0
 800126a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800126e:	4811      	ldr	r0, [pc, #68]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 8001270:	f004 fbe4 	bl	8005a3c <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8001274:	887b      	ldrh	r3, [r7, #2]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	b29b      	uxth	r3, r3
 800127a:	b2db      	uxtb	r3, r3
 800127c:	733b      	strb	r3, [r7, #12]
 800127e:	887b      	ldrh	r3, [r7, #2]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8001284:	f107 010c 	add.w	r1, r7, #12
 8001288:	2301      	movs	r3, #1
 800128a:	2202      	movs	r2, #2
 800128c:	480a      	ldr	r0, [pc, #40]	@ (80012b8 <ILI9341_Draw_Pixel+0x1a8>)
 800128e:	f006 fdf8 	bl	8007e82 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001298:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <ILI9341_Draw_Pixel+0x1a4>)
 800129a:	f004 fbcf 	bl	8005a3c <HAL_GPIO_WritePin>
 800129e:	e000      	b.n	80012a2 <ILI9341_Draw_Pixel+0x192>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80012a0:	bf00      	nop
	
}
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20000002 	.word	0x20000002
 80012ac:	20000000 	.word	0x20000000
 80012b0:	40020c00 	.word	0x40020c00
 80012b4:	40020800 	.word	0x40020800
 80012b8:	20031b88 	.word	0x20031b88

080012bc <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4604      	mov	r4, r0
 80012c4:	4608      	mov	r0, r1
 80012c6:	4611      	mov	r1, r2
 80012c8:	461a      	mov	r2, r3
 80012ca:	4623      	mov	r3, r4
 80012cc:	80fb      	strh	r3, [r7, #6]
 80012ce:	4603      	mov	r3, r0
 80012d0:	80bb      	strh	r3, [r7, #4]
 80012d2:	460b      	mov	r3, r1
 80012d4:	807b      	strh	r3, [r7, #2]
 80012d6:	4613      	mov	r3, r2
 80012d8:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80012da:	4b24      	ldr	r3, [pc, #144]	@ (800136c <ILI9341_Draw_Rectangle+0xb0>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	b29b      	uxth	r3, r3
 80012e0:	88fa      	ldrh	r2, [r7, #6]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d23d      	bcs.n	8001362 <ILI9341_Draw_Rectangle+0xa6>
 80012e6:	4b22      	ldr	r3, [pc, #136]	@ (8001370 <ILI9341_Draw_Rectangle+0xb4>)
 80012e8:	881b      	ldrh	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	88ba      	ldrh	r2, [r7, #4]
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d237      	bcs.n	8001362 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80012f2:	88fa      	ldrh	r2, [r7, #6]
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a1c      	ldr	r2, [pc, #112]	@ (800136c <ILI9341_Draw_Rectangle+0xb0>)
 80012fa:	8812      	ldrh	r2, [r2, #0]
 80012fc:	b292      	uxth	r2, r2
 80012fe:	4293      	cmp	r3, r2
 8001300:	dd05      	ble.n	800130e <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8001302:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <ILI9341_Draw_Rectangle+0xb0>)
 8001304:	881b      	ldrh	r3, [r3, #0]
 8001306:	b29a      	uxth	r2, r3
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 800130e:	88ba      	ldrh	r2, [r7, #4]
 8001310:	883b      	ldrh	r3, [r7, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a16      	ldr	r2, [pc, #88]	@ (8001370 <ILI9341_Draw_Rectangle+0xb4>)
 8001316:	8812      	ldrh	r2, [r2, #0]
 8001318:	b292      	uxth	r2, r2
 800131a:	4293      	cmp	r3, r2
 800131c:	dd05      	ble.n	800132a <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 800131e:	4b14      	ldr	r3, [pc, #80]	@ (8001370 <ILI9341_Draw_Rectangle+0xb4>)
 8001320:	881b      	ldrh	r3, [r3, #0]
 8001322:	b29a      	uxth	r2, r3
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800132a:	88fa      	ldrh	r2, [r7, #6]
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	4413      	add	r3, r2
 8001330:	b29b      	uxth	r3, r3
 8001332:	3b01      	subs	r3, #1
 8001334:	b29c      	uxth	r4, r3
 8001336:	88ba      	ldrh	r2, [r7, #4]
 8001338:	883b      	ldrh	r3, [r7, #0]
 800133a:	4413      	add	r3, r2
 800133c:	b29b      	uxth	r3, r3
 800133e:	3b01      	subs	r3, #1
 8001340:	b29b      	uxth	r3, r3
 8001342:	88b9      	ldrh	r1, [r7, #4]
 8001344:	88f8      	ldrh	r0, [r7, #6]
 8001346:	4622      	mov	r2, r4
 8001348:	f7ff fc6e 	bl	8000c28 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 800134c:	883b      	ldrh	r3, [r7, #0]
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	461a      	mov	r2, r3
 8001356:	8b3b      	ldrh	r3, [r7, #24]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe3a 	bl	8000fd4 <ILI9341_Draw_Colour_Burst>
 8001360:	e000      	b.n	8001364 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8001362:	bf00      	nop
}
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bd90      	pop	{r4, r7, pc}
 800136a:	bf00      	nop
 800136c:	20000002 	.word	0x20000002
 8001370:	20000000 	.word	0x20000000

08001374 <OV7670_Init>:
extern uint32_t hsync;
extern uint32_t frame_count;
extern _Bool frame_transfer_cplt_flag;

void OV7670_Init(DCMI_HandleTypeDef *p_hdcmi, DMA_HandleTypeDef *p_hdma_dcmi, I2C_HandleTypeDef *p_hi2c, LPTIM_HandleTypeDef *p_hlptim)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
	sp_hdcmi=p_hdcmi;
 8001382:	4a09      	ldr	r2, [pc, #36]	@ (80013a8 <OV7670_Init+0x34>)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6013      	str	r3, [r2, #0]
	sp_hdma_dcmi=p_hdma_dcmi;
 8001388:	4a08      	ldr	r2, [pc, #32]	@ (80013ac <OV7670_Init+0x38>)
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	6013      	str	r3, [r2, #0]
	sp_hi2c=p_hi2c;
 800138e:	4a08      	ldr	r2, [pc, #32]	@ (80013b0 <OV7670_Init+0x3c>)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6013      	str	r3, [r2, #0]
	sp_hlptim=p_hlptim;
 8001394:	4a07      	ldr	r2, [pc, #28]	@ (80013b4 <OV7670_Init+0x40>)
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	6013      	str	r3, [r2, #0]
}
 800139a:	bf00      	nop
 800139c:	3714      	adds	r7, #20
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000224 	.word	0x20000224
 80013ac:	20000228 	.word	0x20000228
 80013b0:	2000022c 	.word	0x2000022c
 80013b4:	20000230 	.word	0x20000230

080013b8 <OV7670_Power>:

void OV7670_Power(uint8_t en)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	if(en)
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d006      	beq.n	80013d6 <OV7670_Power+0x1e>
		HAL_GPIO_WritePin(OV7670_PWDN_PORT, OV7670_PWDN_PIN, GPIO_PIN_RESET);
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013ce:	4808      	ldr	r0, [pc, #32]	@ (80013f0 <OV7670_Power+0x38>)
 80013d0:	f004 fb34 	bl	8005a3c <HAL_GPIO_WritePin>
 80013d4:	e005      	b.n	80013e2 <OV7670_Power+0x2a>
	else
		HAL_GPIO_WritePin(OV7670_PWDN_PORT, OV7670_PWDN_PIN, GPIO_PIN_SET);
 80013d6:	2201      	movs	r2, #1
 80013d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80013dc:	4804      	ldr	r0, [pc, #16]	@ (80013f0 <OV7670_Power+0x38>)
 80013de:	f004 fb2d 	bl	8005a3c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 80013e2:	2032      	movs	r0, #50	@ 0x32
 80013e4:	f001 ffde 	bl	80033a4 <HAL_Delay>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <OV7670_ResetHW>:

void OV7670_ResetHW(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(OV7670_RST_PORT, OV7670_RST_PIN, GPIO_PIN_RESET);
 80013f8:	2200      	movs	r2, #0
 80013fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80013fe:	4808      	ldr	r0, [pc, #32]	@ (8001420 <OV7670_ResetHW+0x2c>)
 8001400:	f004 fb1c 	bl	8005a3c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001404:	2032      	movs	r0, #50	@ 0x32
 8001406:	f001 ffcd 	bl	80033a4 <HAL_Delay>
	HAL_GPIO_WritePin(OV7670_RST_PORT, OV7670_RST_PIN, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001410:	4803      	ldr	r0, [pc, #12]	@ (8001420 <OV7670_ResetHW+0x2c>)
 8001412:	f004 fb13 	bl	8005a3c <HAL_GPIO_WritePin>
	HAL_Delay(50);
 8001416:	2032      	movs	r0, #50	@ 0x32
 8001418:	f001 ffc4 	bl	80033a4 <HAL_Delay>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40020c00 	.word	0x40020c00

08001424 <OV7670_XCLK>:

void OV7670_XCLK(uint8_t en)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	if(en)
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d007      	beq.n	8001444 <OV7670_XCLK+0x20>
		HAL_LPTIM_PWM_Start(sp_hlptim, 6,3);//6 3 8mhz
 8001434:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <OV7670_XCLK+0x34>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2203      	movs	r2, #3
 800143a:	2106      	movs	r1, #6
 800143c:	4618      	mov	r0, r3
 800143e:	f005 f98b 	bl	8006758 <HAL_LPTIM_PWM_Start>
	else
		HAL_LPTIM_PWM_Stop(sp_hlptim);
}
 8001442:	e004      	b.n	800144e <OV7670_XCLK+0x2a>
		HAL_LPTIM_PWM_Stop(sp_hlptim);
 8001444:	4b04      	ldr	r3, [pc, #16]	@ (8001458 <OV7670_XCLK+0x34>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f005 f9d2 	bl	80067f2 <HAL_LPTIM_PWM_Stop>
}
 800144e:	bf00      	nop
 8001450:	3708      	adds	r7, #8
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000230 	.word	0x20000230

0800145c <OV7670_WriteSCCB>:

void OV7670_WriteSCCB(uint8_t regAddr, uint8_t val)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af02      	add	r7, sp, #8
 8001462:	4603      	mov	r3, r0
 8001464:	460a      	mov	r2, r1
 8001466:	71fb      	strb	r3, [r7, #7]
 8001468:	4613      	mov	r3, r2
 800146a:	71bb      	strb	r3, [r7, #6]
	uint8_t	txbuf[2]={regAddr, val};
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	733b      	strb	r3, [r7, #12]
 8001470:	79bb      	ldrb	r3, [r7, #6]
 8001472:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, (uint8_t *)txbuf, 2, OV7670_TIMEOUT);
 8001474:	4b07      	ldr	r3, [pc, #28]	@ (8001494 <OV7670_WriteSCCB+0x38>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	f107 020c 	add.w	r2, r7, #12
 800147c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	2302      	movs	r3, #2
 8001484:	2142      	movs	r1, #66	@ 0x42
 8001486:	f004 fb8f 	bl	8005ba8 <HAL_I2C_Master_Transmit>
}
 800148a:	bf00      	nop
 800148c:	3710      	adds	r7, #16
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	2000022c 	.word	0x2000022c

08001498 <OV7670_ReadSCCB>:

void OV7670_ReadSCCB(uint8_t regAddr, uint8_t *data)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af02      	add	r7, sp, #8
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(sp_hi2c, OV7670_ADDR, &regAddr, 1, OV7670_TIMEOUT);
 80014a4:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <OV7670_ReadSCCB+0x3c>)
 80014a6:	6818      	ldr	r0, [r3, #0]
 80014a8:	1dfa      	adds	r2, r7, #7
 80014aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2301      	movs	r3, #1
 80014b2:	2142      	movs	r1, #66	@ 0x42
 80014b4:	f004 fb78 	bl	8005ba8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(sp_hi2c, OV7670_ADDR, data, 1, OV7670_TIMEOUT);
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <OV7670_ReadSCCB+0x3c>)
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2301      	movs	r3, #1
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	2142      	movs	r1, #66	@ 0x42
 80014c8:	f004 fc86 	bl	8005dd8 <HAL_I2C_Master_Receive>
}
 80014cc:	bf00      	nop
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	2000022c 	.word	0x2000022c

080014d8 <OV7670_Start>:

void OV7670_Start(Capture_mode mode, uint32_t *capture_address)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
	capture_mode=mode;
 80014e4:	4a19      	ldr	r2, [pc, #100]	@ (800154c <OV7670_Start+0x74>)
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	7013      	strb	r3, [r2, #0]
	img_address=(uint32_t)capture_address;
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	4a18      	ldr	r2, [pc, #96]	@ (8001550 <OV7670_Start+0x78>)
 80014ee:	6013      	str	r3, [r2, #0]

	if(capture_mode == SNAPSHOT)
 80014f0:	4b16      	ldr	r3, [pc, #88]	@ (800154c <OV7670_Start+0x74>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d112      	bne.n	800151e <OV7670_Start+0x46>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_SNAPSHOT, img_address, img_width * img_height/2);
 80014f8:	4b16      	ldr	r3, [pc, #88]	@ (8001554 <OV7670_Start+0x7c>)
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	4b14      	ldr	r3, [pc, #80]	@ (8001550 <OV7670_Start+0x78>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <OV7670_Start+0x80>)
 8001502:	881b      	ldrh	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <OV7670_Start+0x84>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	fb01 f303 	mul.w	r3, r1, r3
 800150e:	2b00      	cmp	r3, #0
 8001510:	da00      	bge.n	8001514 <OV7670_Start+0x3c>
 8001512:	3301      	adds	r3, #1
 8001514:	105b      	asrs	r3, r3, #1
 8001516:	2102      	movs	r1, #2
 8001518:	f002 f8f4 	bl	8003704 <HAL_DCMI_Start_DMA>
	else
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
}
 800151c:	e011      	b.n	8001542 <OV7670_Start+0x6a>
		HAL_DCMI_Start_DMA(sp_hdcmi, DCMI_MODE_CONTINUOUS, img_address, img_width * img_height/2);
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <OV7670_Start+0x7c>)
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	4b0b      	ldr	r3, [pc, #44]	@ (8001550 <OV7670_Start+0x78>)
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <OV7670_Start+0x80>)
 8001528:	881b      	ldrh	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <OV7670_Start+0x84>)
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	fb01 f303 	mul.w	r3, r1, r3
 8001534:	2b00      	cmp	r3, #0
 8001536:	da00      	bge.n	800153a <OV7670_Start+0x62>
 8001538:	3301      	adds	r3, #1
 800153a:	105b      	asrs	r3, r3, #1
 800153c:	2100      	movs	r1, #0
 800153e:	f002 f8e1 	bl	8003704 <HAL_DCMI_Start_DMA>
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000234 	.word	0x20000234
 8001550:	20000238 	.word	0x20000238
 8001554:	20000224 	.word	0x20000224
 8001558:	20000004 	.word	0x20000004
 800155c:	20000006 	.word	0x20000006

08001560 <OV7670_Stop>:

void OV7670_Stop()
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	HAL_DCMI_Stop(sp_hdcmi);
 8001564:	4b03      	ldr	r3, [pc, #12]	@ (8001574 <OV7670_Stop+0x14>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f002 f98f 	bl	800388c <HAL_DCMI_Stop>
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20000224 	.word	0x20000224

08001578 <OV7670_ResetSW>:

void OV7670_ResetSW(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
	OV7670_WriteSCCB(REG_COM7, 0x80);
 800157c:	2180      	movs	r1, #128	@ 0x80
 800157e:	2012      	movs	r0, #18
 8001580:	f7ff ff6c 	bl	800145c <OV7670_WriteSCCB>
	HAL_Delay(30);
 8001584:	201e      	movs	r0, #30
 8001586:	f001 ff0d 	bl	80033a4 <HAL_Delay>
	OV7670_Config(defaults);
 800158a:	4804      	ldr	r0, [pc, #16]	@ (800159c <OV7670_ResetSW+0x24>)
 800158c:	f000 f808 	bl	80015a0 <OV7670_Config>
	HAL_Delay(10);
 8001590:	200a      	movs	r0, #10
 8001592:	f001 ff07 	bl	80033a4 <HAL_Delay>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	0800d24c 	.word	0x0800d24c

080015a0 <OV7670_Config>:

void OV7670_Config(const uint8_t params[][2])
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	for(int i = 0; params[i][0] != 0xFF; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	e012      	b.n	80015d4 <OV7670_Config+0x34>
	{
		OV7670_WriteSCCB(params[i][0], params[i][1]);
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	7818      	ldrb	r0, [r3, #0]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	785b      	ldrb	r3, [r3, #1]
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff ff4a 	bl	800145c <OV7670_WriteSCCB>
		HAL_Delay(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f001 feeb 	bl	80033a4 <HAL_Delay>
	for(int i = 0; params[i][0] != 0xFF; i++)
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	3301      	adds	r3, #1
 80015d2:	60fb      	str	r3, [r7, #12]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	4413      	add	r3, r2
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2bff      	cmp	r3, #255	@ 0xff
 80015e0:	d1e5      	bne.n	80015ae <OV7670_Config+0xe>
	}
}
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <OV7670_SetBrightness>:

void OV7670_SetBrightness(uint8_t brightness)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	if(brightness>=127)
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b7e      	cmp	r3, #126	@ 0x7e
 80015fa:	d903      	bls.n	8001604 <OV7670_SetBrightness+0x18>
		brightness=brightness-127;
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	3b7f      	subs	r3, #127	@ 0x7f
 8001600:	71fb      	strb	r3, [r7, #7]
 8001602:	e002      	b.n	800160a <OV7670_SetBrightness+0x1e>
	else
		brightness=255-brightness;
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	43db      	mvns	r3, r3
 8001608:	71fb      	strb	r3, [r7, #7]

	OV7670_WriteSCCB(REG_BRIGHT, brightness);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	4619      	mov	r1, r3
 800160e:	2055      	movs	r0, #85	@ 0x55
 8001610:	f7ff ff24 	bl	800145c <OV7670_WriteSCCB>
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <OV7670_SetContrast>:

void OV7670_SetContrast(uint8_t contrast)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	71fb      	strb	r3, [r7, #7]
	OV7670_WriteSCCB(REG_CONTRAS, contrast);
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4619      	mov	r1, r3
 800162a:	2056      	movs	r0, #86	@ 0x56
 800162c:	f7ff ff16 	bl	800145c <OV7670_WriteSCCB>
}
 8001630:	bf00      	nop
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <OV7670_SetSaturation>:

void OV7670_SetSaturation(uint8_t saturation)//0-100, default 80
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
	float temp=0.0f;
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
	uint8_t i;

	saturation+=20;
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	3314      	adds	r3, #20
 800164c:	71fb      	strb	r3, [r7, #7]

	for(i=0;i<6;i++)
 800164e:	2300      	movs	r3, #0
 8001650:	72fb      	strb	r3, [r7, #11]
 8001652:	e03b      	b.n	80016cc <OV7670_SetSaturation+0x94>
	{
		if(img_format==YUV422)temp=(float)mtx_yuv[i];
 8001654:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <OV7670_SetSaturation+0xac>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d109      	bne.n	8001670 <OV7670_SetSaturation+0x38>
 800165c:	7afb      	ldrb	r3, [r7, #11]
 800165e:	4a22      	ldr	r2, [pc, #136]	@ (80016e8 <OV7670_SetSaturation+0xb0>)
 8001660:	5cd3      	ldrb	r3, [r2, r3]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800166a:	edc7 7a03 	vstr	s15, [r7, #12]
 800166e:	e008      	b.n	8001682 <OV7670_SetSaturation+0x4a>
		else temp=(float)mtx_rgb[i];
 8001670:	7afb      	ldrb	r3, [r7, #11]
 8001672:	4a1e      	ldr	r2, [pc, #120]	@ (80016ec <OV7670_SetSaturation+0xb4>)
 8001674:	5cd3      	ldrb	r3, [r2, r3]
 8001676:	ee07 3a90 	vmov	s15, r3
 800167a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800167e:	edc7 7a03 	vstr	s15, [r7, #12]
		temp*=saturation;
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	ee07 3a90 	vmov	s15, r3
 8001688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800168c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001694:	edc7 7a03 	vstr	s15, [r7, #12]
		temp/=100;
 8001698:	ed97 7a03 	vldr	s14, [r7, #12]
 800169c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80016f0 <OV7670_SetSaturation+0xb8>
 80016a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a4:	edc7 7a03 	vstr	s15, [r7, #12]
		OV7670_WriteSCCB(REG_MTX1+i, (uint8_t)temp);
 80016a8:	7afb      	ldrb	r3, [r7, #11]
 80016aa:	334f      	adds	r3, #79	@ 0x4f
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80016b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016b6:	edc7 7a00 	vstr	s15, [r7]
 80016ba:	783a      	ldrb	r2, [r7, #0]
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fecb 	bl	800145c <OV7670_WriteSCCB>
	for(i=0;i<6;i++)
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	3301      	adds	r3, #1
 80016ca:	72fb      	strb	r3, [r7, #11]
 80016cc:	7afb      	ldrb	r3, [r7, #11]
 80016ce:	2b05      	cmp	r3, #5
 80016d0:	d9c0      	bls.n	8001654 <OV7670_SetSaturation+0x1c>
	}
	OV7670_WriteSCCB(REG_MTX_SIGN, 0x9E);
 80016d2:	219e      	movs	r1, #158	@ 0x9e
 80016d4:	2058      	movs	r0, #88	@ 0x58
 80016d6:	f7ff fec1 	bl	800145c <OV7670_WriteSCCB>
}
 80016da:	bf00      	nop
 80016dc:	3710      	adds	r7, #16
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	2000023c 	.word	0x2000023c
 80016e8:	20000008 	.word	0x20000008
 80016ec:	20000010 	.word	0x20000010
 80016f0:	42c80000 	.word	0x42c80000

080016f4 <OV7670_SetResolution>:

void OV7670_SetResolution(Camera_resolution resolution)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]

	switch(resolution)
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	2b06      	cmp	r3, #6
 8001702:	f200 808f 	bhi.w	8001824 <OV7670_SetResolution+0x130>
 8001706:	a201      	add	r2, pc, #4	@ (adr r2, 800170c <OV7670_SetResolution+0x18>)
 8001708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800170c:	08001729 	.word	0x08001729
 8001710:	0800174f 	.word	0x0800174f
 8001714:	08001773 	.word	0x08001773
 8001718:	08001795 	.word	0x08001795
 800171c:	080017b7 	.word	0x080017b7
 8001720:	080017dd 	.word	0x080017dd
 8001724:	08001801 	.word	0x08001801
	{
		case VGA:	//NOT TESTED
			OV7670_Config(RES_VGA);
 8001728:	4840      	ldr	r0, [pc, #256]	@ (800182c <OV7670_SetResolution+0x138>)
 800172a:	f7ff ff39 	bl	80015a0 <OV7670_Config>
			OV7670_SetFrameControl(158,14,10,490);
 800172e:	f44f 73f5 	mov.w	r3, #490	@ 0x1ea
 8001732:	220a      	movs	r2, #10
 8001734:	210e      	movs	r1, #14
 8001736:	209e      	movs	r0, #158	@ 0x9e
 8001738:	f000 fd2a 	bl	8002190 <OV7670_SetFrameControl>
			img_width=640;
 800173c:	4b3c      	ldr	r3, [pc, #240]	@ (8001830 <OV7670_SetResolution+0x13c>)
 800173e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8001742:	801a      	strh	r2, [r3, #0]
			img_height=480;
 8001744:	4b3b      	ldr	r3, [pc, #236]	@ (8001834 <OV7670_SetResolution+0x140>)
 8001746:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800174a:	801a      	strh	r2, [r3, #0]
			break;
 800174c:	e06a      	b.n	8001824 <OV7670_SetResolution+0x130>
		case QVGA:	//OK
			OV7670_Config(RES_QVGA);
 800174e:	483a      	ldr	r0, [pc, #232]	@ (8001838 <OV7670_SetResolution+0x144>)
 8001750:	f7ff ff26 	bl	80015a0 <OV7670_Config>
			OV7670_SetFrameControl(168,24,12,492);
 8001754:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 8001758:	220c      	movs	r2, #12
 800175a:	2118      	movs	r1, #24
 800175c:	20a8      	movs	r0, #168	@ 0xa8
 800175e:	f000 fd17 	bl	8002190 <OV7670_SetFrameControl>
			img_width=320;
 8001762:	4b33      	ldr	r3, [pc, #204]	@ (8001830 <OV7670_SetResolution+0x13c>)
 8001764:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001768:	801a      	strh	r2, [r3, #0]
			img_height=240;
 800176a:	4b32      	ldr	r3, [pc, #200]	@ (8001834 <OV7670_SetResolution+0x140>)
 800176c:	22f0      	movs	r2, #240	@ 0xf0
 800176e:	801a      	strh	r2, [r3, #0]
			break;
 8001770:	e058      	b.n	8001824 <OV7670_SetResolution+0x130>
		case QQVGA:	//OK
			OV7670_Config(RES_QQVGA);
 8001772:	4832      	ldr	r0, [pc, #200]	@ (800183c <OV7670_SetResolution+0x148>)
 8001774:	f7ff ff14 	bl	80015a0 <OV7670_Config>
			OV7670_SetFrameControl(174,30,12,492);
 8001778:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800177c:	220c      	movs	r2, #12
 800177e:	211e      	movs	r1, #30
 8001780:	20ae      	movs	r0, #174	@ 0xae
 8001782:	f000 fd05 	bl	8002190 <OV7670_SetFrameControl>
			img_width=160;
 8001786:	4b2a      	ldr	r3, [pc, #168]	@ (8001830 <OV7670_SetResolution+0x13c>)
 8001788:	22a0      	movs	r2, #160	@ 0xa0
 800178a:	801a      	strh	r2, [r3, #0]
			img_height=120;
 800178c:	4b29      	ldr	r3, [pc, #164]	@ (8001834 <OV7670_SetResolution+0x140>)
 800178e:	2278      	movs	r2, #120	@ 0x78
 8001790:	801a      	strh	r2, [r3, #0]
			break;
 8001792:	e047      	b.n	8001824 <OV7670_SetResolution+0x130>
		case QQQVGA:	//OK
			OV7670_Config(RES_QQQVGA);
 8001794:	482a      	ldr	r0, [pc, #168]	@ (8001840 <OV7670_SetResolution+0x14c>)
 8001796:	f7ff ff03 	bl	80015a0 <OV7670_Config>
			OV7670_SetFrameControl(196,52,12,492);//(196+640)%784=52
 800179a:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800179e:	220c      	movs	r2, #12
 80017a0:	2134      	movs	r1, #52	@ 0x34
 80017a2:	20c4      	movs	r0, #196	@ 0xc4
 80017a4:	f000 fcf4 	bl	8002190 <OV7670_SetFrameControl>
			img_width=80;
 80017a8:	4b21      	ldr	r3, [pc, #132]	@ (8001830 <OV7670_SetResolution+0x13c>)
 80017aa:	2250      	movs	r2, #80	@ 0x50
 80017ac:	801a      	strh	r2, [r3, #0]
			img_height=60;
 80017ae:	4b21      	ldr	r3, [pc, #132]	@ (8001834 <OV7670_SetResolution+0x140>)
 80017b0:	223c      	movs	r2, #60	@ 0x3c
 80017b2:	801a      	strh	r2, [r3, #0]
			break;
 80017b4:	e036      	b.n	8001824 <OV7670_SetResolution+0x130>
		case CIF:	//OK
			OV7670_Config(RES_CIF);
 80017b6:	4823      	ldr	r0, [pc, #140]	@ (8001844 <OV7670_SetResolution+0x150>)
 80017b8:	f7ff fef2 	bl	80015a0 <OV7670_Config>
			OV7670_SetFrameControl(174,94,12,489); //for vstop=492 image moves out
 80017bc:	f240 13e9 	movw	r3, #489	@ 0x1e9
 80017c0:	220c      	movs	r2, #12
 80017c2:	215e      	movs	r1, #94	@ 0x5e
 80017c4:	20ae      	movs	r0, #174	@ 0xae
 80017c6:	f000 fce3 	bl	8002190 <OV7670_SetFrameControl>
			img_width=352;
 80017ca:	4b19      	ldr	r3, [pc, #100]	@ (8001830 <OV7670_SetResolution+0x13c>)
 80017cc:	f44f 72b0 	mov.w	r2, #352	@ 0x160
 80017d0:	801a      	strh	r2, [r3, #0]
			img_height=288;
 80017d2:	4b18      	ldr	r3, [pc, #96]	@ (8001834 <OV7670_SetResolution+0x140>)
 80017d4:	f44f 7290 	mov.w	r2, #288	@ 0x120
 80017d8:	801a      	strh	r2, [r3, #0]
			break;
 80017da:	e023      	b.n	8001824 <OV7670_SetResolution+0x130>
		case QCIF:	//OK
			OV7670_Config(RES_QCIF);
 80017dc:	481a      	ldr	r0, [pc, #104]	@ (8001848 <OV7670_SetResolution+0x154>)
 80017de:	f7ff fedf 	bl	80015a0 <OV7670_Config>
			OV7670_SetFrameControl(454,22,12,492); //for hstart=454, htop=24 incorect last vertical line
 80017e2:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 80017e6:	220c      	movs	r2, #12
 80017e8:	2116      	movs	r1, #22
 80017ea:	f44f 70e3 	mov.w	r0, #454	@ 0x1c6
 80017ee:	f000 fccf 	bl	8002190 <OV7670_SetFrameControl>
			img_width=176;
 80017f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001830 <OV7670_SetResolution+0x13c>)
 80017f4:	22b0      	movs	r2, #176	@ 0xb0
 80017f6:	801a      	strh	r2, [r3, #0]
			img_height=144;
 80017f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001834 <OV7670_SetResolution+0x140>)
 80017fa:	2290      	movs	r2, #144	@ 0x90
 80017fc:	801a      	strh	r2, [r3, #0]
			break;
 80017fe:	e011      	b.n	8001824 <OV7670_SetResolution+0x130>
		case QQCIF: //OK
			OV7670_Config(RES_QQCIF);
 8001800:	4812      	ldr	r0, [pc, #72]	@ (800184c <OV7670_SetResolution+0x158>)
 8001802:	f7ff fecd 	bl	80015a0 <OV7670_Config>
			OV7670_SetFrameControl(474,42,12,492); //for hstart=454, htop=24 incorrect first line, incorrect colors
 8001806:	f44f 73f6 	mov.w	r3, #492	@ 0x1ec
 800180a:	220c      	movs	r2, #12
 800180c:	212a      	movs	r1, #42	@ 0x2a
 800180e:	f44f 70ed 	mov.w	r0, #474	@ 0x1da
 8001812:	f000 fcbd 	bl	8002190 <OV7670_SetFrameControl>
			img_width=88;
 8001816:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <OV7670_SetResolution+0x13c>)
 8001818:	2258      	movs	r2, #88	@ 0x58
 800181a:	801a      	strh	r2, [r3, #0]
			img_height=72;
 800181c:	4b05      	ldr	r3, [pc, #20]	@ (8001834 <OV7670_SetResolution+0x140>)
 800181e:	2248      	movs	r2, #72	@ 0x48
 8001820:	801a      	strh	r2, [r3, #0]
			break;
 8001822:	bf00      	nop
	}
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	0800d1dc 	.word	0x0800d1dc
 8001830:	20000004 	.word	0x20000004
 8001834:	20000006 	.word	0x20000006
 8001838:	0800d1ec 	.word	0x0800d1ec
 800183c:	0800d1fc 	.word	0x0800d1fc
 8001840:	0800d20c 	.word	0x0800d20c
 8001844:	0800d21c 	.word	0x0800d21c
 8001848:	0800d22c 	.word	0x0800d22c
 800184c:	0800d23c 	.word	0x0800d23c

08001850 <OV7670_SetColorFormat>:

void OV7670_SetColorFormat(Camera_format format)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
	uint8_t temp[2];

	OV7670_ReadSCCB(REG_COM7, &temp[0]);
 800185a:	f107 030c 	add.w	r3, r7, #12
 800185e:	4619      	mov	r1, r3
 8001860:	2012      	movs	r0, #18
 8001862:	f7ff fe19 	bl	8001498 <OV7670_ReadSCCB>
	temp[0]&=0b11111010;
 8001866:	7b3b      	ldrb	r3, [r7, #12]
 8001868:	f023 0305 	bic.w	r3, r3, #5
 800186c:	b2db      	uxtb	r3, r3
 800186e:	733b      	strb	r3, [r7, #12]
	OV7670_ReadSCCB(REG_COM15, &temp[1]);
 8001870:	f107 030c 	add.w	r3, r7, #12
 8001874:	3301      	adds	r3, #1
 8001876:	4619      	mov	r1, r3
 8001878:	2040      	movs	r0, #64	@ 0x40
 800187a:	f7ff fe0d 	bl	8001498 <OV7670_ReadSCCB>
	temp[1]&=0b00001111;
 800187e:	7b7b      	ldrb	r3, [r7, #13]
 8001880:	f003 030f 	and.w	r3, r3, #15
 8001884:	b2db      	uxtb	r3, r3
 8001886:	737b      	strb	r3, [r7, #13]
	HAL_Delay(10);
 8001888:	200a      	movs	r0, #10
 800188a:	f001 fd8b 	bl	80033a4 <HAL_Delay>
	switch(format)
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <OV7670_SetColorFormat+0x4a>
 8001894:	2b01      	cmp	r3, #1
 8001896:	d00e      	beq.n	80018b6 <OV7670_SetColorFormat+0x66>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x10);//RGB565
			//???
			img_format=RGB565;
			break;
	}
}
 8001898:	e021      	b.n	80018de <OV7670_SetColorFormat+0x8e>
			OV7670_WriteSCCB(REG_COM7, temp[0] | 0x00);
 800189a:	7b3b      	ldrb	r3, [r7, #12]
 800189c:	4619      	mov	r1, r3
 800189e:	2012      	movs	r0, #18
 80018a0:	f7ff fddc 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x00);
 80018a4:	7b7b      	ldrb	r3, [r7, #13]
 80018a6:	4619      	mov	r1, r3
 80018a8:	2040      	movs	r0, #64	@ 0x40
 80018aa:	f7ff fdd7 	bl	800145c <OV7670_WriteSCCB>
			img_format=YUV422;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <OV7670_SetColorFormat+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
			break;
 80018b4:	e013      	b.n	80018de <OV7670_SetColorFormat+0x8e>
			OV7670_WriteSCCB(REG_COM7, temp[0] | 0x04);//RGB
 80018b6:	7b3b      	ldrb	r3, [r7, #12]
 80018b8:	f043 0304 	orr.w	r3, r3, #4
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	4619      	mov	r1, r3
 80018c0:	2012      	movs	r0, #18
 80018c2:	f7ff fdcb 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_COM15, temp[1] | 0x10);//RGB565
 80018c6:	7b7b      	ldrb	r3, [r7, #13]
 80018c8:	f043 0310 	orr.w	r3, r3, #16
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	4619      	mov	r1, r3
 80018d0:	2040      	movs	r0, #64	@ 0x40
 80018d2:	f7ff fdc3 	bl	800145c <OV7670_WriteSCCB>
			img_format=RGB565;
 80018d6:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <OV7670_SetColorFormat+0x98>)
 80018d8:	2201      	movs	r2, #1
 80018da:	701a      	strb	r2, [r3, #0]
			break;
 80018dc:	bf00      	nop
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	2000023c 	.word	0x2000023c

080018ec <OV7670_AutoExposureMode>:

void OV7670_AutoExposureMode(Camera_state en)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 80018fa:	f107 030f 	add.w	r3, r7, #15
 80018fe:	4619      	mov	r1, r3
 8001900:	2013      	movs	r0, #19
 8001902:	f7ff fdc9 	bl	8001498 <OV7670_ReadSCCB>

	if(en)
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d008      	beq.n	800191e <OV7670_AutoExposureMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x01);	//enable AEC
 800190c:	7bfb      	ldrb	r3, [r7, #15]
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	4619      	mov	r1, r3
 8001916:	2013      	movs	r0, #19
 8001918:	f7ff fda0 	bl	800145c <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFE);	//disable AEC
}
 800191c:	e007      	b.n	800192e <OV7670_AutoExposureMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFE);	//disable AEC
 800191e:	7bfb      	ldrb	r3, [r7, #15]
 8001920:	f023 0301 	bic.w	r3, r3, #1
 8001924:	b2db      	uxtb	r3, r3
 8001926:	4619      	mov	r1, r3
 8001928:	2013      	movs	r0, #19
 800192a:	f7ff fd97 	bl	800145c <OV7670_WriteSCCB>
}
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <OV7670_SetAECAlgorithm>:

void OV7670_SetAECAlgorithm(Camera_algorithm algorithm)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_HAECC7, &temp);
 8001944:	f107 030f 	add.w	r3, r7, #15
 8001948:	4619      	mov	r1, r3
 800194a:	20aa      	movs	r0, #170	@ 0xaa
 800194c:	f7ff fda4 	bl	8001498 <OV7670_ReadSCCB>

	if(algorithm)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d008      	beq.n	8001968 <OV7670_SetAECAlgorithm+0x32>

		OV7670_WriteSCCB(REG_HAECC7, temp | 0x80);// Histogram-based
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800195c:	b2db      	uxtb	r3, r3
 800195e:	4619      	mov	r1, r3
 8001960:	20aa      	movs	r0, #170	@ 0xaa
 8001962:	f7ff fd7b 	bl	800145c <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_HAECC7, temp & 0x7F);// Average-based
}
 8001966:	e007      	b.n	8001978 <OV7670_SetAECAlgorithm+0x42>
		OV7670_WriteSCCB(REG_HAECC7, temp & 0x7F);// Average-based
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800196e:	b2db      	uxtb	r3, r3
 8001970:	4619      	mov	r1, r3
 8001972:	20aa      	movs	r0, #170	@ 0xaa
 8001974:	f7ff fd72 	bl	800145c <OV7670_WriteSCCB>
}
 8001978:	bf00      	nop
 800197a:	3710      	adds	r7, #16
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <OV7670_SetExposureTime>:

void OV7670_SetExposureTime(uint16_t time) //AEC must be off
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	80fb      	strh	r3, [r7, #6]
	OV7670_WriteSCCB(REG_AECHH, (time>>10) & 0x3F);
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	0a9b      	lsrs	r3, r3, #10
 800198e:	b29b      	uxth	r3, r3
 8001990:	b2db      	uxtb	r3, r3
 8001992:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001996:	b2db      	uxtb	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	2007      	movs	r0, #7
 800199c:	f7ff fd5e 	bl	800145c <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_AECH, (time>>2) & 0xFF);
 80019a0:	88fb      	ldrh	r3, [r7, #6]
 80019a2:	089b      	lsrs	r3, r3, #2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	4619      	mov	r1, r3
 80019aa:	2010      	movs	r0, #16
 80019ac:	f7ff fd56 	bl	800145c <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_COM1, (time) & 0x03);
 80019b0:	88fb      	ldrh	r3, [r7, #6]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 0303 	and.w	r3, r3, #3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	4619      	mov	r1, r3
 80019bc:	2004      	movs	r0, #4
 80019be:	f7ff fd4d 	bl	800145c <OV7670_WriteSCCB>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <OV7670_SetGainCeiling>:

void OV7670_SetGainCeiling(Camera_gain value)//value 0-6 [2x-128x]
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 80019d4:	2300      	movs	r3, #0
 80019d6:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM9, &temp);
 80019d8:	f107 030f 	add.w	r3, r7, #15
 80019dc:	4619      	mov	r1, r3
 80019de:	2014      	movs	r0, #20
 80019e0:	f7ff fd5a 	bl	8001498 <OV7670_ReadSCCB>
	temp&=0x8F;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
 80019e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	73fb      	strb	r3, [r7, #15]
	OV7670_WriteSCCB(REG_COM9, temp | (value<<4));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	011b      	lsls	r3, r3, #4
 80019f2:	b25a      	sxtb	r2, r3
 80019f4:	7bfb      	ldrb	r3, [r7, #15]
 80019f6:	b25b      	sxtb	r3, r3
 80019f8:	4313      	orrs	r3, r2
 80019fa:	b25b      	sxtb	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	4619      	mov	r1, r3
 8001a00:	2014      	movs	r0, #20
 8001a02:	f7ff fd2b 	bl	800145c <OV7670_WriteSCCB>
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <OV7670_AutoGainMode>:

void OV7670_AutoGainMode(Camera_state en)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	4603      	mov	r3, r0
 8001a16:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8001a1c:	f107 030f 	add.w	r3, r7, #15
 8001a20:	4619      	mov	r1, r3
 8001a22:	2013      	movs	r0, #19
 8001a24:	f7ff fd38 	bl	8001498 <OV7670_ReadSCCB>

	if(en)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d008      	beq.n	8001a40 <OV7670_AutoGainMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x04); //enable AGC
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	4619      	mov	r1, r3
 8001a38:	2013      	movs	r0, #19
 8001a3a:	f7ff fd0f 	bl	800145c <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFB); //disable AGC
}
 8001a3e:	e007      	b.n	8001a50 <OV7670_AutoGainMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFB); //disable AGC
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	f023 0304 	bic.w	r3, r3, #4
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	4619      	mov	r1, r3
 8001a4a:	2013      	movs	r0, #19
 8001a4c:	f7ff fd06 	bl	800145c <OV7670_WriteSCCB>
}
 8001a50:	bf00      	nop
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <OV7670_SetGain>:

void OV7670_SetGain(uint8_t gain)//value 0-7 [1x-128x], AGC must be off
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_VREF, &temp);
 8001a66:	f107 030f 	add.w	r3, r7, #15
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	2003      	movs	r0, #3
 8001a6e:	f7ff fd13 	bl	8001498 <OV7670_ReadSCCB>
	temp&=0x3F;
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	73fb      	strb	r3, [r7, #15]

	//According to OV7670/7171 implementation guide v1.0 - Table 4-1
	switch(gain)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b07      	cmp	r3, #7
 8001a80:	d86b      	bhi.n	8001b5a <OV7670_SetGain+0x102>
 8001a82:	a201      	add	r2, pc, #4	@ (adr r2, 8001a88 <OV7670_SetGain+0x30>)
 8001a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a88:	08001aa9 	.word	0x08001aa9
 8001a8c:	08001abd 	.word	0x08001abd
 8001a90:	08001ad1 	.word	0x08001ad1
 8001a94:	08001ae5 	.word	0x08001ae5
 8001a98:	08001af9 	.word	0x08001af9
 8001a9c:	08001b0d 	.word	0x08001b0d
 8001aa0:	08001b27 	.word	0x08001b27
 8001aa4:	08001b41 	.word	0x08001b41
	{
		case 0: //1x
			OV7670_WriteSCCB(REG_GAIN, 0x00);
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2000      	movs	r0, #0
 8001aac:	f7ff fcd6 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	2003      	movs	r0, #3
 8001ab6:	f7ff fcd1 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001aba:	e04e      	b.n	8001b5a <OV7670_SetGain+0x102>
		case 1: //2x
			OV7670_WriteSCCB(REG_GAIN, 0x10);
 8001abc:	2110      	movs	r1, #16
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fccc 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8001ac4:	7bfb      	ldrb	r3, [r7, #15]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	2003      	movs	r0, #3
 8001aca:	f7ff fcc7 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001ace:	e044      	b.n	8001b5a <OV7670_SetGain+0x102>
		case 2: //4x
			OV7670_WriteSCCB(REG_GAIN, 0x30);
 8001ad0:	2130      	movs	r1, #48	@ 0x30
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f7ff fcc2 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	4619      	mov	r1, r3
 8001adc:	2003      	movs	r0, #3
 8001ade:	f7ff fcbd 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001ae2:	e03a      	b.n	8001b5a <OV7670_SetGain+0x102>
		case 3: //8x
			OV7670_WriteSCCB(REG_GAIN, 0x70);
 8001ae4:	2170      	movs	r1, #112	@ 0x70
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f7ff fcb8 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	4619      	mov	r1, r3
 8001af0:	2003      	movs	r0, #3
 8001af2:	f7ff fcb3 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001af6:	e030      	b.n	8001b5a <OV7670_SetGain+0x102>
		case 4: //16x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8001af8:	21f0      	movs	r1, #240	@ 0xf0
 8001afa:	2000      	movs	r0, #0
 8001afc:	f7ff fcae 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x00);
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
 8001b02:	4619      	mov	r1, r3
 8001b04:	2003      	movs	r0, #3
 8001b06:	f7ff fca9 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001b0a:	e026      	b.n	8001b5a <OV7670_SetGain+0x102>
		case 5: //32x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8001b0c:	21f0      	movs	r1, #240	@ 0xf0
 8001b0e:	2000      	movs	r0, #0
 8001b10:	f7ff fca4 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0x40);
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	2003      	movs	r0, #3
 8001b20:	f7ff fc9c 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001b24:	e019      	b.n	8001b5a <OV7670_SetGain+0x102>
		case 6: //64x
			OV7670_WriteSCCB(REG_GAIN, 0xF0);
 8001b26:	21f0      	movs	r1, #240	@ 0xf0
 8001b28:	2000      	movs	r0, #0
 8001b2a:	f7ff fc97 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0xC0);
 8001b2e:	7bfb      	ldrb	r3, [r7, #15]
 8001b30:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	4619      	mov	r1, r3
 8001b38:	2003      	movs	r0, #3
 8001b3a:	f7ff fc8f 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001b3e:	e00c      	b.n	8001b5a <OV7670_SetGain+0x102>
		case 7: //~128x
			OV7670_WriteSCCB(REG_GAIN, 0xFF);
 8001b40:	21ff      	movs	r1, #255	@ 0xff
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff fc8a 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_VREF,  temp | 0xC0);
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	4619      	mov	r1, r3
 8001b52:	2003      	movs	r0, #3
 8001b54:	f7ff fc82 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001b58:	bf00      	nop
	}
}
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop

08001b64 <OV7670_AutoWhiteBalanceMode>:

void OV7670_AutoWhiteBalanceMode(Camera_state en)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8001b72:	f107 030f 	add.w	r3, r7, #15
 8001b76:	4619      	mov	r1, r3
 8001b78:	2013      	movs	r0, #19
 8001b7a:	f7ff fc8d 	bl	8001498 <OV7670_ReadSCCB>

	if(en)
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d008      	beq.n	8001b96 <OV7670_AutoWhiteBalanceMode+0x32>
		OV7670_WriteSCCB(REG_COM8, temp | 0x02); //enable AWB
 8001b84:	7bfb      	ldrb	r3, [r7, #15]
 8001b86:	f043 0302 	orr.w	r3, r3, #2
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	2013      	movs	r0, #19
 8001b90:	f7ff fc64 	bl	800145c <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xFD); //disable AWB
}
 8001b94:	e007      	b.n	8001ba6 <OV7670_AutoWhiteBalanceMode+0x42>
		OV7670_WriteSCCB(REG_COM8, temp & 0xFD); //disable AWB
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
 8001b98:	f023 0302 	bic.w	r3, r3, #2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	2013      	movs	r0, #19
 8001ba2:	f7ff fc5b 	bl	800145c <OV7670_WriteSCCB>
}
 8001ba6:	bf00      	nop
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <OV7670_SetChannelsGain>:

void OV7670_SetChannelsGain(uint8_t r_ch, uint8_t g_ch, uint8_t b_ch) //AWB must be off
{
 8001bae:	b580      	push	{r7, lr}
 8001bb0:	b082      	sub	sp, #8
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71fb      	strb	r3, [r7, #7]
 8001bb8:	460b      	mov	r3, r1
 8001bba:	71bb      	strb	r3, [r7, #6]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	717b      	strb	r3, [r7, #5]
	OV7670_WriteSCCB(REG_RED, r_ch);
 8001bc0:	79fb      	ldrb	r3, [r7, #7]
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	2002      	movs	r0, #2
 8001bc6:	f7ff fc49 	bl	800145c <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_GGAIN, g_ch);
 8001bca:	79bb      	ldrb	r3, [r7, #6]
 8001bcc:	4619      	mov	r1, r3
 8001bce:	206a      	movs	r0, #106	@ 0x6a
 8001bd0:	f7ff fc44 	bl	800145c <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_BLUE, b_ch);
 8001bd4:	797b      	ldrb	r3, [r7, #5]
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	2001      	movs	r0, #1
 8001bda:	f7ff fc3f 	bl	800145c <OV7670_WriteSCCB>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <OV7670_ShowColorBar>:

void OV7670_ShowColorBar(Camera_state en)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM17, &temp);
 8001bf4:	f107 030f 	add.w	r3, r7, #15
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	2042      	movs	r0, #66	@ 0x42
 8001bfc:	f7ff fc4c 	bl	8001498 <OV7670_ReadSCCB>

	if(en)
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d008      	beq.n	8001c18 <OV7670_ShowColorBar+0x32>
		OV7670_WriteSCCB(REG_COM17, temp | 0x08);
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4619      	mov	r1, r3
 8001c10:	2042      	movs	r0, #66	@ 0x42
 8001c12:	f7ff fc23 	bl	800145c <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM17, temp & 0xF7);
}
 8001c16:	e007      	b.n	8001c28 <OV7670_ShowColorBar+0x42>
		OV7670_WriteSCCB(REG_COM17, temp & 0xF7);
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	f023 0308 	bic.w	r3, r3, #8
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	4619      	mov	r1, r3
 8001c22:	2042      	movs	r0, #66	@ 0x42
 8001c24:	f7ff fc1a 	bl	800145c <OV7670_WriteSCCB>
}
 8001c28:	bf00      	nop
 8001c2a:	3710      	adds	r7, #16
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <OV7670_FlipHorizontal>:

void OV7670_FlipHorizontal(Camera_state flipH)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b084      	sub	sp, #16
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_MVFP, &temp);
 8001c3e:	f107 030f 	add.w	r3, r7, #15
 8001c42:	4619      	mov	r1, r3
 8001c44:	201e      	movs	r0, #30
 8001c46:	f7ff fc27 	bl	8001498 <OV7670_ReadSCCB>

	if(flipH)
 8001c4a:	79fb      	ldrb	r3, [r7, #7]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d008      	beq.n	8001c62 <OV7670_FlipHorizontal+0x32>
		OV7670_WriteSCCB(REG_MVFP, temp | 0x20);
 8001c50:	7bfb      	ldrb	r3, [r7, #15]
 8001c52:	f043 0320 	orr.w	r3, r3, #32
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	4619      	mov	r1, r3
 8001c5a:	201e      	movs	r0, #30
 8001c5c:	f7ff fbfe 	bl	800145c <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_MVFP, temp & 0xDF);
}
 8001c60:	e007      	b.n	8001c72 <OV7670_FlipHorizontal+0x42>
		OV7670_WriteSCCB(REG_MVFP, temp & 0xDF);
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	f023 0320 	bic.w	r3, r3, #32
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	201e      	movs	r0, #30
 8001c6e:	f7ff fbf5 	bl	800145c <OV7670_WriteSCCB>
}
 8001c72:	bf00      	nop
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <OV7670_FlipVertical>:

void OV7670_FlipVertical(Camera_state flipV)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_MVFP, &temp);
 8001c88:	f107 030f 	add.w	r3, r7, #15
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	201e      	movs	r0, #30
 8001c90:	f7ff fc02 	bl	8001498 <OV7670_ReadSCCB>

	if(flipV)
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d008      	beq.n	8001cac <OV7670_FlipVertical+0x32>
		OV7670_WriteSCCB(REG_MVFP, temp | 0x10);
 8001c9a:	7bfb      	ldrb	r3, [r7, #15]
 8001c9c:	f043 0310 	orr.w	r3, r3, #16
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	201e      	movs	r0, #30
 8001ca6:	f7ff fbd9 	bl	800145c <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_MVFP, temp & 0xEF);
}
 8001caa:	e007      	b.n	8001cbc <OV7670_FlipVertical+0x42>
		OV7670_WriteSCCB(REG_MVFP, temp & 0xEF);
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	f023 0310 	bic.w	r3, r3, #16
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	201e      	movs	r0, #30
 8001cb8:	f7ff fbd0 	bl	800145c <OV7670_WriteSCCB>
}
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <OV7670_NightMode>:

void OV7670_NightMode(Camera_state en,	Camera_fps min_fps)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	4603      	mov	r3, r0
 8001ccc:	460a      	mov	r2, r1
 8001cce:	71fb      	strb	r3, [r7, #7]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	71bb      	strb	r3, [r7, #6]
	uint8_t temp=0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM11, &temp);
 8001cd8:	f107 030f 	add.w	r3, r7, #15
 8001cdc:	4619      	mov	r1, r3
 8001cde:	203b      	movs	r0, #59	@ 0x3b
 8001ce0:	f7ff fbda 	bl	8001498 <OV7670_ReadSCCB>

	if(en)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d011      	beq.n	8001d0e <OV7670_NightMode+0x4a>
	{
		temp|=(min_fps<<5);
 8001cea:	79bb      	ldrb	r3, [r7, #6]
 8001cec:	015b      	lsls	r3, r3, #5
 8001cee:	b25a      	sxtb	r2, r3
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	b25b      	sxtb	r3, r3
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	b25b      	sxtb	r3, r3
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	73fb      	strb	r3, [r7, #15]
		OV7670_WriteSCCB(REG_COM11, temp | 0x80);
 8001cfc:	7bfb      	ldrb	r3, [r7, #15]
 8001cfe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	4619      	mov	r1, r3
 8001d06:	203b      	movs	r0, #59	@ 0x3b
 8001d08:	f7ff fba8 	bl	800145c <OV7670_WriteSCCB>
	}
	else
		OV7670_WriteSCCB(REG_COM11, temp & 0x7F);
}
 8001d0c:	e007      	b.n	8001d1e <OV7670_NightMode+0x5a>
		OV7670_WriteSCCB(REG_COM11, temp & 0x7F);
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	4619      	mov	r1, r3
 8001d18:	203b      	movs	r0, #59	@ 0x3b
 8001d1a:	f7ff fb9f 	bl	800145c <OV7670_WriteSCCB>
}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <OV7670_AutoSharpness>:

void OV7670_AutoSharpness(Camera_state en)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001d30:	2300      	movs	r3, #0
 8001d32:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM16, &temp);
 8001d34:	f107 030f 	add.w	r3, r7, #15
 8001d38:	4619      	mov	r1, r3
 8001d3a:	2041      	movs	r0, #65	@ 0x41
 8001d3c:	f7ff fbac 	bl	8001498 <OV7670_ReadSCCB>

	if(en)
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <OV7670_AutoSharpness+0x32>
		OV7670_WriteSCCB(REG_COM16, temp | 0x20);// enable Auto Sharpness
 8001d46:	7bfb      	ldrb	r3, [r7, #15]
 8001d48:	f043 0320 	orr.w	r3, r3, #32
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	4619      	mov	r1, r3
 8001d50:	2041      	movs	r0, #65	@ 0x41
 8001d52:	f7ff fb83 	bl	800145c <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM16, temp & 0xDF);// disable Auto Sharpness
}
 8001d56:	e007      	b.n	8001d68 <OV7670_AutoSharpness+0x42>
		OV7670_WriteSCCB(REG_COM16, temp & 0xDF);// disable Auto Sharpness
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	f023 0320 	bic.w	r3, r3, #32
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	4619      	mov	r1, r3
 8001d62:	2041      	movs	r0, #65	@ 0x41
 8001d64:	f7ff fb7a 	bl	800145c <OV7670_WriteSCCB>
}
 8001d68:	bf00      	nop
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <OV7670_SetSharpness>:

void OV7670_SetSharpness(uint8_t sharpness)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_EDGE, &temp);
 8001d7e:	f107 030f 	add.w	r3, r7, #15
 8001d82:	4619      	mov	r1, r3
 8001d84:	203f      	movs	r0, #63	@ 0x3f
 8001d86:	f7ff fb87 	bl	8001498 <OV7670_ReadSCCB>
	temp&=0xE0;
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	f023 031f 	bic.w	r3, r3, #31
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	73fb      	strb	r3, [r7, #15]
	OV7670_WriteSCCB(REG_EDGE, temp | sharpness);
 8001d94:	7bfa      	ldrb	r2, [r7, #15]
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b2db      	uxtb	r3, r3
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	203f      	movs	r0, #63	@ 0x3f
 8001da0:	f7ff fb5c 	bl	800145c <OV7670_WriteSCCB>
}
 8001da4:	bf00      	nop
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <OV7670_AutoDeNoise>:

void OV7670_AutoDeNoise(Camera_state en)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM16, &temp);
 8001dba:	f107 030f 	add.w	r3, r7, #15
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	2041      	movs	r0, #65	@ 0x41
 8001dc2:	f7ff fb69 	bl	8001498 <OV7670_ReadSCCB>

	if(en)
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d008      	beq.n	8001dde <OV7670_AutoDeNoise+0x32>
		OV7670_WriteSCCB(REG_COM16, temp | 0x10);// enable Auto Sharpness
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
 8001dce:	f043 0310 	orr.w	r3, r3, #16
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	2041      	movs	r0, #65	@ 0x41
 8001dd8:	f7ff fb40 	bl	800145c <OV7670_WriteSCCB>
	else
		OV7670_WriteSCCB(REG_COM16, temp & 0xEF);// disable Auto Sharpness
}
 8001ddc:	e007      	b.n	8001dee <OV7670_AutoDeNoise+0x42>
		OV7670_WriteSCCB(REG_COM16, temp & 0xEF);// disable Auto Sharpness
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	f023 0310 	bic.w	r3, r3, #16
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4619      	mov	r1, r3
 8001de8:	2041      	movs	r0, #65	@ 0x41
 8001dea:	f7ff fb37 	bl	800145c <OV7670_WriteSCCB>
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}

08001df6 <OV7670_SetDeNoiseStrength>:

void OV7670_SetDeNoiseStrength(uint8_t strength)
{
 8001df6:	b580      	push	{r7, lr}
 8001df8:	b082      	sub	sp, #8
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	71fb      	strb	r3, [r7, #7]
	OV7670_WriteSCCB(REG_DNSTH, strength);
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4619      	mov	r1, r3
 8001e04:	204c      	movs	r0, #76	@ 0x4c
 8001e06:	f7ff fb29 	bl	800145c <OV7670_WriteSCCB>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <OV7670_BandingFilter>:

void OV7670_BandingFilter(Camera_state en, Camera_filter filter)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4603      	mov	r3, r0
 8001e1a:	460a      	mov	r2, r1
 8001e1c:	71fb      	strb	r3, [r7, #7]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	71bb      	strb	r3, [r7, #6]
	uint8_t temp=0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_COM8, &temp);
 8001e26:	f107 030f 	add.w	r3, r7, #15
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	2013      	movs	r0, #19
 8001e2e:	f7ff fb33 	bl	8001498 <OV7670_ReadSCCB>
	if(en)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d03f      	beq.n	8001eb8 <OV7670_BandingFilter+0xa6>
	{
		OV7670_WriteSCCB(REG_BD50ST, BF_50Hz_VALUE); //50Hz banding filter
 8001e38:	21cc      	movs	r1, #204	@ 0xcc
 8001e3a:	209d      	movs	r0, #157	@ 0x9d
 8001e3c:	f7ff fb0e 	bl	800145c <OV7670_WriteSCCB>
		OV7670_WriteSCCB(REG_BD60ST, BF_60Hz_VALUE); //60Hz banding filter
 8001e40:	21aa      	movs	r1, #170	@ 0xaa
 8001e42:	209e      	movs	r0, #158	@ 0x9e
 8001e44:	f7ff fb0a 	bl	800145c <OV7670_WriteSCCB>

		OV7670_WriteSCCB(REG_COM8, temp | 0x20); //banding filter enable
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	f043 0320 	orr.w	r3, r3, #32
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	4619      	mov	r1, r3
 8001e52:	2013      	movs	r0, #19
 8001e54:	f7ff fb02 	bl	800145c <OV7670_WriteSCCB>

		OV7670_ReadSCCB(REG_COM11, &temp);
 8001e58:	f107 030f 	add.w	r3, r7, #15
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	203b      	movs	r0, #59	@ 0x3b
 8001e60:	f7ff fb1a 	bl	8001498 <OV7670_ReadSCCB>
		temp&=0xE7;
 8001e64:	7bfb      	ldrb	r3, [r7, #15]
 8001e66:	f023 0318 	bic.w	r3, r3, #24
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	73fb      	strb	r3, [r7, #15]
		switch(filter)
 8001e6e:	79bb      	ldrb	r3, [r7, #6]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d018      	beq.n	8001ea6 <OV7670_BandingFilter+0x94>
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	dc28      	bgt.n	8001eca <OV7670_BandingFilter+0xb8>
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <OV7670_BandingFilter+0x70>
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d009      	beq.n	8001e94 <OV7670_BandingFilter+0x82>
				break;
		}
	}
	else
		OV7670_WriteSCCB(REG_COM8, temp & 0xDF);
}
 8001e80:	e023      	b.n	8001eca <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x0A);
 8001e82:	7bfb      	ldrb	r3, [r7, #15]
 8001e84:	f043 030a 	orr.w	r3, r3, #10
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	203b      	movs	r0, #59	@ 0x3b
 8001e8e:	f7ff fae5 	bl	800145c <OV7670_WriteSCCB>
				break;
 8001e92:	e01a      	b.n	8001eca <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x02);
 8001e94:	7bfb      	ldrb	r3, [r7, #15]
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	203b      	movs	r0, #59	@ 0x3b
 8001ea0:	f7ff fadc 	bl	800145c <OV7670_WriteSCCB>
				break;
 8001ea4:	e011      	b.n	8001eca <OV7670_BandingFilter+0xb8>
				OV7670_WriteSCCB(REG_COM11, temp | 0x12);
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	f043 0312 	orr.w	r3, r3, #18
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	4619      	mov	r1, r3
 8001eb0:	203b      	movs	r0, #59	@ 0x3b
 8001eb2:	f7ff fad3 	bl	800145c <OV7670_WriteSCCB>
				break;
 8001eb6:	e008      	b.n	8001eca <OV7670_BandingFilter+0xb8>
		OV7670_WriteSCCB(REG_COM8, temp & 0xDF);
 8001eb8:	7bfb      	ldrb	r3, [r7, #15]
 8001eba:	f023 0320 	bic.w	r3, r3, #32
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2013      	movs	r0, #19
 8001ec4:	f7ff faca 	bl	800145c <OV7670_WriteSCCB>
}
 8001ec8:	e7ff      	b.n	8001eca <OV7670_BandingFilter+0xb8>
 8001eca:	bf00      	nop
 8001ecc:	3710      	adds	r7, #16
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
	...

08001ed4 <OV7670_SpecialEffect>:

void OV7670_SpecialEffect(Camera_effect effect)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
	uint8_t temp=0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	73fb      	strb	r3, [r7, #15]

	OV7670_ReadSCCB(REG_TSLB, &temp);
 8001ee2:	f107 030f 	add.w	r3, r7, #15
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	203a      	movs	r0, #58	@ 0x3a
 8001eea:	f7ff fad5 	bl	8001498 <OV7670_ReadSCCB>
	temp&=0xCB;
 8001eee:	7bfb      	ldrb	r3, [r7, #15]
 8001ef0:	f023 0334 	bic.w	r3, r3, #52	@ 0x34
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	73fb      	strb	r3, [r7, #15]

	switch(effect)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	2b07      	cmp	r3, #7
 8001efc:	f200 808c 	bhi.w	8002018 <OV7670_SpecialEffect+0x144>
 8001f00:	a201      	add	r2, pc, #4	@ (adr r2, 8001f08 <OV7670_SpecialEffect+0x34>)
 8001f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f06:	bf00      	nop
 8001f08:	08001f29 	.word	0x08001f29
 8001f0c:	08001f3b 	.word	0x08001f3b
 8001f10:	08001f5d 	.word	0x08001f5d
 8001f14:	08001f7f 	.word	0x08001f7f
 8001f18:	08001f91 	.word	0x08001f91
 8001f1c:	08001fb3 	.word	0x08001fb3
 8001f20:	08001fd5 	.word	0x08001fd5
 8001f24:	08001ff7 	.word	0x08001ff7
	{
		case NORMAL:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x04);
 8001f28:	7bfb      	ldrb	r3, [r7, #15]
 8001f2a:	f043 0304 	orr.w	r3, r3, #4
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	4619      	mov	r1, r3
 8001f32:	203a      	movs	r0, #58	@ 0x3a
 8001f34:	f7ff fa92 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001f38:	e06e      	b.n	8002018 <OV7670_SpecialEffect+0x144>
		case ANTIQUE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	f043 0314 	orr.w	r3, r3, #20
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	4619      	mov	r1, r3
 8001f44:	203a      	movs	r0, #58	@ 0x3a
 8001f46:	f7ff fa89 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0xA0);
 8001f4a:	21a0      	movs	r1, #160	@ 0xa0
 8001f4c:	2067      	movs	r0, #103	@ 0x67
 8001f4e:	f7ff fa85 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x40);
 8001f52:	2140      	movs	r1, #64	@ 0x40
 8001f54:	2068      	movs	r0, #104	@ 0x68
 8001f56:	f7ff fa81 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001f5a:	e05d      	b.n	8002018 <OV7670_SpecialEffect+0x144>
		case BW:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	f043 0314 	orr.w	r3, r3, #20
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	4619      	mov	r1, r3
 8001f66:	203a      	movs	r0, #58	@ 0x3a
 8001f68:	f7ff fa78 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 8001f6c:	2180      	movs	r1, #128	@ 0x80
 8001f6e:	2067      	movs	r0, #103	@ 0x67
 8001f70:	f7ff fa74 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 8001f74:	2180      	movs	r1, #128	@ 0x80
 8001f76:	2068      	movs	r0, #104	@ 0x68
 8001f78:	f7ff fa70 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001f7c:	e04c      	b.n	8002018 <OV7670_SpecialEffect+0x144>
		case NEGATIVE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x24);
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	f043 0324 	orr.w	r3, r3, #36	@ 0x24
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	203a      	movs	r0, #58	@ 0x3a
 8001f8a:	f7ff fa67 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001f8e:	e043      	b.n	8002018 <OV7670_SpecialEffect+0x144>
		case BW_NEGATIVE:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x34);
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	f043 0334 	orr.w	r3, r3, #52	@ 0x34
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	4619      	mov	r1, r3
 8001f9a:	203a      	movs	r0, #58	@ 0x3a
 8001f9c:	f7ff fa5e 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 8001fa0:	2180      	movs	r1, #128	@ 0x80
 8001fa2:	2067      	movs	r0, #103	@ 0x67
 8001fa4:	f7ff fa5a 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 8001fa8:	2180      	movs	r1, #128	@ 0x80
 8001faa:	2068      	movs	r0, #104	@ 0x68
 8001fac:	f7ff fa56 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001fb0:	e032      	b.n	8002018 <OV7670_SpecialEffect+0x144>
		case BLUISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001fb2:	7bfb      	ldrb	r3, [r7, #15]
 8001fb4:	f043 0314 	orr.w	r3, r3, #20
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4619      	mov	r1, r3
 8001fbc:	203a      	movs	r0, #58	@ 0x3a
 8001fbe:	f7ff fa4d 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x80);
 8001fc2:	2180      	movs	r1, #128	@ 0x80
 8001fc4:	2067      	movs	r0, #103	@ 0x67
 8001fc6:	f7ff fa49 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0xC0);
 8001fca:	21c0      	movs	r1, #192	@ 0xc0
 8001fcc:	2068      	movs	r0, #104	@ 0x68
 8001fce:	f7ff fa45 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001fd2:	e021      	b.n	8002018 <OV7670_SpecialEffect+0x144>
		case GREENISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001fd4:	7bfb      	ldrb	r3, [r7, #15]
 8001fd6:	f043 0314 	orr.w	r3, r3, #20
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	4619      	mov	r1, r3
 8001fde:	203a      	movs	r0, #58	@ 0x3a
 8001fe0:	f7ff fa3c 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0x40);
 8001fe4:	2140      	movs	r1, #64	@ 0x40
 8001fe6:	2067      	movs	r0, #103	@ 0x67
 8001fe8:	f7ff fa38 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x40);
 8001fec:	2140      	movs	r1, #64	@ 0x40
 8001fee:	2068      	movs	r0, #104	@ 0x68
 8001ff0:	f7ff fa34 	bl	800145c <OV7670_WriteSCCB>
			break;
 8001ff4:	e010      	b.n	8002018 <OV7670_SpecialEffect+0x144>
		case REDDISH:
			OV7670_WriteSCCB(REG_TSLB, temp | 0x14);
 8001ff6:	7bfb      	ldrb	r3, [r7, #15]
 8001ff8:	f043 0314 	orr.w	r3, r3, #20
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	4619      	mov	r1, r3
 8002000:	203a      	movs	r0, #58	@ 0x3a
 8002002:	f7ff fa2b 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANU, 0xC0);
 8002006:	21c0      	movs	r1, #192	@ 0xc0
 8002008:	2067      	movs	r0, #103	@ 0x67
 800200a:	f7ff fa27 	bl	800145c <OV7670_WriteSCCB>
			OV7670_WriteSCCB(REG_MANV, 0x80);
 800200e:	2180      	movs	r1, #128	@ 0x80
 8002010:	2068      	movs	r0, #104	@ 0x68
 8002012:	f7ff fa23 	bl	800145c <OV7670_WriteSCCB>
			break;
 8002016:	bf00      	nop
	}
}
 8002018:	bf00      	nop
 800201a:	3710      	adds	r7, #16
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <OV7670_SetFrameRate>:

void OV7670_SetFrameRate(uint8_t div, uint8_t mul)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	460a      	mov	r2, r1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	4613      	mov	r3, r2
 800202e:	71bb      	strb	r3, [r7, #6]
	OV7670_WriteSCCB(REG_CLKRC, 0x80 | div);
 8002030:	79fb      	ldrb	r3, [r7, #7]
 8002032:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002036:	b2db      	uxtb	r3, r3
 8002038:	4619      	mov	r1, r3
 800203a:	2011      	movs	r0, #17
 800203c:	f7ff fa0e 	bl	800145c <OV7670_WriteSCCB>
	HAL_Delay(1);
 8002040:	2001      	movs	r0, #1
 8002042:	f001 f9af 	bl	80033a4 <HAL_Delay>
	OV7670_WriteSCCB(REG_DBLV, 0x08 | mul);
 8002046:	79bb      	ldrb	r3, [r7, #6]
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	b2db      	uxtb	r3, r3
 800204e:	4619      	mov	r1, r3
 8002050:	206b      	movs	r0, #107	@ 0x6b
 8002052:	f7ff fa03 	bl	800145c <OV7670_WriteSCCB>
	HAL_Delay(1);
 8002056:	2001      	movs	r0, #1
 8002058:	f001 f9a4 	bl	80033a4 <HAL_Delay>
}
 800205c:	bf00      	nop
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <OV7670_PowerUp>:
	OV7670_XCLK(OFF);
	OV7670_Power(OFF);
}

void OV7670_PowerUp(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	OV7670_Power(ON);
 8002068:	2001      	movs	r0, #1
 800206a:	f7ff f9a5 	bl	80013b8 <OV7670_Power>
	OV7670_XCLK(ON);
 800206e:	2001      	movs	r0, #1
 8002070:	f7ff f9d8 	bl	8001424 <OV7670_XCLK>
	OV7670_ResetHW();
 8002074:	f7ff f9be 	bl	80013f4 <OV7670_ResetHW>
	OV7670_ResetSW();
 8002078:	f7ff fa7e 	bl	8001578 <OV7670_ResetSW>
}
 800207c:	bf00      	nop
 800207e:	bd80      	pop	{r7, pc}

08002080 <OV7670_UpdateSettings>:

void OV7670_UpdateSettings(Camera_settings OV7670)
{
 8002080:	b084      	sub	sp, #16
 8002082:	b580      	push	{r7, lr}
 8002084:	af00      	add	r7, sp, #0
 8002086:	f107 0c08 	add.w	ip, r7, #8
 800208a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	OV7670_SetResolution(OV7670.resolution);
 800208e:	7a3b      	ldrb	r3, [r7, #8]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff fb2f 	bl	80016f4 <OV7670_SetResolution>

	if(OV7670.format) OV7670_SetColorFormat(RGB565);
 8002096:	7a7b      	ldrb	r3, [r7, #9]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <OV7670_UpdateSettings+0x24>
 800209c:	2001      	movs	r0, #1
 800209e:	f7ff fbd7 	bl	8001850 <OV7670_SetColorFormat>
 80020a2:	e002      	b.n	80020aa <OV7670_UpdateSettings+0x2a>
	else OV7670_SetColorFormat(YUV422);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7ff fbd3 	bl	8001850 <OV7670_SetColorFormat>

	OV7670_SpecialEffect(OV7670.effect);
 80020aa:	7abb      	ldrb	r3, [r7, #10]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7ff ff11 	bl	8001ed4 <OV7670_SpecialEffect>
	OV7670_AutoExposureMode(OV7670.AEC);
 80020b2:	7afb      	ldrb	r3, [r7, #11]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f7ff fc19 	bl	80018ec <OV7670_AutoExposureMode>
	if(!OV7670.AEC) OV7670_SetExposureTime(OV7670.exposure);
 80020ba:	7afb      	ldrb	r3, [r7, #11]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d103      	bne.n	80020c8 <OV7670_UpdateSettings+0x48>
 80020c0:	8b3b      	ldrh	r3, [r7, #24]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7ff fc5c 	bl	8001980 <OV7670_SetExposureTime>
	OV7670_SetAECAlgorithm(OV7670.algorithm);
 80020c8:	7d7b      	ldrb	r3, [r7, #21]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7ff fc33 	bl	8001936 <OV7670_SetAECAlgorithm>

	OV7670_AutoGainMode(OV7670.AGC);
 80020d0:	7b3b      	ldrb	r3, [r7, #12]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fc9b 	bl	8001a0e <OV7670_AutoGainMode>
	if(!OV7670.AGC) OV7670_SetGain(OV7670.gain);
 80020d8:	7b3b      	ldrb	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d103      	bne.n	80020e6 <OV7670_UpdateSettings+0x66>
 80020de:	7ebb      	ldrb	r3, [r7, #26]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7ff fcb9 	bl	8001a58 <OV7670_SetGain>

	OV7670_AutoWhiteBalanceMode(OV7670.AWB);
 80020e6:	7b7b      	ldrb	r3, [r7, #13]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fd3b 	bl	8001b64 <OV7670_AutoWhiteBalanceMode>
	if(!OV7670.AWB) OV7670_SetChannelsGain(OV7670.rch_gain, OV7670.gch_gain, OV7670.bch_gain);
 80020ee:	7b7b      	ldrb	r3, [r7, #13]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d108      	bne.n	8002106 <OV7670_UpdateSettings+0x86>
 80020f4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80020f8:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 80020fc:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fd54 	bl	8001bae <OV7670_SetChannelsGain>

	OV7670_SetBrightness(OV7670.brightness);
 8002106:	7efb      	ldrb	r3, [r7, #27]
 8002108:	4618      	mov	r0, r3
 800210a:	f7ff fa6f 	bl	80015ec <OV7670_SetBrightness>
	OV7670_SetContrast(OV7670.contrast);
 800210e:	7f3b      	ldrb	r3, [r7, #28]
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff fa83 	bl	800161c <OV7670_SetContrast>
	OV7670_SetSaturation(OV7670.saturation);
 8002116:	7f7b      	ldrb	r3, [r7, #29]
 8002118:	4618      	mov	r0, r3
 800211a:	f7ff fa8d 	bl	8001638 <OV7670_SetSaturation>

	OV7670_AutoSharpness(OV7670.ASC);
 800211e:	7cbb      	ldrb	r3, [r7, #18]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fe00 	bl	8001d26 <OV7670_AutoSharpness>
	if(!OV7670.ASC) OV7670_SetSharpness(OV7670.sharpness);
 8002126:	7cbb      	ldrb	r3, [r7, #18]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d103      	bne.n	8002134 <OV7670_UpdateSettings+0xb4>
 800212c:	7fbb      	ldrb	r3, [r7, #30]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fe1e 	bl	8001d70 <OV7670_SetSharpness>

	OV7670_SetGainCeiling(OV7670.gain_ceiling);
 8002134:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fc46 	bl	80019ca <OV7670_SetGainCeiling>

	OV7670_FlipHorizontal(OV7670.h_flip);
 800213e:	7c3b      	ldrb	r3, [r7, #16]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fd75 	bl	8001c30 <OV7670_FlipHorizontal>
	OV7670_FlipVertical(OV7670.v_flip);
 8002146:	7bfb      	ldrb	r3, [r7, #15]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fd96 	bl	8001c7a <OV7670_FlipVertical>
	OV7670_ShowColorBar(OV7670.cbar);
 800214e:	7bbb      	ldrb	r3, [r7, #14]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fd48 	bl	8001be6 <OV7670_ShowColorBar>
	OV7670_NightMode(OV7670.night_mode, OV7670.night_mode_fps);
 8002156:	7c7b      	ldrb	r3, [r7, #17]
 8002158:	7dba      	ldrb	r2, [r7, #22]
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fdb1 	bl	8001cc4 <OV7670_NightMode>

	OV7670_AutoDeNoise(OV7670.ADN);
 8002162:	7cfb      	ldrb	r3, [r7, #19]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fe21 	bl	8001dac <OV7670_AutoDeNoise>
	if(!OV7670.ADN)OV7670_SetDeNoiseStrength(OV7670.strength);
 800216a:	7cfb      	ldrb	r3, [r7, #19]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d103      	bne.n	8002178 <OV7670_UpdateSettings+0xf8>
 8002170:	7ffb      	ldrb	r3, [r7, #31]
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff fe3f 	bl	8001df6 <OV7670_SetDeNoiseStrength>

	OV7670_BandingFilter(OV7670.BDF, OV7670.bd_filter_value);
 8002178:	7d3b      	ldrb	r3, [r7, #20]
 800217a:	7dfa      	ldrb	r2, [r7, #23]
 800217c:	4611      	mov	r1, r2
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff fe47 	bl	8001e12 <OV7670_BandingFilter>
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800218c:	b004      	add	sp, #16
 800218e:	4770      	bx	lr

08002190 <OV7670_SetFrameControl>:

void OV7670_SetFrameControl(uint16_t hstart, uint16_t hstop, uint16_t vstart, uint16_t vstop)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4604      	mov	r4, r0
 8002198:	4608      	mov	r0, r1
 800219a:	4611      	mov	r1, r2
 800219c:	461a      	mov	r2, r3
 800219e:	4623      	mov	r3, r4
 80021a0:	80fb      	strh	r3, [r7, #6]
 80021a2:	4603      	mov	r3, r0
 80021a4:	80bb      	strh	r3, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	807b      	strh	r3, [r7, #2]
 80021aa:	4613      	mov	r3, r2
 80021ac:	803b      	strh	r3, [r7, #0]
	OV7670_WriteSCCB(REG_HSTART, (hstart >> 3) & 0xff);
 80021ae:	88fb      	ldrh	r3, [r7, #6]
 80021b0:	08db      	lsrs	r3, r3, #3
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	4619      	mov	r1, r3
 80021b8:	2017      	movs	r0, #23
 80021ba:	f7ff f94f 	bl	800145c <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_HSTOP, (hstop >> 3) & 0xff);
 80021be:	88bb      	ldrh	r3, [r7, #4]
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	4619      	mov	r1, r3
 80021c8:	2018      	movs	r0, #24
 80021ca:	f7ff f947 	bl	800145c <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_HREF, ((hstop & 0x7) << 3) | (hstart & 0x7));
 80021ce:	88bb      	ldrh	r3, [r7, #4]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021d8:	b25a      	sxtb	r2, r3
 80021da:	88fb      	ldrh	r3, [r7, #6]
 80021dc:	b25b      	sxtb	r3, r3
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	b25b      	sxtb	r3, r3
 80021e4:	4313      	orrs	r3, r2
 80021e6:	b25b      	sxtb	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	4619      	mov	r1, r3
 80021ec:	2032      	movs	r0, #50	@ 0x32
 80021ee:	f7ff f935 	bl	800145c <OV7670_WriteSCCB>

	OV7670_WriteSCCB(REG_VSTART, (vstart >> 2) & 0xff);
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	4619      	mov	r1, r3
 80021fc:	2019      	movs	r0, #25
 80021fe:	f7ff f92d 	bl	800145c <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_VSTOP, (vstop >> 2) & 0xff);
 8002202:	883b      	ldrh	r3, [r7, #0]
 8002204:	089b      	lsrs	r3, r3, #2
 8002206:	b29b      	uxth	r3, r3
 8002208:	b2db      	uxtb	r3, r3
 800220a:	4619      	mov	r1, r3
 800220c:	201a      	movs	r0, #26
 800220e:	f7ff f925 	bl	800145c <OV7670_WriteSCCB>
	OV7670_WriteSCCB(REG_VREF,((vstop & 0x3) << 2) | (vstart & 0x3));
 8002212:	883b      	ldrh	r3, [r7, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	b25b      	sxtb	r3, r3
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	b25a      	sxtb	r2, r3
 800221e:	887b      	ldrh	r3, [r7, #2]
 8002220:	b25b      	sxtb	r3, r3
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	b25b      	sxtb	r3, r3
 8002228:	4313      	orrs	r3, r2
 800222a:	b25b      	sxtb	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	4619      	mov	r1, r3
 8002230:	2003      	movs	r0, #3
 8002232:	f7ff f913 	bl	800145c <OV7670_WriteSCCB>
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bd90      	pop	{r4, r7, pc}
	...

08002240 <OV7670_getImageInfo>:
	*time_num=(int)(time);
	*time_fract=(int)((time-(*time_num))*10);
}

void OV7670_getImageInfo(uint16_t *width, uint16_t *height, uint8_t *format)
{
 8002240:	b480      	push	{r7}
 8002242:	b085      	sub	sp, #20
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
	*width=img_width;
 800224c:	4b08      	ldr	r3, [pc, #32]	@ (8002270 <OV7670_getImageInfo+0x30>)
 800224e:	881a      	ldrh	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	801a      	strh	r2, [r3, #0]
	*height=img_height;
 8002254:	4b07      	ldr	r3, [pc, #28]	@ (8002274 <OV7670_getImageInfo+0x34>)
 8002256:	881a      	ldrh	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	801a      	strh	r2, [r3, #0]
	*format=img_format;
 800225c:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <OV7670_getImageInfo+0x38>)
 800225e:	781a      	ldrb	r2, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	701a      	strb	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	3714      	adds	r7, #20
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	20000004 	.word	0x20000004
 8002274:	20000006 	.word	0x20000006
 8002278:	2000023c 	.word	0x2000023c

0800227c <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	OV7670_Stop();
 8002284:	f7ff f96c 	bl	8001560 <OV7670_Stop>

	frame_transfer_cplt_flag = 1;
 8002288:	4b10      	ldr	r3, [pc, #64]	@ (80022cc <HAL_DCMI_FrameEventCallback+0x50>)
 800228a:	2201      	movs	r2, #1
 800228c:	701a      	strb	r2, [r3, #0]

	if(capture_mode==CONTINUOUS)
 800228e:	4b10      	ldr	r3, [pc, #64]	@ (80022d0 <HAL_DCMI_FrameEventCallback+0x54>)
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d115      	bne.n	80022c2 <HAL_DCMI_FrameEventCallback+0x46>
		HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, img_address, img_width * img_height/2);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	3328      	adds	r3, #40	@ 0x28
 80022a0:	461c      	mov	r4, r3
 80022a2:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <HAL_DCMI_FrameEventCallback+0x58>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b0c      	ldr	r3, [pc, #48]	@ (80022d8 <HAL_DCMI_FrameEventCallback+0x5c>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	4619      	mov	r1, r3
 80022ac:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <HAL_DCMI_FrameEventCallback+0x60>)
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	da00      	bge.n	80022ba <HAL_DCMI_FrameEventCallback+0x3e>
 80022b8:	3301      	adds	r3, #1
 80022ba:	105b      	asrs	r3, r3, #1
 80022bc:	4621      	mov	r1, r4
 80022be:	f001 fd3f 	bl	8003d40 <HAL_DMA_Start_IT>

}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd90      	pop	{r4, r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000385 	.word	0x20000385
 80022d0:	20000234 	.word	0x20000234
 80022d4:	20000238 	.word	0x20000238
 80022d8:	20000004 	.word	0x20000004
 80022dc:	20000006 	.word	0x20000006

080022e0 <HAL_DCMI_VsyncEventCallback>:

void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
	vsync++;
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <HAL_DCMI_VsyncEventCallback+0x20>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	4a04      	ldr	r2, [pc, #16]	@ (8002300 <HAL_DCMI_VsyncEventCallback+0x20>)
 80022f0:	6013      	str	r3, [r2, #0]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	20000374 	.word	0x20000374

08002304 <HAL_DCMI_LineEventCallback>:

void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	hsync++;
 800230c:	4b05      	ldr	r3, [pc, #20]	@ (8002324 <HAL_DCMI_LineEventCallback+0x20>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	4a04      	ldr	r2, [pc, #16]	@ (8002324 <HAL_DCMI_LineEventCallback+0x20>)
 8002314:	6013      	str	r3, [r2, #0]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	20000378 	.word	0x20000378

08002328 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800232c:	4b16      	ldr	r3, [pc, #88]	@ (8002388 <MX_DCMI_Init+0x60>)
 800232e:	4a17      	ldr	r2, [pc, #92]	@ (800238c <MX_DCMI_Init+0x64>)
 8002330:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8002332:	4b15      	ldr	r3, [pc, #84]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002334:	2200      	movs	r2, #0
 8002336:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8002338:	4b13      	ldr	r3, [pc, #76]	@ (8002388 <MX_DCMI_Init+0x60>)
 800233a:	2220      	movs	r2, #32
 800233c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800233e:	4b12      	ldr	r3, [pc, #72]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002340:	2280      	movs	r2, #128	@ 0x80
 8002342:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8002344:	4b10      	ldr	r3, [pc, #64]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002346:	2200      	movs	r2, #0
 8002348:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800234a:	4b0f      	ldr	r3, [pc, #60]	@ (8002388 <MX_DCMI_Init+0x60>)
 800234c:	2200      	movs	r2, #0
 800234e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8002350:	4b0d      	ldr	r3, [pc, #52]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8002356:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002358:	2200      	movs	r2, #0
 800235a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800235c:	4b0a      	ldr	r3, [pc, #40]	@ (8002388 <MX_DCMI_Init+0x60>)
 800235e:	2200      	movs	r2, #0
 8002360:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8002362:	4b09      	ldr	r3, [pc, #36]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002364:	2200      	movs	r2, #0
 8002366:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8002368:	4b07      	ldr	r3, [pc, #28]	@ (8002388 <MX_DCMI_Init+0x60>)
 800236a:	2200      	movs	r2, #0
 800236c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002370:	2200      	movs	r2, #0
 8002372:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8002374:	4804      	ldr	r0, [pc, #16]	@ (8002388 <MX_DCMI_Init+0x60>)
 8002376:	f001 f94b 	bl	8003610 <HAL_DCMI_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8002380:	f000 fd3e 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8002384:	bf00      	nop
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000240 	.word	0x20000240
 800238c:	50050000 	.word	0x50050000

08002390 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b08c      	sub	sp, #48	@ 0x30
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002398:	f107 031c 	add.w	r3, r7, #28
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	609a      	str	r2, [r3, #8]
 80023a4:	60da      	str	r2, [r3, #12]
 80023a6:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a67      	ldr	r2, [pc, #412]	@ (800254c <HAL_DCMI_MspInit+0x1bc>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	f040 80c8 	bne.w	8002544 <HAL_DCMI_MspInit+0x1b4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80023b4:	4b66      	ldr	r3, [pc, #408]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 80023b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023b8:	4a65      	ldr	r2, [pc, #404]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 80023ba:	f043 0301 	orr.w	r3, r3, #1
 80023be:	6353      	str	r3, [r2, #52]	@ 0x34
 80023c0:	4b63      	ldr	r3, [pc, #396]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 80023c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c4:	f003 0301 	and.w	r3, r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
 80023ca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023cc:	4b60      	ldr	r3, [pc, #384]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	4a5f      	ldr	r2, [pc, #380]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d8:	4b5d      	ldr	r3, [pc, #372]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	617b      	str	r3, [r7, #20]
 80023e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e4:	4b5a      	ldr	r3, [pc, #360]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	4a59      	ldr	r2, [pc, #356]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f0:	4b57      	ldr	r3, [pc, #348]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 80023f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023fc:	4b54      	ldr	r3, [pc, #336]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 80023fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002400:	4a53      	ldr	r2, [pc, #332]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 8002402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002406:	6313      	str	r3, [r2, #48]	@ 0x30
 8002408:	4b51      	ldr	r3, [pc, #324]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 800240a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002414:	4b4e      	ldr	r3, [pc, #312]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 8002416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002418:	4a4d      	ldr	r2, [pc, #308]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 800241a:	f043 0302 	orr.w	r3, r3, #2
 800241e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002420:	4b4b      	ldr	r3, [pc, #300]	@ (8002550 <HAL_DCMI_MspInit+0x1c0>)
 8002422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	68bb      	ldr	r3, [r7, #8]
    PG9     ------> DCMI_VSYNC
    PB6     ------> DCMI_D5
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800242c:	2310      	movs	r3, #16
 800242e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002438:	2303      	movs	r3, #3
 800243a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800243c:	230d      	movs	r3, #13
 800243e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002440:	f107 031c 	add.w	r3, r7, #28
 8002444:	4619      	mov	r1, r3
 8002446:	4843      	ldr	r0, [pc, #268]	@ (8002554 <HAL_DCMI_MspInit+0x1c4>)
 8002448:	f003 f94c 	bl	80056e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800244c:	2340      	movs	r3, #64	@ 0x40
 800244e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002454:	2302      	movs	r3, #2
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800245c:	230d      	movs	r3, #13
 800245e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002460:	f107 031c 	add.w	r3, r7, #28
 8002464:	4619      	mov	r1, r3
 8002466:	483b      	ldr	r0, [pc, #236]	@ (8002554 <HAL_DCMI_MspInit+0x1c4>)
 8002468:	f003 f93c 	bl	80056e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800246c:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8002470:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002476:	2302      	movs	r3, #2
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247a:	2303      	movs	r3, #3
 800247c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800247e:	230d      	movs	r3, #13
 8002480:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	4833      	ldr	r0, [pc, #204]	@ (8002558 <HAL_DCMI_MspInit+0x1c8>)
 800248a:	f003 f92b 	bl	80056e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800248e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002494:	2302      	movs	r3, #2
 8002496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002498:	2302      	movs	r3, #2
 800249a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800249c:	2303      	movs	r3, #3
 800249e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80024a0:	230d      	movs	r3, #13
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024a4:	f107 031c 	add.w	r3, r7, #28
 80024a8:	4619      	mov	r1, r3
 80024aa:	482c      	ldr	r0, [pc, #176]	@ (800255c <HAL_DCMI_MspInit+0x1cc>)
 80024ac:	f003 f91a 	bl	80056e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 80024b0:	f44f 7350 	mov.w	r3, #832	@ 0x340
 80024b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024ba:	2302      	movs	r3, #2
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024be:	2303      	movs	r3, #3
 80024c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80024c2:	230d      	movs	r3, #13
 80024c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024c6:	f107 031c 	add.w	r3, r7, #28
 80024ca:	4619      	mov	r1, r3
 80024cc:	4824      	ldr	r0, [pc, #144]	@ (8002560 <HAL_DCMI_MspInit+0x1d0>)
 80024ce:	f003 f909 	bl	80056e4 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 80024d2:	4b24      	ldr	r3, [pc, #144]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 80024d4:	4a24      	ldr	r2, [pc, #144]	@ (8002568 <HAL_DCMI_MspInit+0x1d8>)
 80024d6:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 80024d8:	4b22      	ldr	r3, [pc, #136]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 80024da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024de:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024e0:	4b20      	ldr	r3, [pc, #128]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80024e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80024ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 80024ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024f2:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 80024f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80024fa:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 80024fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002502:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 8002504:	4b17      	ldr	r3, [pc, #92]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 8002506:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800250a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_LOW;
 800250c:	4b15      	ldr	r3, [pc, #84]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 800250e:	2200      	movs	r2, #0
 8002510:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002512:	4b14      	ldr	r3, [pc, #80]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 8002514:	2200      	movs	r2, #0
 8002516:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002518:	4812      	ldr	r0, [pc, #72]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 800251a:	f001 fb63 	bl	8003be4 <HAL_DMA_Init>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d001      	beq.n	8002528 <HAL_DCMI_MspInit+0x198>
    {
      Error_Handler();
 8002524:	f000 fc6c 	bl	8002e00 <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4a0e      	ldr	r2, [pc, #56]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 800252c:	649a      	str	r2, [r3, #72]	@ 0x48
 800252e:	4a0d      	ldr	r2, [pc, #52]	@ (8002564 <HAL_DCMI_MspInit+0x1d4>)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 1, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2101      	movs	r1, #1
 8002538:	204e      	movs	r0, #78	@ 0x4e
 800253a:	f001 f832 	bl	80035a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800253e:	204e      	movs	r0, #78	@ 0x4e
 8002540:	f001 f84b 	bl	80035da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 8002544:	bf00      	nop
 8002546:	3730      	adds	r7, #48	@ 0x30
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	50050000 	.word	0x50050000
 8002550:	40023800 	.word	0x40023800
 8002554:	40020000 	.word	0x40020000
 8002558:	40020800 	.word	0x40020800
 800255c:	40021800 	.word	0x40021800
 8002560:	40020400 	.word	0x40020400
 8002564:	20000290 	.word	0x20000290
 8002568:	40026428 	.word	0x40026428

0800256c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002572:	4b0c      	ldr	r3, [pc, #48]	@ (80025a4 <MX_DMA_Init+0x38>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a0b      	ldr	r2, [pc, #44]	@ (80025a4 <MX_DMA_Init+0x38>)
 8002578:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b09      	ldr	r3, [pc, #36]	@ (80025a4 <MX_DMA_Init+0x38>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	2039      	movs	r0, #57	@ 0x39
 8002590:	f001 f807 	bl	80035a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002594:	2039      	movs	r0, #57	@ 0x39
 8002596:	f001 f820 	bl	80035da <HAL_NVIC_EnableIRQ>

}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023800 	.word	0x40023800

080025a8 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA8   ------> RCC_MCO_1
*/
void MX_GPIO_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b08e      	sub	sp, #56	@ 0x38
 80025ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	605a      	str	r2, [r3, #4]
 80025b8:	609a      	str	r2, [r3, #8]
 80025ba:	60da      	str	r2, [r3, #12]
 80025bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80025be:	4b5f      	ldr	r3, [pc, #380]	@ (800273c <MX_GPIO_Init+0x194>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c2:	4a5e      	ldr	r2, [pc, #376]	@ (800273c <MX_GPIO_Init+0x194>)
 80025c4:	f043 0310 	orr.w	r3, r3, #16
 80025c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ca:	4b5c      	ldr	r3, [pc, #368]	@ (800273c <MX_GPIO_Init+0x194>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	623b      	str	r3, [r7, #32]
 80025d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025d6:	4b59      	ldr	r3, [pc, #356]	@ (800273c <MX_GPIO_Init+0x194>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025da:	4a58      	ldr	r2, [pc, #352]	@ (800273c <MX_GPIO_Init+0x194>)
 80025dc:	f043 0320 	orr.w	r3, r3, #32
 80025e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e2:	4b56      	ldr	r3, [pc, #344]	@ (800273c <MX_GPIO_Init+0x194>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	f003 0320 	and.w	r3, r3, #32
 80025ea:	61fb      	str	r3, [r7, #28]
 80025ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025ee:	4b53      	ldr	r3, [pc, #332]	@ (800273c <MX_GPIO_Init+0x194>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	4a52      	ldr	r2, [pc, #328]	@ (800273c <MX_GPIO_Init+0x194>)
 80025f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025fa:	4b50      	ldr	r3, [pc, #320]	@ (800273c <MX_GPIO_Init+0x194>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	4b4d      	ldr	r3, [pc, #308]	@ (800273c <MX_GPIO_Init+0x194>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	4a4c      	ldr	r2, [pc, #304]	@ (800273c <MX_GPIO_Init+0x194>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	@ 0x30
 8002612:	4b4a      	ldr	r3, [pc, #296]	@ (800273c <MX_GPIO_Init+0x194>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	617b      	str	r3, [r7, #20]
 800261c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800261e:	4b47      	ldr	r3, [pc, #284]	@ (800273c <MX_GPIO_Init+0x194>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002622:	4a46      	ldr	r2, [pc, #280]	@ (800273c <MX_GPIO_Init+0x194>)
 8002624:	f043 0302 	orr.w	r3, r3, #2
 8002628:	6313      	str	r3, [r2, #48]	@ 0x30
 800262a:	4b44      	ldr	r3, [pc, #272]	@ (800273c <MX_GPIO_Init+0x194>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	613b      	str	r3, [r7, #16]
 8002634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002636:	4b41      	ldr	r3, [pc, #260]	@ (800273c <MX_GPIO_Init+0x194>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a40      	ldr	r2, [pc, #256]	@ (800273c <MX_GPIO_Init+0x194>)
 800263c:	f043 0308 	orr.w	r3, r3, #8
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b3e      	ldr	r3, [pc, #248]	@ (800273c <MX_GPIO_Init+0x194>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800264e:	4b3b      	ldr	r3, [pc, #236]	@ (800273c <MX_GPIO_Init+0x194>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4a3a      	ldr	r2, [pc, #232]	@ (800273c <MX_GPIO_Init+0x194>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6313      	str	r3, [r2, #48]	@ 0x30
 800265a:	4b38      	ldr	r3, [pc, #224]	@ (800273c <MX_GPIO_Init+0x194>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	60bb      	str	r3, [r7, #8]
 8002664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002666:	4b35      	ldr	r3, [pc, #212]	@ (800273c <MX_GPIO_Init+0x194>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	4a34      	ldr	r2, [pc, #208]	@ (800273c <MX_GPIO_Init+0x194>)
 800266c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002670:	6313      	str	r3, [r2, #48]	@ 0x30
 8002672:	4b32      	ldr	r3, [pc, #200]	@ (800273c <MX_GPIO_Init+0x194>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267a:	607b      	str	r3, [r7, #4]
 800267c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800267e:	2200      	movs	r2, #0
 8002680:	2168      	movs	r1, #104	@ 0x68
 8002682:	482f      	ldr	r0, [pc, #188]	@ (8002740 <MX_GPIO_Init+0x198>)
 8002684:	f003 f9da 	bl	8005a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CAM_PWDN_Pin|CAM_RST_Pin|DC_Pin, GPIO_PIN_RESET);
 8002688:	2200      	movs	r2, #0
 800268a:	f641 0104 	movw	r1, #6148	@ 0x1804
 800268e:	482d      	ldr	r0, [pc, #180]	@ (8002744 <MX_GPIO_Init+0x19c>)
 8002690:	f003 f9d4 	bl	8005a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RST_Pin|CS_Pin, GPIO_PIN_RESET);
 8002694:	2200      	movs	r2, #0
 8002696:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800269a:	482b      	ldr	r0, [pc, #172]	@ (8002748 <MX_GPIO_Init+0x1a0>)
 800269c:	f003 f9ce 	bl	8005a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80026a0:	2314      	movs	r3, #20
 80026a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026a4:	2300      	movs	r3, #0
 80026a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026b0:	4619      	mov	r1, r3
 80026b2:	4823      	ldr	r0, [pc, #140]	@ (8002740 <MX_GPIO_Init+0x198>)
 80026b4:	f003 f816 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 80026b8:	2368      	movs	r3, #104	@ 0x68
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026bc:	2301      	movs	r3, #1
 80026be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c0:	2300      	movs	r3, #0
 80026c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026c4:	2303      	movs	r3, #3
 80026c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026cc:	4619      	mov	r1, r3
 80026ce:	481c      	ldr	r0, [pc, #112]	@ (8002740 <MX_GPIO_Init+0x198>)
 80026d0:	f003 f808 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CAM_PWDN_Pin|CAM_RST_Pin|DC_Pin;
 80026d4:	f641 0304 	movw	r3, #6148	@ 0x1804
 80026d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026da:	2301      	movs	r3, #1
 80026dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e2:	2303      	movs	r3, #3
 80026e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026ea:	4619      	mov	r1, r3
 80026ec:	4815      	ldr	r0, [pc, #84]	@ (8002744 <MX_GPIO_Init+0x19c>)
 80026ee:	f002 fff9 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80026f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f8:	2302      	movs	r3, #2
 80026fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026fc:	2300      	movs	r3, #0
 80026fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002700:	2300      	movs	r3, #0
 8002702:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002704:	2300      	movs	r3, #0
 8002706:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800270c:	4619      	mov	r1, r3
 800270e:	480f      	ldr	r0, [pc, #60]	@ (800274c <MX_GPIO_Init+0x1a4>)
 8002710:	f002 ffe8 	bl	80056e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = RST_Pin|CS_Pin;
 8002714:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800271a:	2301      	movs	r3, #1
 800271c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002722:	2303      	movs	r3, #3
 8002724:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800272a:	4619      	mov	r1, r3
 800272c:	4806      	ldr	r0, [pc, #24]	@ (8002748 <MX_GPIO_Init+0x1a0>)
 800272e:	f002 ffd9 	bl	80056e4 <HAL_GPIO_Init>

}
 8002732:	bf00      	nop
 8002734:	3738      	adds	r7, #56	@ 0x38
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800
 8002740:	40021000 	.word	0x40021000
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40020800 	.word	0x40020800
 800274c:	40020000 	.word	0x40020000

08002750 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002754:	4b1b      	ldr	r3, [pc, #108]	@ (80027c4 <MX_I2C2_Init+0x74>)
 8002756:	4a1c      	ldr	r2, [pc, #112]	@ (80027c8 <MX_I2C2_Init+0x78>)
 8002758:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00C0EAFF;
 800275a:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <MX_I2C2_Init+0x74>)
 800275c:	4a1b      	ldr	r2, [pc, #108]	@ (80027cc <MX_I2C2_Init+0x7c>)
 800275e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8002760:	4b18      	ldr	r3, [pc, #96]	@ (80027c4 <MX_I2C2_Init+0x74>)
 8002762:	2200      	movs	r2, #0
 8002764:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002766:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <MX_I2C2_Init+0x74>)
 8002768:	2201      	movs	r2, #1
 800276a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800276c:	4b15      	ldr	r3, [pc, #84]	@ (80027c4 <MX_I2C2_Init+0x74>)
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8002772:	4b14      	ldr	r3, [pc, #80]	@ (80027c4 <MX_I2C2_Init+0x74>)
 8002774:	2200      	movs	r2, #0
 8002776:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <MX_I2C2_Init+0x74>)
 800277a:	2200      	movs	r2, #0
 800277c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800277e:	4b11      	ldr	r3, [pc, #68]	@ (80027c4 <MX_I2C2_Init+0x74>)
 8002780:	2200      	movs	r2, #0
 8002782:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002784:	4b0f      	ldr	r3, [pc, #60]	@ (80027c4 <MX_I2C2_Init+0x74>)
 8002786:	2200      	movs	r2, #0
 8002788:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800278a:	480e      	ldr	r0, [pc, #56]	@ (80027c4 <MX_I2C2_Init+0x74>)
 800278c:	f003 f970 	bl	8005a70 <HAL_I2C_Init>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002796:	f000 fb33 	bl	8002e00 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800279a:	2100      	movs	r1, #0
 800279c:	4809      	ldr	r0, [pc, #36]	@ (80027c4 <MX_I2C2_Init+0x74>)
 800279e:	f003 feb7 	bl	8006510 <HAL_I2CEx_ConfigAnalogFilter>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80027a8:	f000 fb2a 	bl	8002e00 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80027ac:	2100      	movs	r1, #0
 80027ae:	4805      	ldr	r0, [pc, #20]	@ (80027c4 <MX_I2C2_Init+0x74>)
 80027b0:	f003 fef9 	bl	80065a6 <HAL_I2CEx_ConfigDigitalFilter>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80027ba:	f000 fb21 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80027be:	bf00      	nop
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	200002f0 	.word	0x200002f0
 80027c8:	40005800 	.word	0x40005800
 80027cc:	00c0eaff 	.word	0x00c0eaff

080027d0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b0ae      	sub	sp, #184	@ 0xb8
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	609a      	str	r2, [r3, #8]
 80027e4:	60da      	str	r2, [r3, #12]
 80027e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2290      	movs	r2, #144	@ 0x90
 80027ee:	2100      	movs	r1, #0
 80027f0:	4618      	mov	r0, r3
 80027f2:	f007 f8a2 	bl	800993a <memset>
  if(i2cHandle->Instance==I2C2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a22      	ldr	r2, [pc, #136]	@ (8002884 <HAL_I2C_MspInit+0xb4>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d13c      	bne.n	800287a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002800:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002804:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002806:	2300      	movs	r3, #0
 8002808:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4618      	mov	r0, r3
 8002810:	f004 fe64 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800281a:	f000 faf1 	bl	8002e00 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800281e:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_I2C_MspInit+0xb8>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002822:	4a19      	ldr	r2, [pc, #100]	@ (8002888 <HAL_I2C_MspInit+0xb8>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	6313      	str	r3, [r2, #48]	@ 0x30
 800282a:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <HAL_I2C_MspInit+0xb8>)
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002836:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800283a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800283e:	2312      	movs	r3, #18
 8002840:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002850:	2304      	movs	r3, #4
 8002852:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002856:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800285a:	4619      	mov	r1, r3
 800285c:	480b      	ldr	r0, [pc, #44]	@ (800288c <HAL_I2C_MspInit+0xbc>)
 800285e:	f002 ff41 	bl	80056e4 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <HAL_I2C_MspInit+0xb8>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002866:	4a08      	ldr	r2, [pc, #32]	@ (8002888 <HAL_I2C_MspInit+0xb8>)
 8002868:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800286c:	6413      	str	r3, [r2, #64]	@ 0x40
 800286e:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_I2C_MspInit+0xb8>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800287a:	bf00      	nop
 800287c:	37b8      	adds	r7, #184	@ 0xb8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40005800 	.word	0x40005800
 8002888:	40023800 	.word	0x40023800
 800288c:	40020400 	.word	0x40020400

08002890 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002894:	4b0f      	ldr	r3, [pc, #60]	@ (80028d4 <MX_LPTIM1_Init+0x44>)
 8002896:	4a10      	ldr	r2, [pc, #64]	@ (80028d8 <MX_LPTIM1_Init+0x48>)
 8002898:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800289a:	4b0e      	ldr	r3, [pc, #56]	@ (80028d4 <MX_LPTIM1_Init+0x44>)
 800289c:	2200      	movs	r2, #0
 800289e:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80028a0:	4b0c      	ldr	r3, [pc, #48]	@ (80028d4 <MX_LPTIM1_Init+0x44>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80028a6:	4b0b      	ldr	r3, [pc, #44]	@ (80028d4 <MX_LPTIM1_Init+0x44>)
 80028a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80028ac:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80028ae:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <MX_LPTIM1_Init+0x44>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80028b4:	4b07      	ldr	r3, [pc, #28]	@ (80028d4 <MX_LPTIM1_Init+0x44>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <MX_LPTIM1_Init+0x44>)
 80028bc:	2200      	movs	r2, #0
 80028be:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80028c0:	4804      	ldr	r0, [pc, #16]	@ (80028d4 <MX_LPTIM1_Init+0x44>)
 80028c2:	f003 febd 	bl	8006640 <HAL_LPTIM_Init>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <MX_LPTIM1_Init+0x40>
  {
    Error_Handler();
 80028cc:	f000 fa98 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80028d0:	bf00      	nop
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000344 	.word	0x20000344
 80028d8:	40002400 	.word	0x40002400

080028dc <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b0ae      	sub	sp, #184	@ 0xb8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028e4:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028f4:	f107 0314 	add.w	r3, r7, #20
 80028f8:	2290      	movs	r2, #144	@ 0x90
 80028fa:	2100      	movs	r1, #0
 80028fc:	4618      	mov	r0, r3
 80028fe:	f007 f81c 	bl	800993a <memset>
  if(lptimHandle->Instance==LPTIM1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a22      	ldr	r2, [pc, #136]	@ (8002990 <HAL_LPTIM_MspInit+0xb4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d13d      	bne.n	8002988 <HAL_LPTIM_MspInit+0xac>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800290c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002910:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4618      	mov	r0, r3
 800291e:	f004 fddd 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_LPTIM_MspInit+0x50>
    {
      Error_Handler();
 8002928:	f000 fa6a 	bl	8002e00 <Error_Handler>
    }

    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800292c:	4b19      	ldr	r3, [pc, #100]	@ (8002994 <HAL_LPTIM_MspInit+0xb8>)
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	4a18      	ldr	r2, [pc, #96]	@ (8002994 <HAL_LPTIM_MspInit+0xb8>)
 8002932:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002936:	6413      	str	r3, [r2, #64]	@ 0x40
 8002938:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <HAL_LPTIM_MspInit+0xb8>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002944:	4b13      	ldr	r3, [pc, #76]	@ (8002994 <HAL_LPTIM_MspInit+0xb8>)
 8002946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002948:	4a12      	ldr	r2, [pc, #72]	@ (8002994 <HAL_LPTIM_MspInit+0xb8>)
 800294a:	f043 0308 	orr.w	r3, r3, #8
 800294e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002950:	4b10      	ldr	r3, [pc, #64]	@ (8002994 <HAL_LPTIM_MspInit+0xb8>)
 8002952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
    /**LPTIM1 GPIO Configuration
    PD13     ------> LPTIM1_OUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800295c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002960:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002964:	2302      	movs	r3, #2
 8002966:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296a:	2300      	movs	r3, #0
 800296c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002970:	2300      	movs	r3, #0
 8002972:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF3_LPTIM1;
 8002976:	2303      	movs	r3, #3
 8002978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800297c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002980:	4619      	mov	r1, r3
 8002982:	4805      	ldr	r0, [pc, #20]	@ (8002998 <HAL_LPTIM_MspInit+0xbc>)
 8002984:	f002 feae 	bl	80056e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8002988:	bf00      	nop
 800298a:	37b8      	adds	r7, #184	@ 0xb8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	40002400 	.word	0x40002400
 8002994:	40023800 	.word	0x40023800
 8002998:	40020c00 	.word	0x40020c00

0800299c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80029a0:	f3bf 8f4f 	dsb	sy
}
 80029a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029a6:	f3bf 8f6f 	isb	sy
}
 80029aa:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80029ac:	4b0d      	ldr	r3, [pc, #52]	@ (80029e4 <SCB_EnableICache+0x48>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80029b4:	f3bf 8f4f 	dsb	sy
}
 80029b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029ba:	f3bf 8f6f 	isb	sy
}
 80029be:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <SCB_EnableICache+0x48>)
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	4a07      	ldr	r2, [pc, #28]	@ (80029e4 <SCB_EnableICache+0x48>)
 80029c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029ca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80029cc:	f3bf 8f4f 	dsb	sy
}
 80029d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029d2:	f3bf 8f6f 	isb	sy
}
 80029d6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80029d8:	bf00      	nop
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80029ee:	4b1f      	ldr	r3, [pc, #124]	@ (8002a6c <SCB_EnableDCache+0x84>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80029f6:	f3bf 8f4f 	dsb	sy
}
 80029fa:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a6c <SCB_EnableDCache+0x84>)
 80029fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a02:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	0b5b      	lsrs	r3, r3, #13
 8002a08:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002a0c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	08db      	lsrs	r3, r3, #3
 8002a12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a16:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8002a20:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002a26:	4911      	ldr	r1, [pc, #68]	@ (8002a6c <SCB_EnableDCache+0x84>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	1e5a      	subs	r2, r3, #1
 8002a32:	60ba      	str	r2, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d1ef      	bne.n	8002a18 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1e5a      	subs	r2, r3, #1
 8002a3c:	60fa      	str	r2, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1e5      	bne.n	8002a0e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8002a42:	f3bf 8f4f 	dsb	sy
}
 8002a46:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002a48:	4b08      	ldr	r3, [pc, #32]	@ (8002a6c <SCB_EnableDCache+0x84>)
 8002a4a:	695b      	ldr	r3, [r3, #20]
 8002a4c:	4a07      	ldr	r2, [pc, #28]	@ (8002a6c <SCB_EnableDCache+0x84>)
 8002a4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002a54:	f3bf 8f4f 	dsb	sy
}
 8002a58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002a5a:	f3bf 8f6f 	isb	sy
}
 8002a5e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	f5ad 3d16 	sub.w	sp, sp, #153600	@ 0x25800
 8002a76:	b0a3      	sub	sp, #140	@ 0x8c
 8002a78:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* Enable the CPU Cache */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8002a7a:	f7ff ff8f 	bl	800299c <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8002a7e:	f7ff ffb3 	bl	80029e8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a82:	f000 fc23 	bl	80032cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a86:	f000 f945 	bl	8002d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a8a:	f7ff fd8d 	bl	80025a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002a8e:	f7ff fd6d 	bl	800256c <MX_DMA_Init>
  MX_DCMI_Init();
 8002a92:	f7ff fc49 	bl	8002328 <MX_DCMI_Init>
  MX_LPTIM1_Init();
 8002a96:	f7ff fefb 	bl	8002890 <MX_LPTIM1_Init>
  MX_SPI5_Init();
 8002a9a:	f000 f9b7 	bl	8002e0c <MX_SPI5_Init>
  MX_TIM1_Init();
 8002a9e:	f000 fb77 	bl	8003190 <MX_TIM1_Init>
  MX_I2C2_Init();
 8002aa2:	f7ff fe55 	bl	8002750 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */


  OV7670_Power(DISABLE);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fe fc86 	bl	80013b8 <OV7670_Power>

  ILI9341_Init();
 8002aac:	f7fe f984 	bl	8000db8 <ILI9341_Init>

  //I2C2 is used for SCCB and LPTIM1 for XLCK generation
  OV7670_Init(&hdcmi, &hdma_dcmi, &hi2c2, &hlptim1);
 8002ab0:	4b82      	ldr	r3, [pc, #520]	@ (8002cbc <main+0x24c>)
 8002ab2:	4a83      	ldr	r2, [pc, #524]	@ (8002cc0 <main+0x250>)
 8002ab4:	4983      	ldr	r1, [pc, #524]	@ (8002cc4 <main+0x254>)
 8002ab6:	4884      	ldr	r0, [pc, #528]	@ (8002cc8 <main+0x258>)
 8002ab8:	f7fe fc5c 	bl	8001374 <OV7670_Init>

  OV7670_PowerUp();
 8002abc:	f7ff fad2 	bl	8002064 <OV7670_PowerUp>
  OV7670_UpdateSettings(OV7670_settings);
 8002ac0:	4b82      	ldr	r3, [pc, #520]	@ (8002ccc <main+0x25c>)
 8002ac2:	466c      	mov	r4, sp
 8002ac4:	f103 0210 	add.w	r2, r3, #16
 8002ac8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002aca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad0:	f7ff fad6 	bl	8002080 <OV7670_UpdateSettings>
  OV7670_SetFrameRate(XCLK_DIV(1), PLL_x4);
 8002ad4:	2140      	movs	r1, #64	@ 0x40
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7ff faa2 	bl	8002020 <OV7670_SetFrameRate>
  HAL_Delay(10);
 8002adc:	200a      	movs	r0, #10
 8002ade:	f000 fc61 	bl	80033a4 <HAL_Delay>

  OV7670_Start(SNAPSHOT, buffer_image);
 8002ae2:	497b      	ldr	r1, [pc, #492]	@ (8002cd0 <main+0x260>)
 8002ae4:	2001      	movs	r0, #1
 8002ae6:	f7fe fcf7 	bl	80014d8 <OV7670_Start>
  OV7670_getImageInfo(&width,&height,&format);
 8002aea:	4a7a      	ldr	r2, [pc, #488]	@ (8002cd4 <main+0x264>)
 8002aec:	497a      	ldr	r1, [pc, #488]	@ (8002cd8 <main+0x268>)
 8002aee:	487b      	ldr	r0, [pc, #492]	@ (8002cdc <main+0x26c>)
 8002af0:	f7ff fba6 	bl	8002240 <OV7670_getImageInfo>
  HAL_Delay(100);
 8002af4:	2064      	movs	r0, #100	@ 0x64
 8002af6:	f000 fc55 	bl	80033a4 <HAL_Delay>

  uint16_t image_data[240][320] = {0};
 8002afa:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8002afe:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 8002b02:	4618      	mov	r0, r3
 8002b04:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	f006 ff15 	bl	800993a <memset>

  uint32_t temp=0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	4a73      	ldr	r2, [pc, #460]	@ (8002ce0 <main+0x270>)
 8002b14:	443a      	add	r2, r7
 8002b16:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (frame_transfer_cplt_flag) {
 8002b18:	4b72      	ldr	r3, [pc, #456]	@ (8002ce4 <main+0x274>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 8099 	beq.w	8002c54 <main+0x1e4>
		  frame_count++;
 8002b22:	4b71      	ldr	r3, [pc, #452]	@ (8002ce8 <main+0x278>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	3301      	adds	r3, #1
 8002b28:	4a6f      	ldr	r2, [pc, #444]	@ (8002ce8 <main+0x278>)
 8002b2a:	6013      	str	r3, [r2, #0]
		  for (uint32_t row = 0; row < 240; row++) {
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	4a6f      	ldr	r2, [pc, #444]	@ (8002cec <main+0x27c>)
 8002b30:	443a      	add	r2, r7
 8002b32:	6013      	str	r3, [r2, #0]
 8002b34:	e07e      	b.n	8002c34 <main+0x1c4>
			  for (uint32_t col = 0; col < 160; col++) {
 8002b36:	2300      	movs	r3, #0
 8002b38:	4a6d      	ldr	r2, [pc, #436]	@ (8002cf0 <main+0x280>)
 8002b3a:	443a      	add	r2, r7
 8002b3c:	6013      	str	r3, [r2, #0]
 8002b3e:	e06d      	b.n	8002c1c <main+0x1ac>
				  uint32_t cur_pixel = buffer_image[row*160 + col];
 8002b40:	4b6a      	ldr	r3, [pc, #424]	@ (8002cec <main+0x27c>)
 8002b42:	443b      	add	r3, r7
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	015b      	lsls	r3, r3, #5
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b67      	ldr	r3, [pc, #412]	@ (8002cf0 <main+0x280>)
 8002b52:	443b      	add	r3, r7
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4413      	add	r3, r2
 8002b58:	4a5d      	ldr	r2, [pc, #372]	@ (8002cd0 <main+0x260>)
 8002b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b5e:	4a65      	ldr	r2, [pc, #404]	@ (8002cf4 <main+0x284>)
 8002b60:	443a      	add	r2, r7
 8002b62:	6013      	str	r3, [r2, #0]
				  image_data[row][col*2] = (cur_pixel >> 16) & 0xFFFF;
 8002b64:	4b63      	ldr	r3, [pc, #396]	@ (8002cf4 <main+0x284>)
 8002b66:	443b      	add	r3, r7
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	0c1a      	lsrs	r2, r3, #16
 8002b6c:	4b60      	ldr	r3, [pc, #384]	@ (8002cf0 <main+0x280>)
 8002b6e:	443b      	add	r3, r7
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	0058      	lsls	r0, r3, #1
 8002b74:	b294      	uxth	r4, r2
 8002b76:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8002b7a:	f5a3 6101 	sub.w	r1, r3, #2064	@ 0x810
 8002b7e:	4b5b      	ldr	r3, [pc, #364]	@ (8002cec <main+0x27c>)
 8002b80:	443b      	add	r3, r7
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	019b      	lsls	r3, r3, #6
 8002b8c:	4403      	add	r3, r0
 8002b8e:	4622      	mov	r2, r4
 8002b90:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				  image_data[row][col*2 + 1] = cur_pixel & 0xFFFF;
 8002b94:	4b56      	ldr	r3, [pc, #344]	@ (8002cf0 <main+0x280>)
 8002b96:	443b      	add	r3, r7
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	1c58      	adds	r0, r3, #1
 8002b9e:	4b55      	ldr	r3, [pc, #340]	@ (8002cf4 <main+0x284>)
 8002ba0:	443b      	add	r3, r7
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	b29c      	uxth	r4, r3
 8002ba6:	f607 0378 	addw	r3, r7, #2168	@ 0x878
 8002baa:	f5a3 6101 	sub.w	r1, r3, #2064	@ 0x810
 8002bae:	4b4f      	ldr	r3, [pc, #316]	@ (8002cec <main+0x27c>)
 8002bb0:	443b      	add	r3, r7
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	019b      	lsls	r3, r3, #6
 8002bbc:	4403      	add	r3, r0
 8002bbe:	4622      	mov	r2, r4
 8002bc0:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

				  ILI9341_Draw_Pixel(row, col*2, (cur_pixel >> 16) & 0xFFFF);
 8002bc4:	4b49      	ldr	r3, [pc, #292]	@ (8002cec <main+0x27c>)
 8002bc6:	443b      	add	r3, r7
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	b298      	uxth	r0, r3
 8002bcc:	4b48      	ldr	r3, [pc, #288]	@ (8002cf0 <main+0x280>)
 8002bce:	443b      	add	r3, r7
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	b299      	uxth	r1, r3
 8002bd8:	4b46      	ldr	r3, [pc, #280]	@ (8002cf4 <main+0x284>)
 8002bda:	443b      	add	r3, r7
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	0c1b      	lsrs	r3, r3, #16
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7fe fa94 	bl	8001110 <ILI9341_Draw_Pixel>
				  ILI9341_Draw_Pixel(row, col*2+1, cur_pixel & 0xFFFF);
 8002be8:	4b40      	ldr	r3, [pc, #256]	@ (8002cec <main+0x27c>)
 8002bea:	443b      	add	r3, r7
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	b298      	uxth	r0, r3
 8002bf0:	4b3f      	ldr	r3, [pc, #252]	@ (8002cf0 <main+0x280>)
 8002bf2:	443b      	add	r3, r7
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	4a3c      	ldr	r2, [pc, #240]	@ (8002cf4 <main+0x284>)
 8002c02:	443a      	add	r2, r7
 8002c04:	6812      	ldr	r2, [r2, #0]
 8002c06:	b292      	uxth	r2, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f7fe fa81 	bl	8001110 <ILI9341_Draw_Pixel>
			  for (uint32_t col = 0; col < 160; col++) {
 8002c0e:	4b38      	ldr	r3, [pc, #224]	@ (8002cf0 <main+0x280>)
 8002c10:	443b      	add	r3, r7
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	3301      	adds	r3, #1
 8002c16:	4a36      	ldr	r2, [pc, #216]	@ (8002cf0 <main+0x280>)
 8002c18:	443a      	add	r2, r7
 8002c1a:	6013      	str	r3, [r2, #0]
 8002c1c:	4b34      	ldr	r3, [pc, #208]	@ (8002cf0 <main+0x280>)
 8002c1e:	443b      	add	r3, r7
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b9f      	cmp	r3, #159	@ 0x9f
 8002c24:	d98c      	bls.n	8002b40 <main+0xd0>
		  for (uint32_t row = 0; row < 240; row++) {
 8002c26:	4b31      	ldr	r3, [pc, #196]	@ (8002cec <main+0x27c>)
 8002c28:	443b      	add	r3, r7
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8002cec <main+0x27c>)
 8002c30:	443a      	add	r2, r7
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	4b2d      	ldr	r3, [pc, #180]	@ (8002cec <main+0x27c>)
 8002c36:	443b      	add	r3, r7
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2bef      	cmp	r3, #239	@ 0xef
 8002c3c:	f67f af7b 	bls.w	8002b36 <main+0xc6>

			  }
		  }


		  frame_transfer_cplt_flag = 0;
 8002c40:	4b28      	ldr	r3, [pc, #160]	@ (8002ce4 <main+0x274>)
 8002c42:	2200      	movs	r2, #0
 8002c44:	701a      	strb	r2, [r3, #0]
//		  ILI9341_Draw_Image(image_data, SCREEN_VERTICAL_1);
		  HAL_Delay(100);
 8002c46:	2064      	movs	r0, #100	@ 0x64
 8002c48:	f000 fbac 	bl	80033a4 <HAL_Delay>
		  OV7670_Start(SNAPSHOT, buffer_image);
 8002c4c:	4920      	ldr	r1, [pc, #128]	@ (8002cd0 <main+0x260>)
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f7fe fc42 	bl	80014d8 <OV7670_Start>
	  }


	  char trigger_buffer[50];
	  char frame[50];
	  sprintf(trigger_buffer, "tigger: %u, %u", vsync, hsync);
 8002c54:	4b28      	ldr	r3, [pc, #160]	@ (8002cf8 <main+0x288>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <main+0x28c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4828      	ldr	r0, [pc, #160]	@ (8002d00 <main+0x290>)
 8002c5e:	4929      	ldr	r1, [pc, #164]	@ (8002d04 <main+0x294>)
 8002c60:	4401      	add	r1, r0
 8002c62:	19c8      	adds	r0, r1, r7
 8002c64:	4928      	ldr	r1, [pc, #160]	@ (8002d08 <main+0x298>)
 8002c66:	f006 fe05 	bl	8009874 <siprintf>
	  sprintf(frame, "frame: %u", frame_count);
 8002c6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002ce8 <main+0x278>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4b27      	ldr	r3, [pc, #156]	@ (8002d0c <main+0x29c>)
 8002c70:	f503 3316 	add.w	r3, r3, #153600	@ 0x25800
 8002c74:	f103 0378 	add.w	r3, r3, #120	@ 0x78
 8002c78:	443b      	add	r3, r7
 8002c7a:	4925      	ldr	r1, [pc, #148]	@ (8002d10 <main+0x2a0>)
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f006 fdf9 	bl	8009874 <siprintf>

	  ILI9341_Draw_Text(trigger_buffer, 10, 100, BLACK, 2, WHITE);
 8002c82:	481f      	ldr	r0, [pc, #124]	@ (8002d00 <main+0x290>)
 8002c84:	4b1f      	ldr	r3, [pc, #124]	@ (8002d04 <main+0x294>)
 8002c86:	4403      	add	r3, r0
 8002c88:	19d8      	adds	r0, r3, r7
 8002c8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002c8e:	9301      	str	r3, [sp, #4]
 8002c90:	2302      	movs	r3, #2
 8002c92:	9300      	str	r3, [sp, #0]
 8002c94:	2300      	movs	r3, #0
 8002c96:	2264      	movs	r2, #100	@ 0x64
 8002c98:	210a      	movs	r1, #10
 8002c9a:	f7fd ff2f 	bl	8000afc <ILI9341_Draw_Text>
	  ILI9341_Draw_Text(frame, 10, 150, BLACK, 2, WHITE);
 8002c9e:	481b      	ldr	r0, [pc, #108]	@ (8002d0c <main+0x29c>)
 8002ca0:	4b18      	ldr	r3, [pc, #96]	@ (8002d04 <main+0x294>)
 8002ca2:	4403      	add	r3, r0
 8002ca4:	19d8      	adds	r0, r3, r7
 8002ca6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	2302      	movs	r3, #2
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2296      	movs	r2, #150	@ 0x96
 8002cb4:	210a      	movs	r1, #10
 8002cb6:	f7fd ff21 	bl	8000afc <ILI9341_Draw_Text>
  {
 8002cba:	e72d      	b.n	8002b18 <main+0xa8>
 8002cbc:	20000344 	.word	0x20000344
 8002cc0:	200002f0 	.word	0x200002f0
 8002cc4:	20000290 	.word	0x20000290
 8002cc8:	20000240 	.word	0x20000240
 8002ccc:	20000018 	.word	0x20000018
 8002cd0:	20000388 	.word	0x20000388
 8002cd4:	20000384 	.word	0x20000384
 8002cd8:	20000382 	.word	0x20000382
 8002cdc:	20000380 	.word	0x20000380
 8002ce0:	0002586c 	.word	0x0002586c
 8002ce4:	20000385 	.word	0x20000385
 8002ce8:	2000037c 	.word	0x2000037c
 8002cec:	00025874 	.word	0x00025874
 8002cf0:	00025870 	.word	0x00025870
 8002cf4:	00025868 	.word	0x00025868
 8002cf8:	20000374 	.word	0x20000374
 8002cfc:	20000378 	.word	0x20000378
 8002d00:	fffda788 	.word	0xfffda788
 8002d04:	00025878 	.word	0x00025878
 8002d08:	0800cf80 	.word	0x0800cf80
 8002d0c:	fffda7bc 	.word	0xfffda7bc
 8002d10:	0800cf90 	.word	0x0800cf90

08002d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b094      	sub	sp, #80	@ 0x50
 8002d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d1a:	f107 031c 	add.w	r3, r7, #28
 8002d1e:	2234      	movs	r2, #52	@ 0x34
 8002d20:	2100      	movs	r1, #0
 8002d22:	4618      	mov	r0, r3
 8002d24:	f006 fe09 	bl	800993a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d28:	f107 0308 	add.w	r3, r7, #8
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d38:	4b2f      	ldr	r3, [pc, #188]	@ (8002df8 <SystemClock_Config+0xe4>)
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	4a2e      	ldr	r2, [pc, #184]	@ (8002df8 <SystemClock_Config+0xe4>)
 8002d3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d42:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d44:	4b2c      	ldr	r3, [pc, #176]	@ (8002df8 <SystemClock_Config+0xe4>)
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d4c:	607b      	str	r3, [r7, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d50:	4b2a      	ldr	r3, [pc, #168]	@ (8002dfc <SystemClock_Config+0xe8>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a29      	ldr	r2, [pc, #164]	@ (8002dfc <SystemClock_Config+0xe8>)
 8002d56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002d5a:	6013      	str	r3, [r2, #0]
 8002d5c:	4b27      	ldr	r3, [pc, #156]	@ (8002dfc <SystemClock_Config+0xe8>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002d70:	2310      	movs	r3, #16
 8002d72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d74:	2302      	movs	r3, #2
 8002d76:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d7c:	2308      	movs	r3, #8
 8002d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 8002d80:	23c8      	movs	r3, #200	@ 0xc8
 8002d82:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d84:	2302      	movs	r3, #2
 8002d86:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002d88:	2302      	movs	r3, #2
 8002d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fe9d 	bl	8006ad4 <HAL_RCC_OscConfig>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002da0:	f000 f82e 	bl	8002e00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002da4:	f003 fe46 	bl	8006a34 <HAL_PWREx_EnableOverDrive>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d001      	beq.n	8002db2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8002dae:	f000 f827 	bl	8002e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002db2:	230f      	movs	r3, #15
 8002db4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002db6:	2302      	movs	r3, #2
 8002db8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002dbe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002dc2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002dc8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8002dca:	f107 0308 	add.w	r3, r7, #8
 8002dce:	2106      	movs	r1, #6
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 f92d 	bl	8007030 <HAL_RCC_ClockConfig>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8002ddc:	f000 f810 	bl	8002e00 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_4);
 8002de0:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8002de4:	f44f 01c0 	mov.w	r1, #6291456	@ 0x600000
 8002de8:	2000      	movs	r0, #0
 8002dea:	f004 fa0d 	bl	8007208 <HAL_RCC_MCOConfig>
}
 8002dee:	bf00      	nop
 8002df0:	3750      	adds	r7, #80	@ 0x50
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40007000 	.word	0x40007000

08002e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002e04:	b672      	cpsid	i
}
 8002e06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <Error_Handler+0x8>

08002e0c <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e12:	4a1c      	ldr	r2, [pc, #112]	@ (8002e84 <MX_SPI5_Init+0x78>)
 8002e14:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8002e16:	4b1a      	ldr	r3, [pc, #104]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e1c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002e1e:	4b18      	ldr	r3, [pc, #96]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e24:	4b16      	ldr	r3, [pc, #88]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e26:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002e2a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e2c:	4b14      	ldr	r3, [pc, #80]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e32:	4b13      	ldr	r3, [pc, #76]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002e38:	4b11      	ldr	r3, [pc, #68]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e3e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e40:	4b0f      	ldr	r3, [pc, #60]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e46:	4b0e      	ldr	r3, [pc, #56]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e52:	4b0b      	ldr	r3, [pc, #44]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 7;
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e5a:	2207      	movs	r2, #7
 8002e5c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002e5e:	4b08      	ldr	r3, [pc, #32]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002e64:	4b06      	ldr	r3, [pc, #24]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002e6a:	4805      	ldr	r0, [pc, #20]	@ (8002e80 <MX_SPI5_Init+0x74>)
 8002e6c:	f004 ff5e 	bl	8007d2c <HAL_SPI_Init>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8002e76:	f7ff ffc3 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002e7a:	bf00      	nop
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	20031b88 	.word	0x20031b88
 8002e84:	40015000 	.word	0x40015000

08002e88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b08a      	sub	sp, #40	@ 0x28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e90:	f107 0314 	add.w	r3, r7, #20
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	605a      	str	r2, [r3, #4]
 8002e9a:	609a      	str	r2, [r3, #8]
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a17      	ldr	r2, [pc, #92]	@ (8002f04 <HAL_SPI_MspInit+0x7c>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d128      	bne.n	8002efc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002eaa:	4b17      	ldr	r3, [pc, #92]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	4a16      	ldr	r2, [pc, #88]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002eb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb6:	4b14      	ldr	r3, [pc, #80]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ec2:	4b11      	ldr	r3, [pc, #68]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	4a10      	ldr	r2, [pc, #64]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002ec8:	f043 0320 	orr.w	r3, r3, #32
 8002ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ece:	4b0e      	ldr	r3, [pc, #56]	@ (8002f08 <HAL_SPI_MspInit+0x80>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	f003 0320 	and.w	r3, r3, #32
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002eda:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002eec:	2305      	movs	r3, #5
 8002eee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ef0:	f107 0314 	add.w	r3, r7, #20
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4805      	ldr	r0, [pc, #20]	@ (8002f0c <HAL_SPI_MspInit+0x84>)
 8002ef8:	f002 fbf4 	bl	80056e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002efc:	bf00      	nop
 8002efe:	3728      	adds	r7, #40	@ 0x28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	40015000 	.word	0x40015000
 8002f08:	40023800 	.word	0x40023800
 8002f0c:	40021400 	.word	0x40021400

08002f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f16:	4b0f      	ldr	r3, [pc, #60]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	4a0e      	ldr	r2, [pc, #56]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f22:	4b0c      	ldr	r3, [pc, #48]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f2e:	4b09      	ldr	r3, [pc, #36]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f32:	4a08      	ldr	r2, [pc, #32]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002f3a:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_MspInit+0x44>)
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40023800 	.word	0x40023800

08002f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f5c:	bf00      	nop
 8002f5e:	e7fd      	b.n	8002f5c <NMI_Handler+0x4>

08002f60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f64:	bf00      	nop
 8002f66:	e7fd      	b.n	8002f64 <HardFault_Handler+0x4>

08002f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f6c:	bf00      	nop
 8002f6e:	e7fd      	b.n	8002f6c <MemManage_Handler+0x4>

08002f70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f74:	bf00      	nop
 8002f76:	e7fd      	b.n	8002f74 <BusFault_Handler+0x4>

08002f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f7c:	bf00      	nop
 8002f7e:	e7fd      	b.n	8002f7c <UsageFault_Handler+0x4>

08002f80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f80:	b480      	push	{r7}
 8002f82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr

08002faa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fae:	f000 f9d9 	bl	8003364 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
	...

08002fb8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002fbc:	4802      	ldr	r0, [pc, #8]	@ (8002fc8 <DMA2_Stream1_IRQHandler+0x10>)
 8002fbe:	f000 ffb1 	bl	8003f24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	20000290 	.word	0x20000290

08002fcc <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002fd0:	4802      	ldr	r0, [pc, #8]	@ (8002fdc <DCMI_IRQHandler+0x10>)
 8002fd2:	f000 fcbb 	bl	800394c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000240 	.word	0x20000240

08002fe0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return 1;
 8002fe4:	2301      	movs	r3, #1
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_kill>:

int _kill(int pid, int sig)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ffa:	f006 fcf1 	bl	80099e0 <__errno>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2216      	movs	r2, #22
 8003002:	601a      	str	r2, [r3, #0]
  return -1;
 8003004:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003008:	4618      	mov	r0, r3
 800300a:	3708      	adds	r7, #8
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <_exit>:

void _exit (int status)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003018:	f04f 31ff 	mov.w	r1, #4294967295
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f7ff ffe7 	bl	8002ff0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003022:	bf00      	nop
 8003024:	e7fd      	b.n	8003022 <_exit+0x12>

08003026 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e00a      	b.n	800304e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003038:	f3af 8000 	nop.w
 800303c:	4601      	mov	r1, r0
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	1c5a      	adds	r2, r3, #1
 8003042:	60ba      	str	r2, [r7, #8]
 8003044:	b2ca      	uxtb	r2, r1
 8003046:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	3301      	adds	r3, #1
 800304c:	617b      	str	r3, [r7, #20]
 800304e:	697a      	ldr	r2, [r7, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	dbf0      	blt.n	8003038 <_read+0x12>
  }

  return len;
 8003056:	687b      	ldr	r3, [r7, #4]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	e009      	b.n	8003086 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	60ba      	str	r2, [r7, #8]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697a      	ldr	r2, [r7, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	429a      	cmp	r2, r3
 800308c:	dbf1      	blt.n	8003072 <_write+0x12>
  }
  return len;
 800308e:	687b      	ldr	r3, [r7, #4]
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <_close>:

int _close(int file)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030c0:	605a      	str	r2, [r3, #4]
  return 0;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <_isatty>:

int _isatty(int file)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030d8:	2301      	movs	r3, #1
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b085      	sub	sp, #20
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	60f8      	str	r0, [r7, #12]
 80030ee:	60b9      	str	r1, [r7, #8]
 80030f0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003108:	4a14      	ldr	r2, [pc, #80]	@ (800315c <_sbrk+0x5c>)
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <_sbrk+0x60>)
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003114:	4b13      	ldr	r3, [pc, #76]	@ (8003164 <_sbrk+0x64>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <_sbrk+0x64>)
 800311e:	4a12      	ldr	r2, [pc, #72]	@ (8003168 <_sbrk+0x68>)
 8003120:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003122:	4b10      	ldr	r3, [pc, #64]	@ (8003164 <_sbrk+0x64>)
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	693a      	ldr	r2, [r7, #16]
 800312c:	429a      	cmp	r2, r3
 800312e:	d207      	bcs.n	8003140 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003130:	f006 fc56 	bl	80099e0 <__errno>
 8003134:	4603      	mov	r3, r0
 8003136:	220c      	movs	r2, #12
 8003138:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800313a:	f04f 33ff 	mov.w	r3, #4294967295
 800313e:	e009      	b.n	8003154 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003140:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <_sbrk+0x64>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003146:	4b07      	ldr	r3, [pc, #28]	@ (8003164 <_sbrk+0x64>)
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	4a05      	ldr	r2, [pc, #20]	@ (8003164 <_sbrk+0x64>)
 8003150:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003152:	68fb      	ldr	r3, [r7, #12]
}
 8003154:	4618      	mov	r0, r3
 8003156:	3718      	adds	r7, #24
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	20080000 	.word	0x20080000
 8003160:	00000400 	.word	0x00000400
 8003164:	20031bec 	.word	0x20031bec
 8003168:	20031d90 	.word	0x20031d90

0800316c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <SystemInit+0x20>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003176:	4a05      	ldr	r2, [pc, #20]	@ (800318c <SystemInit+0x20>)
 8003178:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800317c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003180:	bf00      	nop
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b088      	sub	sp, #32
 8003194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003196:	f107 0310 	add.w	r3, r7, #16
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	609a      	str	r2, [r3, #8]
 80031a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031a4:	1d3b      	adds	r3, r7, #4
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80031ae:	4b20      	ldr	r3, [pc, #128]	@ (8003230 <MX_TIM1_Init+0xa0>)
 80031b0:	4a20      	ldr	r2, [pc, #128]	@ (8003234 <MX_TIM1_Init+0xa4>)
 80031b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 80031b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003230 <MX_TIM1_Init+0xa0>)
 80031b6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80031ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003230 <MX_TIM1_Init+0xa0>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80031c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <MX_TIM1_Init+0xa0>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80031c8:	4b19      	ldr	r3, [pc, #100]	@ (8003230 <MX_TIM1_Init+0xa0>)
 80031ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80031ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80031d0:	4b17      	ldr	r3, [pc, #92]	@ (8003230 <MX_TIM1_Init+0xa0>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031d6:	4b16      	ldr	r3, [pc, #88]	@ (8003230 <MX_TIM1_Init+0xa0>)
 80031d8:	2200      	movs	r2, #0
 80031da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031dc:	4814      	ldr	r0, [pc, #80]	@ (8003230 <MX_TIM1_Init+0xa0>)
 80031de:	f005 f94d 	bl	800847c <HAL_TIM_Base_Init>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80031e8:	f7ff fe0a 	bl	8002e00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031f2:	f107 0310 	add.w	r3, r7, #16
 80031f6:	4619      	mov	r1, r3
 80031f8:	480d      	ldr	r0, [pc, #52]	@ (8003230 <MX_TIM1_Init+0xa0>)
 80031fa:	f005 f997 	bl	800852c <HAL_TIM_ConfigClockSource>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8003204:	f7ff fdfc 	bl	8002e00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003208:	2300      	movs	r3, #0
 800320a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800320c:	2300      	movs	r3, #0
 800320e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003210:	2300      	movs	r3, #0
 8003212:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003214:	1d3b      	adds	r3, r7, #4
 8003216:	4619      	mov	r1, r3
 8003218:	4805      	ldr	r0, [pc, #20]	@ (8003230 <MX_TIM1_Init+0xa0>)
 800321a:	f005 fb97 	bl	800894c <HAL_TIMEx_MasterConfigSynchronization>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003224:	f7ff fdec 	bl	8002e00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003228:	bf00      	nop
 800322a:	3720      	adds	r7, #32
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	20031bf0 	.word	0x20031bf0
 8003234:	40010000 	.word	0x40010000

08003238 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <HAL_TIM_Base_MspInit+0x38>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d10b      	bne.n	8003262 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800324a:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <HAL_TIM_Base_MspInit+0x3c>)
 800324c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800324e:	4a09      	ldr	r2, [pc, #36]	@ (8003274 <HAL_TIM_Base_MspInit+0x3c>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6453      	str	r3, [r2, #68]	@ 0x44
 8003256:	4b07      	ldr	r3, [pc, #28]	@ (8003274 <HAL_TIM_Base_MspInit+0x3c>)
 8003258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8003262:	bf00      	nop
 8003264:	3714      	adds	r7, #20
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40010000 	.word	0x40010000
 8003274:	40023800 	.word	0x40023800

08003278 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003278:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800327c:	f7ff ff76 	bl	800316c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003280:	480c      	ldr	r0, [pc, #48]	@ (80032b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003282:	490d      	ldr	r1, [pc, #52]	@ (80032b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003284:	4a0d      	ldr	r2, [pc, #52]	@ (80032bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003288:	e002      	b.n	8003290 <LoopCopyDataInit>

0800328a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800328a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800328c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800328e:	3304      	adds	r3, #4

08003290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003294:	d3f9      	bcc.n	800328a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003296:	4a0a      	ldr	r2, [pc, #40]	@ (80032c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003298:	4c0a      	ldr	r4, [pc, #40]	@ (80032c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800329a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800329c:	e001      	b.n	80032a2 <LoopFillZerobss>

0800329e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800329e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032a0:	3204      	adds	r2, #4

080032a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032a4:	d3fb      	bcc.n	800329e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80032a6:	f006 fba1 	bl	80099ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032aa:	f7ff fbe1 	bl	8002a70 <main>
  bx  lr    
 80032ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80032b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032b8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80032bc:	0800d6b8 	.word	0x0800d6b8
  ldr r2, =_sbss
 80032c0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80032c4:	20031d8c 	.word	0x20031d8c

080032c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032c8:	e7fe      	b.n	80032c8 <ADC_IRQHandler>
	...

080032cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80032d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003300 <HAL_Init+0x34>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003300 <HAL_Init+0x34>)
 80032d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032da:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032dc:	4b08      	ldr	r3, [pc, #32]	@ (8003300 <HAL_Init+0x34>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a07      	ldr	r2, [pc, #28]	@ (8003300 <HAL_Init+0x34>)
 80032e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e8:	2003      	movs	r0, #3
 80032ea:	f000 f94f 	bl	800358c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032ee:	200f      	movs	r0, #15
 80032f0:	f000 f808 	bl	8003304 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032f4:	f7ff fe0c 	bl	8002f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023c00 	.word	0x40023c00

08003304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800330c:	4b12      	ldr	r3, [pc, #72]	@ (8003358 <HAL_InitTick+0x54>)
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	4b12      	ldr	r3, [pc, #72]	@ (800335c <HAL_InitTick+0x58>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	4619      	mov	r1, r3
 8003316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800331a:	fbb3 f3f1 	udiv	r3, r3, r1
 800331e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f967 	bl	80035f6 <HAL_SYSTICK_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e00e      	b.n	8003350 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b0f      	cmp	r3, #15
 8003336:	d80a      	bhi.n	800334e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003338:	2200      	movs	r2, #0
 800333a:	6879      	ldr	r1, [r7, #4]
 800333c:	f04f 30ff 	mov.w	r0, #4294967295
 8003340:	f000 f92f 	bl	80035a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003344:	4a06      	ldr	r2, [pc, #24]	@ (8003360 <HAL_InitTick+0x5c>)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800334a:	2300      	movs	r3, #0
 800334c:	e000      	b.n	8003350 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	20000034 	.word	0x20000034
 800335c:	2000003c 	.word	0x2000003c
 8003360:	20000038 	.word	0x20000038

08003364 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003368:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_IncTick+0x20>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_IncTick+0x24>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4413      	add	r3, r2
 8003374:	4a04      	ldr	r2, [pc, #16]	@ (8003388 <HAL_IncTick+0x24>)
 8003376:	6013      	str	r3, [r2, #0]
}
 8003378:	bf00      	nop
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	2000003c 	.word	0x2000003c
 8003388:	20031c3c 	.word	0x20031c3c

0800338c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return uwTick;
 8003390:	4b03      	ldr	r3, [pc, #12]	@ (80033a0 <HAL_GetTick+0x14>)
 8003392:	681b      	ldr	r3, [r3, #0]
}
 8003394:	4618      	mov	r0, r3
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
 800339e:	bf00      	nop
 80033a0:	20031c3c 	.word	0x20031c3c

080033a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033ac:	f7ff ffee 	bl	800338c <HAL_GetTick>
 80033b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	d005      	beq.n	80033ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033be:	4b0a      	ldr	r3, [pc, #40]	@ (80033e8 <HAL_Delay+0x44>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	4413      	add	r3, r2
 80033c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033ca:	bf00      	nop
 80033cc:	f7ff ffde 	bl	800338c <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d8f7      	bhi.n	80033cc <HAL_Delay+0x28>
  {
  }
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	2000003c 	.word	0x2000003c

080033ec <__NVIC_SetPriorityGrouping>:
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033fc:	4b0b      	ldr	r3, [pc, #44]	@ (800342c <__NVIC_SetPriorityGrouping+0x40>)
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003408:	4013      	ands	r3, r2
 800340a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003414:	4b06      	ldr	r3, [pc, #24]	@ (8003430 <__NVIC_SetPriorityGrouping+0x44>)
 8003416:	4313      	orrs	r3, r2
 8003418:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800341a:	4a04      	ldr	r2, [pc, #16]	@ (800342c <__NVIC_SetPriorityGrouping+0x40>)
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	60d3      	str	r3, [r2, #12]
}
 8003420:	bf00      	nop
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	e000ed00 	.word	0xe000ed00
 8003430:	05fa0000 	.word	0x05fa0000

08003434 <__NVIC_GetPriorityGrouping>:
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003438:	4b04      	ldr	r3, [pc, #16]	@ (800344c <__NVIC_GetPriorityGrouping+0x18>)
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	0a1b      	lsrs	r3, r3, #8
 800343e:	f003 0307 	and.w	r3, r3, #7
}
 8003442:	4618      	mov	r0, r3
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr
 800344c:	e000ed00 	.word	0xe000ed00

08003450 <__NVIC_EnableIRQ>:
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	4603      	mov	r3, r0
 8003458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	2b00      	cmp	r3, #0
 8003460:	db0b      	blt.n	800347a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	f003 021f 	and.w	r2, r3, #31
 8003468:	4907      	ldr	r1, [pc, #28]	@ (8003488 <__NVIC_EnableIRQ+0x38>)
 800346a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2001      	movs	r0, #1
 8003472:	fa00 f202 	lsl.w	r2, r0, r2
 8003476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	e000e100 	.word	0xe000e100

0800348c <__NVIC_SetPriority>:
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	6039      	str	r1, [r7, #0]
 8003496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	2b00      	cmp	r3, #0
 800349e:	db0a      	blt.n	80034b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	490c      	ldr	r1, [pc, #48]	@ (80034d8 <__NVIC_SetPriority+0x4c>)
 80034a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034aa:	0112      	lsls	r2, r2, #4
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	440b      	add	r3, r1
 80034b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80034b4:	e00a      	b.n	80034cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	4908      	ldr	r1, [pc, #32]	@ (80034dc <__NVIC_SetPriority+0x50>)
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	f003 030f 	and.w	r3, r3, #15
 80034c2:	3b04      	subs	r3, #4
 80034c4:	0112      	lsls	r2, r2, #4
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	440b      	add	r3, r1
 80034ca:	761a      	strb	r2, [r3, #24]
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	e000e100 	.word	0xe000e100
 80034dc:	e000ed00 	.word	0xe000ed00

080034e0 <NVIC_EncodePriority>:
{
 80034e0:	b480      	push	{r7}
 80034e2:	b089      	sub	sp, #36	@ 0x24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	60b9      	str	r1, [r7, #8]
 80034ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	f1c3 0307 	rsb	r3, r3, #7
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	bf28      	it	cs
 80034fe:	2304      	movcs	r3, #4
 8003500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	3304      	adds	r3, #4
 8003506:	2b06      	cmp	r3, #6
 8003508:	d902      	bls.n	8003510 <NVIC_EncodePriority+0x30>
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3b03      	subs	r3, #3
 800350e:	e000      	b.n	8003512 <NVIC_EncodePriority+0x32>
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003514:	f04f 32ff 	mov.w	r2, #4294967295
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	fa02 f303 	lsl.w	r3, r2, r3
 800351e:	43da      	mvns	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	401a      	ands	r2, r3
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003528:	f04f 31ff 	mov.w	r1, #4294967295
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	43d9      	mvns	r1, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003538:	4313      	orrs	r3, r2
}
 800353a:	4618      	mov	r0, r3
 800353c:	3724      	adds	r7, #36	@ 0x24
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
	...

08003548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003558:	d301      	bcc.n	800355e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355a:	2301      	movs	r3, #1
 800355c:	e00f      	b.n	800357e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800355e:	4a0a      	ldr	r2, [pc, #40]	@ (8003588 <SysTick_Config+0x40>)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003566:	210f      	movs	r1, #15
 8003568:	f04f 30ff 	mov.w	r0, #4294967295
 800356c:	f7ff ff8e 	bl	800348c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003570:	4b05      	ldr	r3, [pc, #20]	@ (8003588 <SysTick_Config+0x40>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003576:	4b04      	ldr	r3, [pc, #16]	@ (8003588 <SysTick_Config+0x40>)
 8003578:	2207      	movs	r2, #7
 800357a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	e000e010 	.word	0xe000e010

0800358c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ff29 	bl	80033ec <__NVIC_SetPriorityGrouping>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b4:	f7ff ff3e 	bl	8003434 <__NVIC_GetPriorityGrouping>
 80035b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f7ff ff8e 	bl	80034e0 <NVIC_EncodePriority>
 80035c4:	4602      	mov	r2, r0
 80035c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff5d 	bl	800348c <__NVIC_SetPriority>
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff31 	bl	8003450 <__NVIC_EnableIRQ>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ffa2 	bl	8003548 <SysTick_Config>
 8003604:	4603      	mov	r3, r0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b082      	sub	sp, #8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e069      	b.n	80036f6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d102      	bne.n	8003634 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe feae 	bl	8002390 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2202      	movs	r2, #2
 8003638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

#ifdef DCMI_CR_BSM
  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24
  }
#endif
  /* Configures the HS, VS, DE and PC polarity */
#ifdef DCMI_CR_BSM
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6819      	ldr	r1, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	4b2a      	ldr	r3, [pc, #168]	@ (8003700 <HAL_DCMI_Init+0xf0>)
 8003656:	400b      	ands	r3, r1
 8003658:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6819      	ldr	r1, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800366e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800367a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
 8003680:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8003686:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800368c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8003692:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003698:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 800369e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
                                    hdcmi->Init.JPEGMode);
#endif

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d112      	bne.n	80036d6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	7f1b      	ldrb	r3, [r3, #28]
 80036b4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	7f5b      	ldrb	r3, [r3, #29]
 80036ba:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80036bc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	7f9b      	ldrb	r3, [r3, #30]
 80036c2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80036c4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	7fdb      	ldrb	r3, [r3, #31]
 80036cc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80036d2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80036d4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 021e 	orr.w	r2, r2, #30
 80036e4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	ffe0f007 	.word	0xffe0f007

08003704 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af02      	add	r7, sp, #8
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  uint32_t tmp_length = Length;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800371c:	2b01      	cmp	r3, #1
 800371e:	d101      	bne.n	8003724 <HAL_DCMI_Start_DMA+0x20>
 8003720:	2302      	movs	r3, #2
 8003722:	e0ab      	b.n	800387c <HAL_DCMI_Start_DMA+0x178>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2201      	movs	r2, #1
 8003728:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2202      	movs	r2, #2
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003742:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0202 	bic.w	r2, r2, #2
 8003752:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6819      	ldr	r1, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68ba      	ldr	r2, [r7, #8]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003768:	4a46      	ldr	r2, [pc, #280]	@ (8003884 <HAL_DCMI_Start_DMA+0x180>)
 800376a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003770:	4a45      	ldr	r2, [pc, #276]	@ (8003888 <HAL_DCMI_Start_DMA+0x184>)
 8003772:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003778:	2200      	movs	r2, #0
 800377a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2200      	movs	r2, #0
 8003780:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2200      	movs	r2, #0
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	645a      	str	r2, [r3, #68]	@ 0x44

  if (tmp_length <= 0xFFFFU)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800379a:	d219      	bcs.n	80037d0 <HAL_DCMI_Start_DMA+0xcc>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, tmp_length) != HAL_OK)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3328      	adds	r3, #40	@ 0x28
 80037a6:	4619      	mov	r1, r3
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	f000 fac8 	bl	8003d40 <HAL_DMA_Start_IT>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d055      	beq.n	8003862 <HAL_DCMI_Start_DMA+0x15e>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2240      	movs	r2, #64	@ 0x40
 80037ba:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e055      	b.n	800387c <HAL_DCMI_Start_DMA+0x178>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003884 <HAL_DCMI_Start_DMA+0x180>)
 80037d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = tmp_length;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80037ea:	e009      	b.n	8003800 <HAL_DCMI_Start_DMA+0xfc>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f0:	085a      	lsrs	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037fa:	005a      	lsls	r2, r3, #1
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003808:	d2f0      	bcs.n	80037ec <HAL_DCMI_Start_DMA+0xe8>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800380e:	1e9a      	subs	r2, r3, #2
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	687a      	ldr	r2, [r7, #4]
 8003824:	4413      	add	r3, r2
 8003826:	613b      	str	r3, [r7, #16]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3328      	adds	r3, #40	@ 0x28
 8003832:	4619      	mov	r1, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	f000 fddb 	bl	80043f8 <HAL_DMAEx_MultiBufferStart_IT>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00c      	beq.n	8003862 <HAL_DCMI_Start_DMA+0x15e>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2240      	movs	r2, #64	@ 0x40
 800384c:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e00c      	b.n	800387c <HAL_DCMI_Start_DMA+0x178>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0201 	orr.w	r2, r2, #1
 8003870:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	08003a85 	.word	0x08003a85
 8003888:	08003bab 	.word	0x08003bab

0800388c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8003894:	4b2b      	ldr	r3, [pc, #172]	@ (8003944 <HAL_DCMI_Stop+0xb8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a2b      	ldr	r2, [pc, #172]	@ (8003948 <HAL_DCMI_Stop+0xbc>)
 800389a:	fba2 2303 	umull	r2, r3, r2, r3
 800389e:	0a5b      	lsrs	r3, r3, #9
 80038a0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80038a4:	fb02 f303 	mul.w	r3, r2, r3
 80038a8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80038aa:	2300      	movs	r3, #0
 80038ac:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_DCMI_Stop+0x30>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e03f      	b.n	800393c <HAL_DCMI_Stop+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	3b01      	subs	r3, #1
 80038e0:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d108      	bne.n	80038fa <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	72fb      	strb	r3, [r7, #11]
      break;
 80038f8:	e006      	b.n	8003908 <HAL_DCMI_Stop+0x7c>
    }
  } while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0301 	and.w	r3, r3, #1
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e9      	bne.n	80038dc <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003916:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800391c:	4618      	mov	r0, r3
 800391e:	f000 fa6f 	bl	8003e00 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2201      	movs	r2, #1
 800392e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 800393a:	7afb      	ldrb	r3, [r7, #11]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000034 	.word	0x20000034
 8003948:	10624dd3 	.word	0x10624dd3

0800394c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	2b00      	cmp	r3, #0
 8003964:	d01e      	beq.n	80039a4 <HAL_DCMI_IRQHandler+0x58>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2204      	movs	r2, #4
 800396c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003972:	f043 0202 	orr.w	r2, r3, #2
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2204      	movs	r2, #4
 800397e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003986:	4a39      	ldr	r2, [pc, #228]	@ (8003a6c <HAL_DCMI_IRQHandler+0x120>)
 8003988:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398e:	4618      	mov	r0, r3
 8003990:	f000 faa6 	bl	8003ee0 <HAL_DMA_Abort_IT>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d004      	beq.n	80039a4 <HAL_DCMI_IRQHandler+0x58>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f903 	bl	8003baa <DCMI_DMAError>
    }
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01e      	beq.n	80039ec <HAL_DCMI_IRQHandler+0xa0>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2202      	movs	r2, #2
 80039b4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	f043 0201 	orr.w	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2204      	movs	r2, #4
 80039c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ce:	4a27      	ldr	r2, [pc, #156]	@ (8003a6c <HAL_DCMI_IRQHandler+0x120>)
 80039d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    if (HAL_DMA_Abort_IT(hdcmi->DMA_Handle) != HAL_OK)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 fa82 	bl	8003ee0 <HAL_DMA_Abort_IT>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d004      	beq.n	80039ec <HAL_DCMI_IRQHandler+0xa0>
    {
      DCMI_DMAError(hdcmi->DMA_Handle);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 f8df 	bl	8003baa <DCMI_DMAError>
    }
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0310 	and.w	r3, r3, #16
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d006      	beq.n	8003a04 <HAL_DCMI_IRQHandler+0xb8>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2210      	movs	r2, #16
 80039fc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7fe fc80 	bl	8002304 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d006      	beq.n	8003a1c <HAL_DCMI_IRQHandler+0xd0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2208      	movs	r2, #8
 8003a14:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7fe fc62 	bl	80022e0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d01d      	beq.n	8003a62 <HAL_DCMI_IRQHandler+0x116>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d107      	bne.n	8003a44 <HAL_DCMI_IRQHandler+0xf8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 021e 	bic.w	r2, r2, #30
 8003a42:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7fe fc0d 	bl	800227c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8003a62:	bf00      	nop
 8003a64:	3710      	adds	r7, #16
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	08003bab 	.word	0x08003bab

08003a70 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a90:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d043      	beq.n	8003b22 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aa6:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aac:	f003 0301 	and.w	r3, r3, #1
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d118      	bne.n	8003ae6 <DCMI_DMAXferCplt+0x62>
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d015      	beq.n	8003ae6 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003acc:	00da      	lsls	r2, r3, #3
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	4413      	add	r3, r2
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	f001 fdc5 	bl	8005664 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ade:	1e5a      	subs	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ae4:	e044      	b.n	8003b70 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d13c      	bne.n	8003b70 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b08:	00da      	lsls	r2, r3, #3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	2201      	movs	r2, #1
 8003b10:	4619      	mov	r1, r3
 8003b12:	f001 fda7 	bl	8005664 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b1a:	1e5a      	subs	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003b20:	e026      	b.n	8003b70 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d006      	beq.n	8003b40 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	e017      	b.n	8003b70 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10f      	bne.n	8003b70 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b54:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b5a:	0099      	lsls	r1, r3, #2
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	440a      	add	r2, r1
 8003b66:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d112      	bne.n	8003ba2 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f042 0201 	orr.w	r2, r2, #1
 8003b8a:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d103      	bne.n	8003ba2 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	3710      	adds	r7, #16
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b084      	sub	sp, #16
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb6:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d009      	beq.n	8003bd6 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff ff4a 	bl	8003a70 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */

}
 8003bdc:	bf00      	nop
 8003bde:	3710      	adds	r7, #16
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b086      	sub	sp, #24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003bf0:	f7ff fbcc 	bl	800338c <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d101      	bne.n	8003c00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e099      	b.n	8003d34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2202      	movs	r2, #2
 8003c04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0201 	bic.w	r2, r2, #1
 8003c1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c20:	e00f      	b.n	8003c42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c22:	f7ff fbb3 	bl	800338c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b05      	cmp	r3, #5
 8003c2e:	d908      	bls.n	8003c42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2220      	movs	r2, #32
 8003c34:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e078      	b.n	8003d34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d1e8      	bne.n	8003c22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4b38      	ldr	r3, [pc, #224]	@ (8003d3c <HAL_DMA_Init+0x158>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	691b      	ldr	r3, [r3, #16]
 8003c74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c98:	2b04      	cmp	r3, #4
 8003c9a:	d107      	bne.n	8003cac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	697a      	ldr	r2, [r7, #20]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f023 0307 	bic.w	r3, r3, #7
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd2:	2b04      	cmp	r3, #4
 8003cd4:	d117      	bne.n	8003d06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00e      	beq.n	8003d06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fb09 	bl	8004300 <DMA_CheckFifoParam>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d008      	beq.n	8003d06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2240      	movs	r2, #64	@ 0x40
 8003cf8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003d02:	2301      	movs	r3, #1
 8003d04:	e016      	b.n	8003d34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fac0 	bl	8004294 <DMA_CalcBaseAndBitshift>
 8003d14:	4603      	mov	r3, r0
 8003d16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1c:	223f      	movs	r2, #63	@ 0x3f
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	e010803f 	.word	0xe010803f

08003d40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d101      	bne.n	8003d66 <HAL_DMA_Start_IT+0x26>
 8003d62:	2302      	movs	r3, #2
 8003d64:	e048      	b.n	8003df8 <HAL_DMA_Start_IT+0xb8>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d137      	bne.n	8003dea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2202      	movs	r2, #2
 8003d7e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	68b9      	ldr	r1, [r7, #8]
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 fa52 	bl	8004238 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d98:	223f      	movs	r2, #63	@ 0x3f
 8003d9a:	409a      	lsls	r2, r3
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0216 	orr.w	r2, r2, #22
 8003dae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695a      	ldr	r2, [r3, #20]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dbe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d007      	beq.n	8003dd8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0208 	orr.w	r2, r2, #8
 8003dd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f042 0201 	orr.w	r2, r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
 8003de8:	e005      	b.n	8003df6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
 8003df4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003df6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3718      	adds	r7, #24
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003e0e:	f7ff fabd 	bl	800338c <HAL_GetTick>
 8003e12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d008      	beq.n	8003e32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2280      	movs	r2, #128	@ 0x80
 8003e24:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e052      	b.n	8003ed8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f022 0216 	bic.w	r2, r2, #22
 8003e40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d103      	bne.n	8003e62 <HAL_DMA_Abort+0x62>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d007      	beq.n	8003e72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0208 	bic.w	r2, r2, #8
 8003e70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0201 	bic.w	r2, r2, #1
 8003e80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e82:	e013      	b.n	8003eac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e84:	f7ff fa82 	bl	800338c <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b05      	cmp	r3, #5
 8003e90:	d90c      	bls.n	8003eac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2220      	movs	r2, #32
 8003e96:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e015      	b.n	8003ed8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e4      	bne.n	8003e84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ebe:	223f      	movs	r2, #63	@ 0x3f
 8003ec0:	409a      	lsls	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003ed6:	2300      	movs	r3, #0
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d004      	beq.n	8003efe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2280      	movs	r2, #128	@ 0x80
 8003ef8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e00c      	b.n	8003f18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2205      	movs	r2, #5
 8003f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f022 0201 	bic.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	370c      	adds	r7, #12
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b086      	sub	sp, #24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003f30:	4b8e      	ldr	r3, [pc, #568]	@ (800416c <HAL_DMA_IRQHandler+0x248>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a8e      	ldr	r2, [pc, #568]	@ (8004170 <HAL_DMA_IRQHandler+0x24c>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	0a9b      	lsrs	r3, r3, #10
 8003f3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4e:	2208      	movs	r2, #8
 8003f50:	409a      	lsls	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4013      	ands	r3, r2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d01a      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d013      	beq.n	8003f90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0204 	bic.w	r2, r2, #4
 8003f76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f7c:	2208      	movs	r2, #8
 8003f7e:	409a      	lsls	r2, r3
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f88:	f043 0201 	orr.w	r2, r3, #1
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f94:	2201      	movs	r2, #1
 8003f96:	409a      	lsls	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d012      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	409a      	lsls	r2, r3
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fbe:	f043 0202 	orr.w	r2, r3, #2
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fca:	2204      	movs	r2, #4
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d012      	beq.n	8003ffc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fe8:	2204      	movs	r2, #4
 8003fea:	409a      	lsls	r2, r3
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff4:	f043 0204 	orr.w	r2, r3, #4
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004000:	2210      	movs	r2, #16
 8004002:	409a      	lsls	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4013      	ands	r3, r2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d043      	beq.n	8004094 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d03c      	beq.n	8004094 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800401e:	2210      	movs	r2, #16
 8004020:	409a      	lsls	r2, r3
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004030:	2b00      	cmp	r3, #0
 8004032:	d018      	beq.n	8004066 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d108      	bne.n	8004054 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004046:	2b00      	cmp	r3, #0
 8004048:	d024      	beq.n	8004094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	4798      	blx	r3
 8004052:	e01f      	b.n	8004094 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	4798      	blx	r3
 8004064:	e016      	b.n	8004094 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d107      	bne.n	8004084 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f022 0208 	bic.w	r2, r2, #8
 8004082:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004088:	2b00      	cmp	r3, #0
 800408a:	d003      	beq.n	8004094 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004098:	2220      	movs	r2, #32
 800409a:	409a      	lsls	r2, r3
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 808f 	beq.w	80041c4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0310 	and.w	r3, r3, #16
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8087 	beq.w	80041c4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ba:	2220      	movs	r2, #32
 80040bc:	409a      	lsls	r2, r3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b05      	cmp	r3, #5
 80040cc:	d136      	bne.n	800413c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0216 	bic.w	r2, r2, #22
 80040dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695a      	ldr	r2, [r3, #20]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80040ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d103      	bne.n	80040fe <HAL_DMA_IRQHandler+0x1da>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d007      	beq.n	800410e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f022 0208 	bic.w	r2, r2, #8
 800410c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004112:	223f      	movs	r2, #63	@ 0x3f
 8004114:	409a      	lsls	r2, r3
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800412e:	2b00      	cmp	r3, #0
 8004130:	d07e      	beq.n	8004230 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	4798      	blx	r3
        }
        return;
 800413a:	e079      	b.n	8004230 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d01d      	beq.n	8004186 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d10d      	bne.n	8004174 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800415c:	2b00      	cmp	r3, #0
 800415e:	d031      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	4798      	blx	r3
 8004168:	e02c      	b.n	80041c4 <HAL_DMA_IRQHandler+0x2a0>
 800416a:	bf00      	nop
 800416c:	20000034 	.word	0x20000034
 8004170:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d023      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4798      	blx	r3
 8004184:	e01e      	b.n	80041c4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10f      	bne.n	80041b4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0210 	bic.w	r2, r2, #16
 80041a2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d003      	beq.n	80041c4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d032      	beq.n	8004232 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d022      	beq.n	800421e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2205      	movs	r2, #5
 80041dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f022 0201 	bic.w	r2, r2, #1
 80041ee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	3301      	adds	r3, #1
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d307      	bcc.n	800420c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f2      	bne.n	80041f0 <HAL_DMA_IRQHandler+0x2cc>
 800420a:	e000      	b.n	800420e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800420c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004222:	2b00      	cmp	r3, #0
 8004224:	d005      	beq.n	8004232 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	4798      	blx	r3
 800422e:	e000      	b.n	8004232 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004230:	bf00      	nop
    }
  }
}
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004254:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b40      	cmp	r3, #64	@ 0x40
 8004264:	d108      	bne.n	8004278 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004276:	e007      	b.n	8004288 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	60da      	str	r2, [r3, #12]
}
 8004288:	bf00      	nop
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	3b10      	subs	r3, #16
 80042a4:	4a13      	ldr	r2, [pc, #76]	@ (80042f4 <DMA_CalcBaseAndBitshift+0x60>)
 80042a6:	fba2 2303 	umull	r2, r3, r2, r3
 80042aa:	091b      	lsrs	r3, r3, #4
 80042ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80042ae:	4a12      	ldr	r2, [pc, #72]	@ (80042f8 <DMA_CalcBaseAndBitshift+0x64>)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	461a      	mov	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d908      	bls.n	80042d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	461a      	mov	r2, r3
 80042c8:	4b0c      	ldr	r3, [pc, #48]	@ (80042fc <DMA_CalcBaseAndBitshift+0x68>)
 80042ca:	4013      	ands	r3, r2
 80042cc:	1d1a      	adds	r2, r3, #4
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	659a      	str	r2, [r3, #88]	@ 0x58
 80042d2:	e006      	b.n	80042e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	4b08      	ldr	r3, [pc, #32]	@ (80042fc <DMA_CalcBaseAndBitshift+0x68>)
 80042dc:	4013      	ands	r3, r2
 80042de:	687a      	ldr	r2, [r7, #4]
 80042e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3714      	adds	r7, #20
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr
 80042f2:	bf00      	nop
 80042f4:	aaaaaaab 	.word	0xaaaaaaab
 80042f8:	0800d270 	.word	0x0800d270
 80042fc:	fffffc00 	.word	0xfffffc00

08004300 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004310:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	699b      	ldr	r3, [r3, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d11f      	bne.n	800435a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2b03      	cmp	r3, #3
 800431e:	d856      	bhi.n	80043ce <DMA_CheckFifoParam+0xce>
 8004320:	a201      	add	r2, pc, #4	@ (adr r2, 8004328 <DMA_CheckFifoParam+0x28>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	08004339 	.word	0x08004339
 800432c:	0800434b 	.word	0x0800434b
 8004330:	08004339 	.word	0x08004339
 8004334:	080043cf 	.word	0x080043cf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d046      	beq.n	80043d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004348:	e043      	b.n	80043d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004352:	d140      	bne.n	80043d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004358:	e03d      	b.n	80043d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004362:	d121      	bne.n	80043a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2b03      	cmp	r3, #3
 8004368:	d837      	bhi.n	80043da <DMA_CheckFifoParam+0xda>
 800436a:	a201      	add	r2, pc, #4	@ (adr r2, 8004370 <DMA_CheckFifoParam+0x70>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004381 	.word	0x08004381
 8004374:	08004387 	.word	0x08004387
 8004378:	08004381 	.word	0x08004381
 800437c:	08004399 	.word	0x08004399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
      break;
 8004384:	e030      	b.n	80043e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d025      	beq.n	80043de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004396:	e022      	b.n	80043de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043a0:	d11f      	bne.n	80043e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80043a6:	e01c      	b.n	80043e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d903      	bls.n	80043b6 <DMA_CheckFifoParam+0xb6>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d003      	beq.n	80043bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80043b4:	e018      	b.n	80043e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	73fb      	strb	r3, [r7, #15]
      break;
 80043ba:	e015      	b.n	80043e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00e      	beq.n	80043e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	73fb      	strb	r3, [r7, #15]
      break;
 80043cc:	e00b      	b.n	80043e6 <DMA_CheckFifoParam+0xe6>
      break;
 80043ce:	bf00      	nop
 80043d0:	e00a      	b.n	80043e8 <DMA_CheckFifoParam+0xe8>
      break;
 80043d2:	bf00      	nop
 80043d4:	e008      	b.n	80043e8 <DMA_CheckFifoParam+0xe8>
      break;
 80043d6:	bf00      	nop
 80043d8:	e006      	b.n	80043e8 <DMA_CheckFifoParam+0xe8>
      break;
 80043da:	bf00      	nop
 80043dc:	e004      	b.n	80043e8 <DMA_CheckFifoParam+0xe8>
      break;
 80043de:	bf00      	nop
 80043e0:	e002      	b.n	80043e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80043e2:	bf00      	nop
 80043e4:	e000      	b.n	80043e8 <DMA_CheckFifoParam+0xe8>
      break;
 80043e6:	bf00      	nop
    }
  } 
  
  return status; 
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop

080043f8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	607a      	str	r2, [r7, #4]
 8004404:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	2b80      	cmp	r3, #128	@ 0x80
 8004410:	d106      	bne.n	8004420 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004418:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	f001 b8ff 	b.w	800561e <HAL_DMAEx_MultiBufferStart_IT+0x1226>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004426:	2b01      	cmp	r3, #1
 8004428:	d102      	bne.n	8004430 <HAL_DMAEx_MultiBufferStart_IT+0x38>
 800442a:	2302      	movs	r3, #2
 800442c:	f001 b8f7 	b.w	800561e <HAL_DMAEx_MultiBufferStart_IT+0x1226>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	f041 80e5 	bne.w	8005610 <HAL_DMAEx_MultiBufferStart_IT+0x1218>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004462:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 800446c:	6a3b      	ldr	r3, [r7, #32]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f001 f910 	bl	8005698 <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	461a      	mov	r2, r3
 800447e:	4b8d      	ldr	r3, [pc, #564]	@ (80046b4 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004480:	429a      	cmp	r2, r3
 8004482:	d960      	bls.n	8004546 <HAL_DMAEx_MultiBufferStart_IT+0x14e>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a8b      	ldr	r2, [pc, #556]	@ (80046b8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d057      	beq.n	800453e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a8a      	ldr	r2, [pc, #552]	@ (80046bc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d050      	beq.n	800453a <HAL_DMAEx_MultiBufferStart_IT+0x142>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a88      	ldr	r2, [pc, #544]	@ (80046c0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d049      	beq.n	8004536 <HAL_DMAEx_MultiBufferStart_IT+0x13e>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a87      	ldr	r2, [pc, #540]	@ (80046c4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d042      	beq.n	8004532 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a85      	ldr	r2, [pc, #532]	@ (80046c8 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d03a      	beq.n	800452c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a84      	ldr	r2, [pc, #528]	@ (80046cc <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d032      	beq.n	8004526 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a82      	ldr	r2, [pc, #520]	@ (80046d0 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d02a      	beq.n	8004520 <HAL_DMAEx_MultiBufferStart_IT+0x128>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a81      	ldr	r2, [pc, #516]	@ (80046d4 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d022      	beq.n	800451a <HAL_DMAEx_MultiBufferStart_IT+0x122>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a7f      	ldr	r2, [pc, #508]	@ (80046d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01a      	beq.n	8004514 <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7e      	ldr	r2, [pc, #504]	@ (80046dc <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d012      	beq.n	800450e <HAL_DMAEx_MultiBufferStart_IT+0x116>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a7c      	ldr	r2, [pc, #496]	@ (80046e0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00a      	beq.n	8004508 <HAL_DMAEx_MultiBufferStart_IT+0x110>
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a7b      	ldr	r2, [pc, #492]	@ (80046e4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d102      	bne.n	8004502 <HAL_DMAEx_MultiBufferStart_IT+0x10a>
 80044fc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004500:	e01e      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004502:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004506:	e01b      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004508:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800450c:	e018      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800450e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004512:	e015      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004514:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004518:	e012      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800451a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800451e:	e00f      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004520:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004524:	e00c      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004526:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800452a:	e009      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800452c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004530:	e006      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004532:	2320      	movs	r3, #32
 8004534:	e004      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8004536:	2320      	movs	r3, #32
 8004538:	e002      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800453a:	2320      	movs	r3, #32
 800453c:	e000      	b.n	8004540 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 800453e:	2320      	movs	r3, #32
 8004540:	4a69      	ldr	r2, [pc, #420]	@ (80046e8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004542:	60d3      	str	r3, [r2, #12]
 8004544:	e14f      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	461a      	mov	r2, r3
 800454c:	4b67      	ldr	r3, [pc, #412]	@ (80046ec <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 800454e:	429a      	cmp	r2, r3
 8004550:	d960      	bls.n	8004614 <HAL_DMAEx_MultiBufferStart_IT+0x21c>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a58      	ldr	r2, [pc, #352]	@ (80046b8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d057      	beq.n	800460c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a56      	ldr	r2, [pc, #344]	@ (80046bc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d050      	beq.n	8004608 <HAL_DMAEx_MultiBufferStart_IT+0x210>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a55      	ldr	r2, [pc, #340]	@ (80046c0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d049      	beq.n	8004604 <HAL_DMAEx_MultiBufferStart_IT+0x20c>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a53      	ldr	r2, [pc, #332]	@ (80046c4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d042      	beq.n	8004600 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a52      	ldr	r2, [pc, #328]	@ (80046c8 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d03a      	beq.n	80045fa <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a50      	ldr	r2, [pc, #320]	@ (80046cc <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d032      	beq.n	80045f4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a4f      	ldr	r2, [pc, #316]	@ (80046d0 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d02a      	beq.n	80045ee <HAL_DMAEx_MultiBufferStart_IT+0x1f6>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a4d      	ldr	r2, [pc, #308]	@ (80046d4 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d022      	beq.n	80045e8 <HAL_DMAEx_MultiBufferStart_IT+0x1f0>
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a4c      	ldr	r2, [pc, #304]	@ (80046d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d01a      	beq.n	80045e2 <HAL_DMAEx_MultiBufferStart_IT+0x1ea>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a4a      	ldr	r2, [pc, #296]	@ (80046dc <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d012      	beq.n	80045dc <HAL_DMAEx_MultiBufferStart_IT+0x1e4>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a49      	ldr	r2, [pc, #292]	@ (80046e0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00a      	beq.n	80045d6 <HAL_DMAEx_MultiBufferStart_IT+0x1de>
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a47      	ldr	r2, [pc, #284]	@ (80046e4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d102      	bne.n	80045d0 <HAL_DMAEx_MultiBufferStart_IT+0x1d8>
 80045ca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045ce:	e01e      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80045d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80045d4:	e01b      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80045d6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045da:	e018      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80045dc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045e0:	e015      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80045e2:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80045e6:	e012      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80045e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045ec:	e00f      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80045ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045f2:	e00c      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80045f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045f8:	e009      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 80045fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80045fe:	e006      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004600:	2320      	movs	r3, #32
 8004602:	e004      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004604:	2320      	movs	r3, #32
 8004606:	e002      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 8004608:	2320      	movs	r3, #32
 800460a:	e000      	b.n	800460e <HAL_DMAEx_MultiBufferStart_IT+0x216>
 800460c:	2320      	movs	r3, #32
 800460e:	4a36      	ldr	r2, [pc, #216]	@ (80046e8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8004610:	6093      	str	r3, [r2, #8]
 8004612:	e0e8      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	4b35      	ldr	r3, [pc, #212]	@ (80046f0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800461c:	429a      	cmp	r2, r3
 800461e:	f240 8082 	bls.w	8004726 <HAL_DMAEx_MultiBufferStart_IT+0x32e>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a24      	ldr	r2, [pc, #144]	@ (80046b8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004628:	4293      	cmp	r3, r2
 800462a:	d078      	beq.n	800471e <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a22      	ldr	r2, [pc, #136]	@ (80046bc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d071      	beq.n	800471a <HAL_DMAEx_MultiBufferStart_IT+0x322>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a21      	ldr	r2, [pc, #132]	@ (80046c0 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d06a      	beq.n	8004716 <HAL_DMAEx_MultiBufferStart_IT+0x31e>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a1f      	ldr	r2, [pc, #124]	@ (80046c4 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d063      	beq.n	8004712 <HAL_DMAEx_MultiBufferStart_IT+0x31a>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a1e      	ldr	r2, [pc, #120]	@ (80046c8 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d05b      	beq.n	800470c <HAL_DMAEx_MultiBufferStart_IT+0x314>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a1c      	ldr	r2, [pc, #112]	@ (80046cc <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d053      	beq.n	8004706 <HAL_DMAEx_MultiBufferStart_IT+0x30e>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a1b      	ldr	r2, [pc, #108]	@ (80046d0 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d04b      	beq.n	8004700 <HAL_DMAEx_MultiBufferStart_IT+0x308>
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a19      	ldr	r2, [pc, #100]	@ (80046d4 <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d043      	beq.n	80046fa <HAL_DMAEx_MultiBufferStart_IT+0x302>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	4a18      	ldr	r2, [pc, #96]	@ (80046d8 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d03b      	beq.n	80046f4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a16      	ldr	r2, [pc, #88]	@ (80046dc <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d012      	beq.n	80046ac <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a15      	ldr	r2, [pc, #84]	@ (80046e0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d00a      	beq.n	80046a6 <HAL_DMAEx_MultiBufferStart_IT+0x2ae>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a13      	ldr	r2, [pc, #76]	@ (80046e4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d102      	bne.n	80046a0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>
 800469a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800469e:	e03f      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80046a0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80046a4:	e03c      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80046a6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046aa:	e039      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80046ac:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046b0:	e036      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80046b2:	bf00      	nop
 80046b4:	40026458 	.word	0x40026458
 80046b8:	40026010 	.word	0x40026010
 80046bc:	40026410 	.word	0x40026410
 80046c0:	40026070 	.word	0x40026070
 80046c4:	40026470 	.word	0x40026470
 80046c8:	40026028 	.word	0x40026028
 80046cc:	40026428 	.word	0x40026428
 80046d0:	40026088 	.word	0x40026088
 80046d4:	40026488 	.word	0x40026488
 80046d8:	40026040 	.word	0x40026040
 80046dc:	40026440 	.word	0x40026440
 80046e0:	400260a0 	.word	0x400260a0
 80046e4:	400264a0 	.word	0x400264a0
 80046e8:	40026400 	.word	0x40026400
 80046ec:	400260b8 	.word	0x400260b8
 80046f0:	40026058 	.word	0x40026058
 80046f4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80046f8:	e012      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 80046fa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80046fe:	e00f      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004700:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004704:	e00c      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004706:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800470a:	e009      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800470c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004710:	e006      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004712:	2320      	movs	r3, #32
 8004714:	e004      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 8004716:	2320      	movs	r3, #32
 8004718:	e002      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800471a:	2320      	movs	r3, #32
 800471c:	e000      	b.n	8004720 <HAL_DMAEx_MultiBufferStart_IT+0x328>
 800471e:	2320      	movs	r3, #32
 8004720:	4a8c      	ldr	r2, [pc, #560]	@ (8004954 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 8004722:	60d3      	str	r3, [r2, #12]
 8004724:	e05f      	b.n	80047e6 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a8b      	ldr	r2, [pc, #556]	@ (8004958 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d057      	beq.n	80047e0 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a89      	ldr	r2, [pc, #548]	@ (800495c <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d050      	beq.n	80047dc <HAL_DMAEx_MultiBufferStart_IT+0x3e4>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a88      	ldr	r2, [pc, #544]	@ (8004960 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d049      	beq.n	80047d8 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a86      	ldr	r2, [pc, #536]	@ (8004964 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d042      	beq.n	80047d4 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a85      	ldr	r2, [pc, #532]	@ (8004968 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d03a      	beq.n	80047ce <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a83      	ldr	r2, [pc, #524]	@ (800496c <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d032      	beq.n	80047c8 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a82      	ldr	r2, [pc, #520]	@ (8004970 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d02a      	beq.n	80047c2 <HAL_DMAEx_MultiBufferStart_IT+0x3ca>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a80      	ldr	r2, [pc, #512]	@ (8004974 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_DMAEx_MultiBufferStart_IT+0x3c4>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a7f      	ldr	r2, [pc, #508]	@ (8004978 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d01a      	beq.n	80047b6 <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a7d      	ldr	r2, [pc, #500]	@ (800497c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d012      	beq.n	80047b0 <HAL_DMAEx_MultiBufferStart_IT+0x3b8>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a7c      	ldr	r2, [pc, #496]	@ (8004980 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00a      	beq.n	80047aa <HAL_DMAEx_MultiBufferStart_IT+0x3b2>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a7a      	ldr	r2, [pc, #488]	@ (8004984 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d102      	bne.n	80047a4 <HAL_DMAEx_MultiBufferStart_IT+0x3ac>
 800479e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80047a2:	e01e      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80047a8:	e01b      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047aa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80047ae:	e018      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047b0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80047b4:	e015      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047b6:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80047ba:	e012      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047c0:	e00f      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047c2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047c6:	e00c      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047c8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047cc:	e009      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047ce:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80047d2:	e006      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047d4:	2320      	movs	r3, #32
 80047d6:	e004      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047d8:	2320      	movs	r3, #32
 80047da:	e002      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047dc:	2320      	movs	r3, #32
 80047de:	e000      	b.n	80047e2 <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 80047e0:	2320      	movs	r3, #32
 80047e2:	4a5c      	ldr	r2, [pc, #368]	@ (8004954 <HAL_DMAEx_MultiBufferStart_IT+0x55c>)
 80047e4:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	461a      	mov	r2, r3
 80047ec:	4b66      	ldr	r3, [pc, #408]	@ (8004988 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d960      	bls.n	80048b4 <HAL_DMAEx_MultiBufferStart_IT+0x4bc>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a58      	ldr	r2, [pc, #352]	@ (8004958 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d057      	beq.n	80048ac <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a56      	ldr	r2, [pc, #344]	@ (800495c <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d050      	beq.n	80048a8 <HAL_DMAEx_MultiBufferStart_IT+0x4b0>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a55      	ldr	r2, [pc, #340]	@ (8004960 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d049      	beq.n	80048a4 <HAL_DMAEx_MultiBufferStart_IT+0x4ac>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a53      	ldr	r2, [pc, #332]	@ (8004964 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d042      	beq.n	80048a0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a52      	ldr	r2, [pc, #328]	@ (8004968 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d03a      	beq.n	800489a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a50      	ldr	r2, [pc, #320]	@ (800496c <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d032      	beq.n	8004894 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a4f      	ldr	r2, [pc, #316]	@ (8004970 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d02a      	beq.n	800488e <HAL_DMAEx_MultiBufferStart_IT+0x496>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a4d      	ldr	r2, [pc, #308]	@ (8004974 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d022      	beq.n	8004888 <HAL_DMAEx_MultiBufferStart_IT+0x490>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a4c      	ldr	r2, [pc, #304]	@ (8004978 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d01a      	beq.n	8004882 <HAL_DMAEx_MultiBufferStart_IT+0x48a>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a4a      	ldr	r2, [pc, #296]	@ (800497c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d012      	beq.n	800487c <HAL_DMAEx_MultiBufferStart_IT+0x484>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a49      	ldr	r2, [pc, #292]	@ (8004980 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d00a      	beq.n	8004876 <HAL_DMAEx_MultiBufferStart_IT+0x47e>
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a47      	ldr	r2, [pc, #284]	@ (8004984 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d102      	bne.n	8004870 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 800486a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800486e:	e01e      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004870:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004874:	e01b      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004876:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800487a:	e018      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800487c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004880:	e015      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004882:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004886:	e012      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004888:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800488c:	e00f      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800488e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004892:	e00c      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 8004894:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004898:	e009      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 800489a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800489e:	e006      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80048a0:	2310      	movs	r3, #16
 80048a2:	e004      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80048a4:	2310      	movs	r3, #16
 80048a6:	e002      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80048a8:	2310      	movs	r3, #16
 80048aa:	e000      	b.n	80048ae <HAL_DMAEx_MultiBufferStart_IT+0x4b6>
 80048ac:	2310      	movs	r3, #16
 80048ae:	4a37      	ldr	r2, [pc, #220]	@ (800498c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80048b0:	60d3      	str	r3, [r2, #12]
 80048b2:	e14f      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	4b35      	ldr	r3, [pc, #212]	@ (8004990 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80048bc:	429a      	cmp	r2, r3
 80048be:	f240 8082 	bls.w	80049c6 <HAL_DMAEx_MultiBufferStart_IT+0x5ce>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a24      	ldr	r2, [pc, #144]	@ (8004958 <HAL_DMAEx_MultiBufferStart_IT+0x560>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d078      	beq.n	80049be <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a22      	ldr	r2, [pc, #136]	@ (800495c <HAL_DMAEx_MultiBufferStart_IT+0x564>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d071      	beq.n	80049ba <HAL_DMAEx_MultiBufferStart_IT+0x5c2>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a21      	ldr	r2, [pc, #132]	@ (8004960 <HAL_DMAEx_MultiBufferStart_IT+0x568>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d06a      	beq.n	80049b6 <HAL_DMAEx_MultiBufferStart_IT+0x5be>
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004964 <HAL_DMAEx_MultiBufferStart_IT+0x56c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d063      	beq.n	80049b2 <HAL_DMAEx_MultiBufferStart_IT+0x5ba>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004968 <HAL_DMAEx_MultiBufferStart_IT+0x570>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d05b      	beq.n	80049ac <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a1c      	ldr	r2, [pc, #112]	@ (800496c <HAL_DMAEx_MultiBufferStart_IT+0x574>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d053      	beq.n	80049a6 <HAL_DMAEx_MultiBufferStart_IT+0x5ae>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <HAL_DMAEx_MultiBufferStart_IT+0x578>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d04b      	beq.n	80049a0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a19      	ldr	r2, [pc, #100]	@ (8004974 <HAL_DMAEx_MultiBufferStart_IT+0x57c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d043      	beq.n	800499a <HAL_DMAEx_MultiBufferStart_IT+0x5a2>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d03b      	beq.n	8004994 <HAL_DMAEx_MultiBufferStart_IT+0x59c>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a16      	ldr	r2, [pc, #88]	@ (800497c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d012      	beq.n	800494c <HAL_DMAEx_MultiBufferStart_IT+0x554>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a15      	ldr	r2, [pc, #84]	@ (8004980 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d00a      	beq.n	8004946 <HAL_DMAEx_MultiBufferStart_IT+0x54e>
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a13      	ldr	r2, [pc, #76]	@ (8004984 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d102      	bne.n	8004940 <HAL_DMAEx_MultiBufferStart_IT+0x548>
 800493a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800493e:	e03f      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004940:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004944:	e03c      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004946:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800494a:	e039      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800494c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004950:	e036      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 8004952:	bf00      	nop
 8004954:	40026000 	.word	0x40026000
 8004958:	40026010 	.word	0x40026010
 800495c:	40026410 	.word	0x40026410
 8004960:	40026070 	.word	0x40026070
 8004964:	40026470 	.word	0x40026470
 8004968:	40026028 	.word	0x40026028
 800496c:	40026428 	.word	0x40026428
 8004970:	40026088 	.word	0x40026088
 8004974:	40026488 	.word	0x40026488
 8004978:	40026040 	.word	0x40026040
 800497c:	40026440 	.word	0x40026440
 8004980:	400260a0 	.word	0x400260a0
 8004984:	400264a0 	.word	0x400264a0
 8004988:	40026458 	.word	0x40026458
 800498c:	40026400 	.word	0x40026400
 8004990:	400260b8 	.word	0x400260b8
 8004994:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004998:	e012      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 800499a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800499e:	e00f      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80049a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049a4:	e00c      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80049a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049aa:	e009      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80049ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049b0:	e006      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80049b2:	2310      	movs	r3, #16
 80049b4:	e004      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80049b6:	2310      	movs	r3, #16
 80049b8:	e002      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80049ba:	2310      	movs	r3, #16
 80049bc:	e000      	b.n	80049c0 <HAL_DMAEx_MultiBufferStart_IT+0x5c8>
 80049be:	2310      	movs	r3, #16
 80049c0:	4a8c      	ldr	r2, [pc, #560]	@ (8004bf4 <HAL_DMAEx_MultiBufferStart_IT+0x7fc>)
 80049c2:	6093      	str	r3, [r2, #8]
 80049c4:	e0c6      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	4b8a      	ldr	r3, [pc, #552]	@ (8004bf8 <HAL_DMAEx_MultiBufferStart_IT+0x800>)
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d960      	bls.n	8004a94 <HAL_DMAEx_MultiBufferStart_IT+0x69c>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a89      	ldr	r2, [pc, #548]	@ (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d057      	beq.n	8004a8c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a87      	ldr	r2, [pc, #540]	@ (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d050      	beq.n	8004a88 <HAL_DMAEx_MultiBufferStart_IT+0x690>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a86      	ldr	r2, [pc, #536]	@ (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d049      	beq.n	8004a84 <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a84      	ldr	r2, [pc, #528]	@ (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d042      	beq.n	8004a80 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a83      	ldr	r2, [pc, #524]	@ (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d03a      	beq.n	8004a7a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a81      	ldr	r2, [pc, #516]	@ (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d032      	beq.n	8004a74 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a80      	ldr	r2, [pc, #512]	@ (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d02a      	beq.n	8004a6e <HAL_DMAEx_MultiBufferStart_IT+0x676>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a7e      	ldr	r2, [pc, #504]	@ (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d022      	beq.n	8004a68 <HAL_DMAEx_MultiBufferStart_IT+0x670>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a7d      	ldr	r2, [pc, #500]	@ (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d01a      	beq.n	8004a62 <HAL_DMAEx_MultiBufferStart_IT+0x66a>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a7b      	ldr	r2, [pc, #492]	@ (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d012      	beq.n	8004a5c <HAL_DMAEx_MultiBufferStart_IT+0x664>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a7a      	ldr	r2, [pc, #488]	@ (8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00a      	beq.n	8004a56 <HAL_DMAEx_MultiBufferStart_IT+0x65e>
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a78      	ldr	r2, [pc, #480]	@ (8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d102      	bne.n	8004a50 <HAL_DMAEx_MultiBufferStart_IT+0x658>
 8004a4a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a4e:	e01e      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a50:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004a54:	e01b      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a56:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a5a:	e018      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a60:	e015      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a62:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004a66:	e012      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a6c:	e00f      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a72:	e00c      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a78:	e009      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a7e:	e006      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a80:	2310      	movs	r3, #16
 8004a82:	e004      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a84:	2310      	movs	r3, #16
 8004a86:	e002      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a88:	2310      	movs	r3, #16
 8004a8a:	e000      	b.n	8004a8e <HAL_DMAEx_MultiBufferStart_IT+0x696>
 8004a8c:	2310      	movs	r3, #16
 8004a8e:	4a67      	ldr	r2, [pc, #412]	@ (8004c2c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004a90:	60d3      	str	r3, [r2, #12]
 8004a92:	e05f      	b.n	8004b54 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a58      	ldr	r2, [pc, #352]	@ (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d057      	beq.n	8004b4e <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a57      	ldr	r2, [pc, #348]	@ (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d050      	beq.n	8004b4a <HAL_DMAEx_MultiBufferStart_IT+0x752>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a55      	ldr	r2, [pc, #340]	@ (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d049      	beq.n	8004b46 <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a54      	ldr	r2, [pc, #336]	@ (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d042      	beq.n	8004b42 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a52      	ldr	r2, [pc, #328]	@ (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d03a      	beq.n	8004b3c <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a51      	ldr	r2, [pc, #324]	@ (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d032      	beq.n	8004b36 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a4f      	ldr	r2, [pc, #316]	@ (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d02a      	beq.n	8004b30 <HAL_DMAEx_MultiBufferStart_IT+0x738>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a4e      	ldr	r2, [pc, #312]	@ (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d022      	beq.n	8004b2a <HAL_DMAEx_MultiBufferStart_IT+0x732>
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d01a      	beq.n	8004b24 <HAL_DMAEx_MultiBufferStart_IT+0x72c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a4b      	ldr	r2, [pc, #300]	@ (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d012      	beq.n	8004b1e <HAL_DMAEx_MultiBufferStart_IT+0x726>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a49      	ldr	r2, [pc, #292]	@ (8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00a      	beq.n	8004b18 <HAL_DMAEx_MultiBufferStart_IT+0x720>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a48      	ldr	r2, [pc, #288]	@ (8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d102      	bne.n	8004b12 <HAL_DMAEx_MultiBufferStart_IT+0x71a>
 8004b0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b10:	e01e      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b12:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004b16:	e01b      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b18:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b1c:	e018      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b1e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b22:	e015      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004b28:	e012      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b2e:	e00f      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b34:	e00c      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b3a:	e009      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b40:	e006      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b42:	2310      	movs	r3, #16
 8004b44:	e004      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b46:	2310      	movs	r3, #16
 8004b48:	e002      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b4a:	2310      	movs	r3, #16
 8004b4c:	e000      	b.n	8004b50 <HAL_DMAEx_MultiBufferStart_IT+0x758>
 8004b4e:	2310      	movs	r3, #16
 8004b50:	4a36      	ldr	r2, [pc, #216]	@ (8004c2c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 8004b52:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4b35      	ldr	r3, [pc, #212]	@ (8004c30 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	f240 8082 	bls.w	8004c66 <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a25      	ldr	r2, [pc, #148]	@ (8004bfc <HAL_DMAEx_MultiBufferStart_IT+0x804>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d078      	beq.n	8004c5e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a23      	ldr	r2, [pc, #140]	@ (8004c00 <HAL_DMAEx_MultiBufferStart_IT+0x808>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d071      	beq.n	8004c5a <HAL_DMAEx_MultiBufferStart_IT+0x862>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4a22      	ldr	r2, [pc, #136]	@ (8004c04 <HAL_DMAEx_MultiBufferStart_IT+0x80c>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d06a      	beq.n	8004c56 <HAL_DMAEx_MultiBufferStart_IT+0x85e>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a20      	ldr	r2, [pc, #128]	@ (8004c08 <HAL_DMAEx_MultiBufferStart_IT+0x810>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d063      	beq.n	8004c52 <HAL_DMAEx_MultiBufferStart_IT+0x85a>
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004c0c <HAL_DMAEx_MultiBufferStart_IT+0x814>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d05b      	beq.n	8004c4c <HAL_DMAEx_MultiBufferStart_IT+0x854>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a1d      	ldr	r2, [pc, #116]	@ (8004c10 <HAL_DMAEx_MultiBufferStart_IT+0x818>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d053      	beq.n	8004c46 <HAL_DMAEx_MultiBufferStart_IT+0x84e>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c14 <HAL_DMAEx_MultiBufferStart_IT+0x81c>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d04b      	beq.n	8004c40 <HAL_DMAEx_MultiBufferStart_IT+0x848>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a1a      	ldr	r2, [pc, #104]	@ (8004c18 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d043      	beq.n	8004c3a <HAL_DMAEx_MultiBufferStart_IT+0x842>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a19      	ldr	r2, [pc, #100]	@ (8004c1c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d03b      	beq.n	8004c34 <HAL_DMAEx_MultiBufferStart_IT+0x83c>
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a17      	ldr	r2, [pc, #92]	@ (8004c20 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d012      	beq.n	8004bec <HAL_DMAEx_MultiBufferStart_IT+0x7f4>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a16      	ldr	r2, [pc, #88]	@ (8004c24 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d00a      	beq.n	8004be6 <HAL_DMAEx_MultiBufferStart_IT+0x7ee>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a14      	ldr	r2, [pc, #80]	@ (8004c28 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d102      	bne.n	8004be0 <HAL_DMAEx_MultiBufferStart_IT+0x7e8>
 8004bda:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004bde:	e03f      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004be0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004be4:	e03c      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004be6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004bea:	e039      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004bec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004bf0:	e036      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004bf2:	bf00      	nop
 8004bf4:	40026400 	.word	0x40026400
 8004bf8:	40026058 	.word	0x40026058
 8004bfc:	40026010 	.word	0x40026010
 8004c00:	40026410 	.word	0x40026410
 8004c04:	40026070 	.word	0x40026070
 8004c08:	40026470 	.word	0x40026470
 8004c0c:	40026028 	.word	0x40026028
 8004c10:	40026428 	.word	0x40026428
 8004c14:	40026088 	.word	0x40026088
 8004c18:	40026488 	.word	0x40026488
 8004c1c:	40026040 	.word	0x40026040
 8004c20:	40026440 	.word	0x40026440
 8004c24:	400260a0 	.word	0x400260a0
 8004c28:	400264a0 	.word	0x400264a0
 8004c2c:	40026000 	.word	0x40026000
 8004c30:	40026458 	.word	0x40026458
 8004c34:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004c38:	e012      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004c3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c3e:	e00f      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004c40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c44:	e00c      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004c46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c4a:	e009      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004c4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004c50:	e006      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004c52:	2308      	movs	r3, #8
 8004c54:	e004      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004c56:	2308      	movs	r3, #8
 8004c58:	e002      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004c5a:	2308      	movs	r3, #8
 8004c5c:	e000      	b.n	8004c60 <HAL_DMAEx_MultiBufferStart_IT+0x868>
 8004c5e:	2308      	movs	r3, #8
 8004c60:	4a8c      	ldr	r2, [pc, #560]	@ (8004e94 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8004c62:	60d3      	str	r3, [r2, #12]
 8004c64:	e14e      	b.n	8004f04 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8004e98 <HAL_DMAEx_MultiBufferStart_IT+0xaa0>)
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d960      	bls.n	8004d34 <HAL_DMAEx_MultiBufferStart_IT+0x93c>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a89      	ldr	r2, [pc, #548]	@ (8004e9c <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d057      	beq.n	8004d2c <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a87      	ldr	r2, [pc, #540]	@ (8004ea0 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d050      	beq.n	8004d28 <HAL_DMAEx_MultiBufferStart_IT+0x930>
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a86      	ldr	r2, [pc, #536]	@ (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d049      	beq.n	8004d24 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a84      	ldr	r2, [pc, #528]	@ (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d042      	beq.n	8004d20 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a83      	ldr	r2, [pc, #524]	@ (8004eac <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d03a      	beq.n	8004d1a <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a81      	ldr	r2, [pc, #516]	@ (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d032      	beq.n	8004d14 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a80      	ldr	r2, [pc, #512]	@ (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d02a      	beq.n	8004d0e <HAL_DMAEx_MultiBufferStart_IT+0x916>
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a7e      	ldr	r2, [pc, #504]	@ (8004eb8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d022      	beq.n	8004d08 <HAL_DMAEx_MultiBufferStart_IT+0x910>
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a7d      	ldr	r2, [pc, #500]	@ (8004ebc <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d01a      	beq.n	8004d02 <HAL_DMAEx_MultiBufferStart_IT+0x90a>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a7b      	ldr	r2, [pc, #492]	@ (8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d012      	beq.n	8004cfc <HAL_DMAEx_MultiBufferStart_IT+0x904>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a7a      	ldr	r2, [pc, #488]	@ (8004ec4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d00a      	beq.n	8004cf6 <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a78      	ldr	r2, [pc, #480]	@ (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d102      	bne.n	8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 8004cea:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004cee:	e01e      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004cf0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cf4:	e01b      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004cf6:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004cfa:	e018      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004cfc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d00:	e015      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004d02:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004d06:	e012      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004d08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d0c:	e00f      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004d0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d12:	e00c      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004d14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d18:	e009      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004d1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004d1e:	e006      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004d20:	2308      	movs	r3, #8
 8004d22:	e004      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004d24:	2308      	movs	r3, #8
 8004d26:	e002      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	e000      	b.n	8004d2e <HAL_DMAEx_MultiBufferStart_IT+0x936>
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	4a59      	ldr	r2, [pc, #356]	@ (8004e94 <HAL_DMAEx_MultiBufferStart_IT+0xa9c>)
 8004d30:	6093      	str	r3, [r2, #8]
 8004d32:	e0e7      	b.n	8004f04 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	461a      	mov	r2, r3
 8004d3a:	4b64      	ldr	r3, [pc, #400]	@ (8004ecc <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d960      	bls.n	8004e02 <HAL_DMAEx_MultiBufferStart_IT+0xa0a>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a55      	ldr	r2, [pc, #340]	@ (8004e9c <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d057      	beq.n	8004dfa <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a54      	ldr	r2, [pc, #336]	@ (8004ea0 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d050      	beq.n	8004df6 <HAL_DMAEx_MultiBufferStart_IT+0x9fe>
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a52      	ldr	r2, [pc, #328]	@ (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d049      	beq.n	8004df2 <HAL_DMAEx_MultiBufferStart_IT+0x9fa>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a51      	ldr	r2, [pc, #324]	@ (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d042      	beq.n	8004dee <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a4f      	ldr	r2, [pc, #316]	@ (8004eac <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d03a      	beq.n	8004de8 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a4e      	ldr	r2, [pc, #312]	@ (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d032      	beq.n	8004de2 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a4c      	ldr	r2, [pc, #304]	@ (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d02a      	beq.n	8004ddc <HAL_DMAEx_MultiBufferStart_IT+0x9e4>
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a4b      	ldr	r2, [pc, #300]	@ (8004eb8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d022      	beq.n	8004dd6 <HAL_DMAEx_MultiBufferStart_IT+0x9de>
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a49      	ldr	r2, [pc, #292]	@ (8004ebc <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d01a      	beq.n	8004dd0 <HAL_DMAEx_MultiBufferStart_IT+0x9d8>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a48      	ldr	r2, [pc, #288]	@ (8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d012      	beq.n	8004dca <HAL_DMAEx_MultiBufferStart_IT+0x9d2>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a46      	ldr	r2, [pc, #280]	@ (8004ec4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00a      	beq.n	8004dc4 <HAL_DMAEx_MultiBufferStart_IT+0x9cc>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a45      	ldr	r2, [pc, #276]	@ (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d102      	bne.n	8004dbe <HAL_DMAEx_MultiBufferStart_IT+0x9c6>
 8004db8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dbc:	e01e      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004dbe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dc2:	e01b      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004dc4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dc8:	e018      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004dca:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dce:	e015      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004dd0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dd4:	e012      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dda:	e00f      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004de0:	e00c      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004de2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004de6:	e009      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004de8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004dec:	e006      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004dee:	2308      	movs	r3, #8
 8004df0:	e004      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004df2:	2308      	movs	r3, #8
 8004df4:	e002      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004df6:	2308      	movs	r3, #8
 8004df8:	e000      	b.n	8004dfc <HAL_DMAEx_MultiBufferStart_IT+0xa04>
 8004dfa:	2308      	movs	r3, #8
 8004dfc:	4a34      	ldr	r2, [pc, #208]	@ (8004ed0 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8004dfe:	60d3      	str	r3, [r2, #12]
 8004e00:	e080      	b.n	8004f04 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a25      	ldr	r2, [pc, #148]	@ (8004e9c <HAL_DMAEx_MultiBufferStart_IT+0xaa4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d078      	beq.n	8004efe <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a23      	ldr	r2, [pc, #140]	@ (8004ea0 <HAL_DMAEx_MultiBufferStart_IT+0xaa8>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d071      	beq.n	8004efa <HAL_DMAEx_MultiBufferStart_IT+0xb02>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a22      	ldr	r2, [pc, #136]	@ (8004ea4 <HAL_DMAEx_MultiBufferStart_IT+0xaac>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d06a      	beq.n	8004ef6 <HAL_DMAEx_MultiBufferStart_IT+0xafe>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a20      	ldr	r2, [pc, #128]	@ (8004ea8 <HAL_DMAEx_MultiBufferStart_IT+0xab0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d063      	beq.n	8004ef2 <HAL_DMAEx_MultiBufferStart_IT+0xafa>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8004eac <HAL_DMAEx_MultiBufferStart_IT+0xab4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d05b      	beq.n	8004eec <HAL_DMAEx_MultiBufferStart_IT+0xaf4>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a1d      	ldr	r2, [pc, #116]	@ (8004eb0 <HAL_DMAEx_MultiBufferStart_IT+0xab8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d053      	beq.n	8004ee6 <HAL_DMAEx_MultiBufferStart_IT+0xaee>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb4 <HAL_DMAEx_MultiBufferStart_IT+0xabc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d04b      	beq.n	8004ee0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d043      	beq.n	8004eda <HAL_DMAEx_MultiBufferStart_IT+0xae2>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a19      	ldr	r2, [pc, #100]	@ (8004ebc <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d03b      	beq.n	8004ed4 <HAL_DMAEx_MultiBufferStart_IT+0xadc>
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a17      	ldr	r2, [pc, #92]	@ (8004ec0 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d012      	beq.n	8004e8c <HAL_DMAEx_MultiBufferStart_IT+0xa94>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a16      	ldr	r2, [pc, #88]	@ (8004ec4 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00a      	beq.n	8004e86 <HAL_DMAEx_MultiBufferStart_IT+0xa8e>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a14      	ldr	r2, [pc, #80]	@ (8004ec8 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d102      	bne.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0xa88>
 8004e7a:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e7e:	e03f      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004e80:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e84:	e03c      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004e86:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e8a:	e039      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004e8c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004e90:	e036      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004e92:	bf00      	nop
 8004e94:	40026400 	.word	0x40026400
 8004e98:	400260b8 	.word	0x400260b8
 8004e9c:	40026010 	.word	0x40026010
 8004ea0:	40026410 	.word	0x40026410
 8004ea4:	40026070 	.word	0x40026070
 8004ea8:	40026470 	.word	0x40026470
 8004eac:	40026028 	.word	0x40026028
 8004eb0:	40026428 	.word	0x40026428
 8004eb4:	40026088 	.word	0x40026088
 8004eb8:	40026488 	.word	0x40026488
 8004ebc:	40026040 	.word	0x40026040
 8004ec0:	40026440 	.word	0x40026440
 8004ec4:	400260a0 	.word	0x400260a0
 8004ec8:	400264a0 	.word	0x400264a0
 8004ecc:	40026058 	.word	0x40026058
 8004ed0:	40026000 	.word	0x40026000
 8004ed4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004ed8:	e012      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ede:	e00f      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004ee0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ee4:	e00c      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004ee6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eea:	e009      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004eec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004ef0:	e006      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	e004      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004ef6:	2308      	movs	r3, #8
 8004ef8:	e002      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004efa:	2308      	movs	r3, #8
 8004efc:	e000      	b.n	8004f00 <HAL_DMAEx_MultiBufferStart_IT+0xb08>
 8004efe:	2308      	movs	r3, #8
 8004f00:	4a8a      	ldr	r2, [pc, #552]	@ (800512c <HAL_DMAEx_MultiBufferStart_IT+0xd34>)
 8004f02:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4b89      	ldr	r3, [pc, #548]	@ (8005130 <HAL_DMAEx_MultiBufferStart_IT+0xd38>)
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d960      	bls.n	8004fd2 <HAL_DMAEx_MultiBufferStart_IT+0xbda>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a87      	ldr	r2, [pc, #540]	@ (8005134 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d057      	beq.n	8004fca <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a86      	ldr	r2, [pc, #536]	@ (8005138 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d050      	beq.n	8004fc6 <HAL_DMAEx_MultiBufferStart_IT+0xbce>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a84      	ldr	r2, [pc, #528]	@ (800513c <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d049      	beq.n	8004fc2 <HAL_DMAEx_MultiBufferStart_IT+0xbca>
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a83      	ldr	r2, [pc, #524]	@ (8005140 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d042      	beq.n	8004fbe <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a81      	ldr	r2, [pc, #516]	@ (8005144 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d03a      	beq.n	8004fb8 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a80      	ldr	r2, [pc, #512]	@ (8005148 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d032      	beq.n	8004fb2 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a7e      	ldr	r2, [pc, #504]	@ (800514c <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d02a      	beq.n	8004fac <HAL_DMAEx_MultiBufferStart_IT+0xbb4>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a7d      	ldr	r2, [pc, #500]	@ (8005150 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d022      	beq.n	8004fa6 <HAL_DMAEx_MultiBufferStart_IT+0xbae>
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a7b      	ldr	r2, [pc, #492]	@ (8005154 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01a      	beq.n	8004fa0 <HAL_DMAEx_MultiBufferStart_IT+0xba8>
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a7a      	ldr	r2, [pc, #488]	@ (8005158 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d012      	beq.n	8004f9a <HAL_DMAEx_MultiBufferStart_IT+0xba2>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a78      	ldr	r2, [pc, #480]	@ (800515c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00a      	beq.n	8004f94 <HAL_DMAEx_MultiBufferStart_IT+0xb9c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a77      	ldr	r2, [pc, #476]	@ (8005160 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d102      	bne.n	8004f8e <HAL_DMAEx_MultiBufferStart_IT+0xb96>
 8004f88:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004f8c:	e01e      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004f8e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f92:	e01b      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004f94:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004f98:	e018      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004f9a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004f9e:	e015      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004fa0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004fa4:	e012      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004fa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004faa:	e00f      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004fac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fb0:	e00c      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004fb2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fb6:	e009      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004fb8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fbc:	e006      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004fbe:	2304      	movs	r3, #4
 8004fc0:	e004      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004fc2:	2304      	movs	r3, #4
 8004fc4:	e002      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004fc6:	2304      	movs	r3, #4
 8004fc8:	e000      	b.n	8004fcc <HAL_DMAEx_MultiBufferStart_IT+0xbd4>
 8004fca:	2304      	movs	r3, #4
 8004fcc:	4a65      	ldr	r2, [pc, #404]	@ (8005164 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8004fce:	60d3      	str	r3, [r2, #12]
 8004fd0:	e150      	b.n	8005274 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4b63      	ldr	r3, [pc, #396]	@ (8005168 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d960      	bls.n	80050a0 <HAL_DMAEx_MultiBufferStart_IT+0xca8>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a54      	ldr	r2, [pc, #336]	@ (8005134 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d057      	beq.n	8005098 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a52      	ldr	r2, [pc, #328]	@ (8005138 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d050      	beq.n	8005094 <HAL_DMAEx_MultiBufferStart_IT+0xc9c>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a51      	ldr	r2, [pc, #324]	@ (800513c <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d049      	beq.n	8005090 <HAL_DMAEx_MultiBufferStart_IT+0xc98>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a4f      	ldr	r2, [pc, #316]	@ (8005140 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d042      	beq.n	800508c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a4e      	ldr	r2, [pc, #312]	@ (8005144 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d03a      	beq.n	8005086 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a4c      	ldr	r2, [pc, #304]	@ (8005148 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d032      	beq.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a4b      	ldr	r2, [pc, #300]	@ (800514c <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d02a      	beq.n	800507a <HAL_DMAEx_MultiBufferStart_IT+0xc82>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a49      	ldr	r2, [pc, #292]	@ (8005150 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d022      	beq.n	8005074 <HAL_DMAEx_MultiBufferStart_IT+0xc7c>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a48      	ldr	r2, [pc, #288]	@ (8005154 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d01a      	beq.n	800506e <HAL_DMAEx_MultiBufferStart_IT+0xc76>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a46      	ldr	r2, [pc, #280]	@ (8005158 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d012      	beq.n	8005068 <HAL_DMAEx_MultiBufferStart_IT+0xc70>
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a45      	ldr	r2, [pc, #276]	@ (800515c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d00a      	beq.n	8005062 <HAL_DMAEx_MultiBufferStart_IT+0xc6a>
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a43      	ldr	r2, [pc, #268]	@ (8005160 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d102      	bne.n	800505c <HAL_DMAEx_MultiBufferStart_IT+0xc64>
 8005056:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800505a:	e01e      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800505c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005060:	e01b      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8005062:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005066:	e018      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8005068:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800506c:	e015      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800506e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005072:	e012      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8005074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005078:	e00f      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800507a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800507e:	e00c      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8005080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005084:	e009      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8005086:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800508a:	e006      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 800508c:	2304      	movs	r3, #4
 800508e:	e004      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8005090:	2304      	movs	r3, #4
 8005092:	e002      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8005094:	2304      	movs	r3, #4
 8005096:	e000      	b.n	800509a <HAL_DMAEx_MultiBufferStart_IT+0xca2>
 8005098:	2304      	movs	r3, #4
 800509a:	4a32      	ldr	r2, [pc, #200]	@ (8005164 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 800509c:	6093      	str	r3, [r2, #8]
 800509e:	e0e9      	b.n	8005274 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	4b31      	ldr	r3, [pc, #196]	@ (800516c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80050a8:	429a      	cmp	r2, r3
 80050aa:	f240 8083 	bls.w	80051b4 <HAL_DMAEx_MultiBufferStart_IT+0xdbc>
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a20      	ldr	r2, [pc, #128]	@ (8005134 <HAL_DMAEx_MultiBufferStart_IT+0xd3c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d079      	beq.n	80051ac <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1e      	ldr	r2, [pc, #120]	@ (8005138 <HAL_DMAEx_MultiBufferStart_IT+0xd40>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d072      	beq.n	80051a8 <HAL_DMAEx_MultiBufferStart_IT+0xdb0>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1d      	ldr	r2, [pc, #116]	@ (800513c <HAL_DMAEx_MultiBufferStart_IT+0xd44>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d06b      	beq.n	80051a4 <HAL_DMAEx_MultiBufferStart_IT+0xdac>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1b      	ldr	r2, [pc, #108]	@ (8005140 <HAL_DMAEx_MultiBufferStart_IT+0xd48>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d064      	beq.n	80051a0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1a      	ldr	r2, [pc, #104]	@ (8005144 <HAL_DMAEx_MultiBufferStart_IT+0xd4c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d05c      	beq.n	800519a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a18      	ldr	r2, [pc, #96]	@ (8005148 <HAL_DMAEx_MultiBufferStart_IT+0xd50>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d054      	beq.n	8005194 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a17      	ldr	r2, [pc, #92]	@ (800514c <HAL_DMAEx_MultiBufferStart_IT+0xd54>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d04c      	beq.n	800518e <HAL_DMAEx_MultiBufferStart_IT+0xd96>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a15      	ldr	r2, [pc, #84]	@ (8005150 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d044      	beq.n	8005188 <HAL_DMAEx_MultiBufferStart_IT+0xd90>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a14      	ldr	r2, [pc, #80]	@ (8005154 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d03c      	beq.n	8005182 <HAL_DMAEx_MultiBufferStart_IT+0xd8a>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a12      	ldr	r2, [pc, #72]	@ (8005158 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d034      	beq.n	800517c <HAL_DMAEx_MultiBufferStart_IT+0xd84>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a11      	ldr	r2, [pc, #68]	@ (800515c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d02c      	beq.n	8005176 <HAL_DMAEx_MultiBufferStart_IT+0xd7e>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a0f      	ldr	r2, [pc, #60]	@ (8005160 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d124      	bne.n	8005170 <HAL_DMAEx_MultiBufferStart_IT+0xd78>
 8005126:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800512a:	e040      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 800512c:	40026000 	.word	0x40026000
 8005130:	40026458 	.word	0x40026458
 8005134:	40026010 	.word	0x40026010
 8005138:	40026410 	.word	0x40026410
 800513c:	40026070 	.word	0x40026070
 8005140:	40026470 	.word	0x40026470
 8005144:	40026028 	.word	0x40026028
 8005148:	40026428 	.word	0x40026428
 800514c:	40026088 	.word	0x40026088
 8005150:	40026488 	.word	0x40026488
 8005154:	40026040 	.word	0x40026040
 8005158:	40026440 	.word	0x40026440
 800515c:	400260a0 	.word	0x400260a0
 8005160:	400264a0 	.word	0x400264a0
 8005164:	40026400 	.word	0x40026400
 8005168:	400260b8 	.word	0x400260b8
 800516c:	40026058 	.word	0x40026058
 8005170:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005174:	e01b      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8005176:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800517a:	e018      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 800517c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005180:	e015      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8005182:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005186:	e012      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8005188:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800518c:	e00f      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 800518e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005192:	e00c      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 8005194:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005198:	e009      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 800519a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800519e:	e006      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80051a0:	2304      	movs	r3, #4
 80051a2:	e004      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80051a4:	2304      	movs	r3, #4
 80051a6:	e002      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80051a8:	2304      	movs	r3, #4
 80051aa:	e000      	b.n	80051ae <HAL_DMAEx_MultiBufferStart_IT+0xdb6>
 80051ac:	2304      	movs	r3, #4
 80051ae:	4a8b      	ldr	r2, [pc, #556]	@ (80053dc <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 80051b0:	60d3      	str	r3, [r2, #12]
 80051b2:	e05f      	b.n	8005274 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a89      	ldr	r2, [pc, #548]	@ (80053e0 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d057      	beq.n	800526e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a88      	ldr	r2, [pc, #544]	@ (80053e4 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d050      	beq.n	800526a <HAL_DMAEx_MultiBufferStart_IT+0xe72>
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a86      	ldr	r2, [pc, #536]	@ (80053e8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d049      	beq.n	8005266 <HAL_DMAEx_MultiBufferStart_IT+0xe6e>
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a85      	ldr	r2, [pc, #532]	@ (80053ec <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d042      	beq.n	8005262 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a83      	ldr	r2, [pc, #524]	@ (80053f0 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d03a      	beq.n	800525c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a82      	ldr	r2, [pc, #520]	@ (80053f4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d032      	beq.n	8005256 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a80      	ldr	r2, [pc, #512]	@ (80053f8 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d02a      	beq.n	8005250 <HAL_DMAEx_MultiBufferStart_IT+0xe58>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a7f      	ldr	r2, [pc, #508]	@ (80053fc <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d022      	beq.n	800524a <HAL_DMAEx_MultiBufferStart_IT+0xe52>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a7d      	ldr	r2, [pc, #500]	@ (8005400 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d01a      	beq.n	8005244 <HAL_DMAEx_MultiBufferStart_IT+0xe4c>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a7c      	ldr	r2, [pc, #496]	@ (8005404 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d012      	beq.n	800523e <HAL_DMAEx_MultiBufferStart_IT+0xe46>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a7a      	ldr	r2, [pc, #488]	@ (8005408 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00a      	beq.n	8005238 <HAL_DMAEx_MultiBufferStart_IT+0xe40>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a79      	ldr	r2, [pc, #484]	@ (800540c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d102      	bne.n	8005232 <HAL_DMAEx_MultiBufferStart_IT+0xe3a>
 800522c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005230:	e01e      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8005232:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005236:	e01b      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8005238:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800523c:	e018      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800523e:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005242:	e015      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8005244:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8005248:	e012      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800524a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800524e:	e00f      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8005250:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005254:	e00c      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8005256:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800525a:	e009      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800525c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005260:	e006      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8005262:	2304      	movs	r3, #4
 8005264:	e004      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 8005266:	2304      	movs	r3, #4
 8005268:	e002      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800526a:	2304      	movs	r3, #4
 800526c:	e000      	b.n	8005270 <HAL_DMAEx_MultiBufferStart_IT+0xe78>
 800526e:	2304      	movs	r3, #4
 8005270:	4a5a      	ldr	r2, [pc, #360]	@ (80053dc <HAL_DMAEx_MultiBufferStart_IT+0xfe4>)
 8005272:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	461a      	mov	r2, r3
 800527a:	4b65      	ldr	r3, [pc, #404]	@ (8005410 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800527c:	429a      	cmp	r2, r3
 800527e:	d95c      	bls.n	800533a <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a56      	ldr	r2, [pc, #344]	@ (80053e0 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d053      	beq.n	8005332 <HAL_DMAEx_MultiBufferStart_IT+0xf3a>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a55      	ldr	r2, [pc, #340]	@ (80053e4 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d04c      	beq.n	800532e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a53      	ldr	r2, [pc, #332]	@ (80053e8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d045      	beq.n	800532a <HAL_DMAEx_MultiBufferStart_IT+0xf32>
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a52      	ldr	r2, [pc, #328]	@ (80053ec <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d03e      	beq.n	8005326 <HAL_DMAEx_MultiBufferStart_IT+0xf2e>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a50      	ldr	r2, [pc, #320]	@ (80053f0 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d037      	beq.n	8005322 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a4f      	ldr	r2, [pc, #316]	@ (80053f4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d030      	beq.n	800531e <HAL_DMAEx_MultiBufferStart_IT+0xf26>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a4d      	ldr	r2, [pc, #308]	@ (80053f8 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d029      	beq.n	800531a <HAL_DMAEx_MultiBufferStart_IT+0xf22>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a4c      	ldr	r2, [pc, #304]	@ (80053fc <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d022      	beq.n	8005316 <HAL_DMAEx_MultiBufferStart_IT+0xf1e>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a4a      	ldr	r2, [pc, #296]	@ (8005400 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01a      	beq.n	8005310 <HAL_DMAEx_MultiBufferStart_IT+0xf18>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a49      	ldr	r2, [pc, #292]	@ (8005404 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d012      	beq.n	800530a <HAL_DMAEx_MultiBufferStart_IT+0xf12>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a47      	ldr	r2, [pc, #284]	@ (8005408 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d00a      	beq.n	8005304 <HAL_DMAEx_MultiBufferStart_IT+0xf0c>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a46      	ldr	r2, [pc, #280]	@ (800540c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d102      	bne.n	80052fe <HAL_DMAEx_MultiBufferStart_IT+0xf06>
 80052f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80052fc:	e01a      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80052fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005302:	e017      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8005304:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005308:	e014      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800530a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800530e:	e011      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8005310:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005314:	e00e      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8005316:	2340      	movs	r3, #64	@ 0x40
 8005318:	e00c      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800531a:	2340      	movs	r3, #64	@ 0x40
 800531c:	e00a      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800531e:	2340      	movs	r3, #64	@ 0x40
 8005320:	e008      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8005322:	2340      	movs	r3, #64	@ 0x40
 8005324:	e006      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8005326:	2301      	movs	r3, #1
 8005328:	e004      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800532a:	2301      	movs	r3, #1
 800532c:	e002      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800532e:	2301      	movs	r3, #1
 8005330:	e000      	b.n	8005334 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8005332:	2301      	movs	r3, #1
 8005334:	4a37      	ldr	r2, [pc, #220]	@ (8005414 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8005336:	60d3      	str	r3, [r2, #12]
 8005338:	e141      	b.n	80055be <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	461a      	mov	r2, r3
 8005340:	4b35      	ldr	r3, [pc, #212]	@ (8005418 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8005342:	429a      	cmp	r2, r3
 8005344:	d97c      	bls.n	8005440 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a25      	ldr	r2, [pc, #148]	@ (80053e0 <HAL_DMAEx_MultiBufferStart_IT+0xfe8>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d073      	beq.n	8005438 <HAL_DMAEx_MultiBufferStart_IT+0x1040>
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a23      	ldr	r2, [pc, #140]	@ (80053e4 <HAL_DMAEx_MultiBufferStart_IT+0xfec>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d06c      	beq.n	8005434 <HAL_DMAEx_MultiBufferStart_IT+0x103c>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a22      	ldr	r2, [pc, #136]	@ (80053e8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d065      	beq.n	8005430 <HAL_DMAEx_MultiBufferStart_IT+0x1038>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a20      	ldr	r2, [pc, #128]	@ (80053ec <HAL_DMAEx_MultiBufferStart_IT+0xff4>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d05e      	beq.n	800542c <HAL_DMAEx_MultiBufferStart_IT+0x1034>
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a1f      	ldr	r2, [pc, #124]	@ (80053f0 <HAL_DMAEx_MultiBufferStart_IT+0xff8>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d057      	beq.n	8005428 <HAL_DMAEx_MultiBufferStart_IT+0x1030>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a1d      	ldr	r2, [pc, #116]	@ (80053f4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d050      	beq.n	8005424 <HAL_DMAEx_MultiBufferStart_IT+0x102c>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a1c      	ldr	r2, [pc, #112]	@ (80053f8 <HAL_DMAEx_MultiBufferStart_IT+0x1000>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d049      	beq.n	8005420 <HAL_DMAEx_MultiBufferStart_IT+0x1028>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a1a      	ldr	r2, [pc, #104]	@ (80053fc <HAL_DMAEx_MultiBufferStart_IT+0x1004>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d042      	beq.n	800541c <HAL_DMAEx_MultiBufferStart_IT+0x1024>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a19      	ldr	r2, [pc, #100]	@ (8005400 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d01a      	beq.n	80053d6 <HAL_DMAEx_MultiBufferStart_IT+0xfde>
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a17      	ldr	r2, [pc, #92]	@ (8005404 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d012      	beq.n	80053d0 <HAL_DMAEx_MultiBufferStart_IT+0xfd8>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a16      	ldr	r2, [pc, #88]	@ (8005408 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d00a      	beq.n	80053ca <HAL_DMAEx_MultiBufferStart_IT+0xfd2>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a14      	ldr	r2, [pc, #80]	@ (800540c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d102      	bne.n	80053c4 <HAL_DMAEx_MultiBufferStart_IT+0xfcc>
 80053be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053c2:	e03a      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80053c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80053c8:	e037      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80053ca:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053ce:	e034      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80053d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053d4:	e031      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80053d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80053da:	e02e      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 80053dc:	40026000 	.word	0x40026000
 80053e0:	40026010 	.word	0x40026010
 80053e4:	40026410 	.word	0x40026410
 80053e8:	40026070 	.word	0x40026070
 80053ec:	40026470 	.word	0x40026470
 80053f0:	40026028 	.word	0x40026028
 80053f4:	40026428 	.word	0x40026428
 80053f8:	40026088 	.word	0x40026088
 80053fc:	40026488 	.word	0x40026488
 8005400:	40026040 	.word	0x40026040
 8005404:	40026440 	.word	0x40026440
 8005408:	400260a0 	.word	0x400260a0
 800540c:	400264a0 	.word	0x400264a0
 8005410:	40026458 	.word	0x40026458
 8005414:	40026400 	.word	0x40026400
 8005418:	400260b8 	.word	0x400260b8
 800541c:	2340      	movs	r3, #64	@ 0x40
 800541e:	e00c      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8005420:	2340      	movs	r3, #64	@ 0x40
 8005422:	e00a      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8005424:	2340      	movs	r3, #64	@ 0x40
 8005426:	e008      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8005428:	2340      	movs	r3, #64	@ 0x40
 800542a:	e006      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 800542c:	2301      	movs	r3, #1
 800542e:	e004      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8005430:	2301      	movs	r3, #1
 8005432:	e002      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8005434:	2301      	movs	r3, #1
 8005436:	e000      	b.n	800543a <HAL_DMAEx_MultiBufferStart_IT+0x1042>
 8005438:	2301      	movs	r3, #1
 800543a:	4a7b      	ldr	r2, [pc, #492]	@ (8005628 <HAL_DMAEx_MultiBufferStart_IT+0x1230>)
 800543c:	6093      	str	r3, [r2, #8]
 800543e:	e0be      	b.n	80055be <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	4b79      	ldr	r3, [pc, #484]	@ (800562c <HAL_DMAEx_MultiBufferStart_IT+0x1234>)
 8005448:	429a      	cmp	r2, r3
 800544a:	d95c      	bls.n	8005506 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a77      	ldr	r2, [pc, #476]	@ (8005630 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d053      	beq.n	80054fe <HAL_DMAEx_MultiBufferStart_IT+0x1106>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a76      	ldr	r2, [pc, #472]	@ (8005634 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d04c      	beq.n	80054fa <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a74      	ldr	r2, [pc, #464]	@ (8005638 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d045      	beq.n	80054f6 <HAL_DMAEx_MultiBufferStart_IT+0x10fe>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a73      	ldr	r2, [pc, #460]	@ (800563c <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d03e      	beq.n	80054f2 <HAL_DMAEx_MultiBufferStart_IT+0x10fa>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a71      	ldr	r2, [pc, #452]	@ (8005640 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d037      	beq.n	80054ee <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a70      	ldr	r2, [pc, #448]	@ (8005644 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d030      	beq.n	80054ea <HAL_DMAEx_MultiBufferStart_IT+0x10f2>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a6e      	ldr	r2, [pc, #440]	@ (8005648 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d029      	beq.n	80054e6 <HAL_DMAEx_MultiBufferStart_IT+0x10ee>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a6d      	ldr	r2, [pc, #436]	@ (800564c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d022      	beq.n	80054e2 <HAL_DMAEx_MultiBufferStart_IT+0x10ea>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a6b      	ldr	r2, [pc, #428]	@ (8005650 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d01a      	beq.n	80054dc <HAL_DMAEx_MultiBufferStart_IT+0x10e4>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a6a      	ldr	r2, [pc, #424]	@ (8005654 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d012      	beq.n	80054d6 <HAL_DMAEx_MultiBufferStart_IT+0x10de>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a68      	ldr	r2, [pc, #416]	@ (8005658 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d00a      	beq.n	80054d0 <HAL_DMAEx_MultiBufferStart_IT+0x10d8>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a67      	ldr	r2, [pc, #412]	@ (800565c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d102      	bne.n	80054ca <HAL_DMAEx_MultiBufferStart_IT+0x10d2>
 80054c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054c8:	e01a      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80054ce:	e017      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054d4:	e014      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054d6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054da:	e011      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80054e0:	e00e      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054e2:	2340      	movs	r3, #64	@ 0x40
 80054e4:	e00c      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054e6:	2340      	movs	r3, #64	@ 0x40
 80054e8:	e00a      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054ea:	2340      	movs	r3, #64	@ 0x40
 80054ec:	e008      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054ee:	2340      	movs	r3, #64	@ 0x40
 80054f0:	e006      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e004      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e002      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80054fe:	2301      	movs	r3, #1
 8005500:	4a57      	ldr	r2, [pc, #348]	@ (8005660 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8005502:	60d3      	str	r3, [r2, #12]
 8005504:	e05b      	b.n	80055be <HAL_DMAEx_MultiBufferStart_IT+0x11c6>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a49      	ldr	r2, [pc, #292]	@ (8005630 <HAL_DMAEx_MultiBufferStart_IT+0x1238>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d053      	beq.n	80055b8 <HAL_DMAEx_MultiBufferStart_IT+0x11c0>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a47      	ldr	r2, [pc, #284]	@ (8005634 <HAL_DMAEx_MultiBufferStart_IT+0x123c>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d04c      	beq.n	80055b4 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a46      	ldr	r2, [pc, #280]	@ (8005638 <HAL_DMAEx_MultiBufferStart_IT+0x1240>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d045      	beq.n	80055b0 <HAL_DMAEx_MultiBufferStart_IT+0x11b8>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a44      	ldr	r2, [pc, #272]	@ (800563c <HAL_DMAEx_MultiBufferStart_IT+0x1244>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d03e      	beq.n	80055ac <HAL_DMAEx_MultiBufferStart_IT+0x11b4>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a43      	ldr	r2, [pc, #268]	@ (8005640 <HAL_DMAEx_MultiBufferStart_IT+0x1248>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d037      	beq.n	80055a8 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a41      	ldr	r2, [pc, #260]	@ (8005644 <HAL_DMAEx_MultiBufferStart_IT+0x124c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d030      	beq.n	80055a4 <HAL_DMAEx_MultiBufferStart_IT+0x11ac>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a40      	ldr	r2, [pc, #256]	@ (8005648 <HAL_DMAEx_MultiBufferStart_IT+0x1250>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d029      	beq.n	80055a0 <HAL_DMAEx_MultiBufferStart_IT+0x11a8>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a3e      	ldr	r2, [pc, #248]	@ (800564c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d022      	beq.n	800559c <HAL_DMAEx_MultiBufferStart_IT+0x11a4>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a3d      	ldr	r2, [pc, #244]	@ (8005650 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d01a      	beq.n	8005596 <HAL_DMAEx_MultiBufferStart_IT+0x119e>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a3b      	ldr	r2, [pc, #236]	@ (8005654 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d012      	beq.n	8005590 <HAL_DMAEx_MultiBufferStart_IT+0x1198>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a3a      	ldr	r2, [pc, #232]	@ (8005658 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d00a      	beq.n	800558a <HAL_DMAEx_MultiBufferStart_IT+0x1192>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a38      	ldr	r2, [pc, #224]	@ (800565c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d102      	bne.n	8005584 <HAL_DMAEx_MultiBufferStart_IT+0x118c>
 800557e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005582:	e01a      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005584:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005588:	e017      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800558a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800558e:	e014      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005594:	e011      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8005596:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800559a:	e00e      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 800559c:	2340      	movs	r3, #64	@ 0x40
 800559e:	e00c      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80055a0:	2340      	movs	r3, #64	@ 0x40
 80055a2:	e00a      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80055a4:	2340      	movs	r3, #64	@ 0x40
 80055a6:	e008      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80055a8:	2340      	movs	r3, #64	@ 0x40
 80055aa:	e006      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e004      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80055b0:	2301      	movs	r3, #1
 80055b2:	e002      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 80055b8:	2301      	movs	r3, #1
 80055ba:	4a29      	ldr	r2, [pc, #164]	@ (8005660 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80055bc:	6093      	str	r3, [r2, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f042 0216 	orr.w	r2, r2, #22
 80055cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	695a      	ldr	r2, [r3, #20]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80055dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <HAL_DMAEx_MultiBufferStart_IT+0x11f6>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <HAL_DMAEx_MultiBufferStart_IT+0x1206>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f042 0208 	orr.w	r2, r2, #8
 80055fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f042 0201 	orr.w	r2, r2, #1
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	e005      	b.n	800561c <HAL_DMAEx_MultiBufferStart_IT+0x1224>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005618:	2302      	movs	r3, #2
 800561a:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 800561c:	7dfb      	ldrb	r3, [r7, #23]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40026400 	.word	0x40026400
 800562c:	40026058 	.word	0x40026058
 8005630:	40026010 	.word	0x40026010
 8005634:	40026410 	.word	0x40026410
 8005638:	40026070 	.word	0x40026070
 800563c:	40026470 	.word	0x40026470
 8005640:	40026028 	.word	0x40026028
 8005644:	40026428 	.word	0x40026428
 8005648:	40026088 	.word	0x40026088
 800564c:	40026488 	.word	0x40026488
 8005650:	40026040 	.word	0x40026040
 8005654:	40026440 	.word	0x40026440
 8005658:	400260a0 	.word	0x400260a0
 800565c:	400264a0 	.word	0x400264a0
 8005660:	40026000 	.word	0x40026000

08005664 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8005664:	b480      	push	{r7}
 8005666:	b085      	sub	sp, #20
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	4613      	mov	r3, r2
 8005670:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8005672:	79fb      	ldrb	r3, [r7, #7]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d104      	bne.n	8005682 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	60da      	str	r2, [r3, #12]
 8005680:	e003      	b.n	800568a <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68ba      	ldr	r2, [r7, #8]
 8005688:	611a      	str	r2, [r3, #16]
  }
  
  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005698:	b480      	push	{r7}
 800569a:	b085      	sub	sp, #20
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	607a      	str	r2, [r7, #4]
 80056a4:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	2b40      	cmp	r3, #64	@ 0x40
 80056b4:	d108      	bne.n	80056c8 <DMA_MultiBufferSetConfig+0x30>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68ba      	ldr	r2, [r7, #8]
 80056c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80056c6:	e007      	b.n	80056d8 <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68ba      	ldr	r2, [r7, #8]
 80056ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	60da      	str	r2, [r3, #12]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b089      	sub	sp, #36	@ 0x24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80056f6:	2300      	movs	r3, #0
 80056f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80056fe:	2300      	movs	r3, #0
 8005700:	61fb      	str	r3, [r7, #28]
 8005702:	e175      	b.n	80059f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005704:	2201      	movs	r2, #1
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	4013      	ands	r3, r2
 8005716:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	429a      	cmp	r2, r3
 800571e:	f040 8164 	bne.w	80059ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	f003 0303 	and.w	r3, r3, #3
 800572a:	2b01      	cmp	r3, #1
 800572c:	d005      	beq.n	800573a <HAL_GPIO_Init+0x56>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d130      	bne.n	800579c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	005b      	lsls	r3, r3, #1
 8005744:	2203      	movs	r2, #3
 8005746:	fa02 f303 	lsl.w	r3, r2, r3
 800574a:	43db      	mvns	r3, r3
 800574c:	69ba      	ldr	r2, [r7, #24]
 800574e:	4013      	ands	r3, r2
 8005750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	68da      	ldr	r2, [r3, #12]
 8005756:	69fb      	ldr	r3, [r7, #28]
 8005758:	005b      	lsls	r3, r3, #1
 800575a:	fa02 f303 	lsl.w	r3, r2, r3
 800575e:	69ba      	ldr	r2, [r7, #24]
 8005760:	4313      	orrs	r3, r2
 8005762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69ba      	ldr	r2, [r7, #24]
 8005768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005770:	2201      	movs	r2, #1
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	fa02 f303 	lsl.w	r3, r2, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	69ba      	ldr	r2, [r7, #24]
 800577c:	4013      	ands	r3, r2
 800577e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	091b      	lsrs	r3, r3, #4
 8005786:	f003 0201 	and.w	r2, r3, #1
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	fa02 f303 	lsl.w	r3, r2, r3
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	4313      	orrs	r3, r2
 8005794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	69ba      	ldr	r2, [r7, #24]
 800579a:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f003 0303 	and.w	r3, r3, #3
 80057a4:	2b03      	cmp	r3, #3
 80057a6:	d017      	beq.n	80057d8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	2203      	movs	r2, #3
 80057b4:	fa02 f303 	lsl.w	r3, r2, r3
 80057b8:	43db      	mvns	r3, r3
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	4013      	ands	r3, r2
 80057be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	689a      	ldr	r2, [r3, #8]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4313      	orrs	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685b      	ldr	r3, [r3, #4]
 80057dc:	f003 0303 	and.w	r3, r3, #3
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d123      	bne.n	800582c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	08da      	lsrs	r2, r3, #3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	3208      	adds	r2, #8
 80057ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	220f      	movs	r2, #15
 80057fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005800:	43db      	mvns	r3, r3
 8005802:	69ba      	ldr	r2, [r7, #24]
 8005804:	4013      	ands	r3, r2
 8005806:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691a      	ldr	r2, [r3, #16]
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	69ba      	ldr	r2, [r7, #24]
 800581a:	4313      	orrs	r3, r2
 800581c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	08da      	lsrs	r2, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	3208      	adds	r2, #8
 8005826:	69b9      	ldr	r1, [r7, #24]
 8005828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005832:	69fb      	ldr	r3, [r7, #28]
 8005834:	005b      	lsls	r3, r3, #1
 8005836:	2203      	movs	r2, #3
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	43db      	mvns	r3, r3
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4013      	ands	r3, r2
 8005842:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f003 0203 	and.w	r2, r3, #3
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	005b      	lsls	r3, r3, #1
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	69ba      	ldr	r2, [r7, #24]
 8005856:	4313      	orrs	r3, r2
 8005858:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 80be 	beq.w	80059ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800586e:	4b66      	ldr	r3, [pc, #408]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 8005870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005872:	4a65      	ldr	r2, [pc, #404]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 8005874:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005878:	6453      	str	r3, [r2, #68]	@ 0x44
 800587a:	4b63      	ldr	r3, [pc, #396]	@ (8005a08 <HAL_GPIO_Init+0x324>)
 800587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800587e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005882:	60fb      	str	r3, [r7, #12]
 8005884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005886:	4a61      	ldr	r2, [pc, #388]	@ (8005a0c <HAL_GPIO_Init+0x328>)
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	089b      	lsrs	r3, r3, #2
 800588c:	3302      	adds	r3, #2
 800588e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005892:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0303 	and.w	r3, r3, #3
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	220f      	movs	r2, #15
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	43db      	mvns	r3, r3
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4013      	ands	r3, r2
 80058a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	4a58      	ldr	r2, [pc, #352]	@ (8005a10 <HAL_GPIO_Init+0x32c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d037      	beq.n	8005922 <HAL_GPIO_Init+0x23e>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	4a57      	ldr	r2, [pc, #348]	@ (8005a14 <HAL_GPIO_Init+0x330>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d031      	beq.n	800591e <HAL_GPIO_Init+0x23a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	4a56      	ldr	r2, [pc, #344]	@ (8005a18 <HAL_GPIO_Init+0x334>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d02b      	beq.n	800591a <HAL_GPIO_Init+0x236>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a55      	ldr	r2, [pc, #340]	@ (8005a1c <HAL_GPIO_Init+0x338>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d025      	beq.n	8005916 <HAL_GPIO_Init+0x232>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a54      	ldr	r2, [pc, #336]	@ (8005a20 <HAL_GPIO_Init+0x33c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d01f      	beq.n	8005912 <HAL_GPIO_Init+0x22e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a53      	ldr	r2, [pc, #332]	@ (8005a24 <HAL_GPIO_Init+0x340>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d019      	beq.n	800590e <HAL_GPIO_Init+0x22a>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a52      	ldr	r2, [pc, #328]	@ (8005a28 <HAL_GPIO_Init+0x344>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d013      	beq.n	800590a <HAL_GPIO_Init+0x226>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a51      	ldr	r2, [pc, #324]	@ (8005a2c <HAL_GPIO_Init+0x348>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00d      	beq.n	8005906 <HAL_GPIO_Init+0x222>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a50      	ldr	r2, [pc, #320]	@ (8005a30 <HAL_GPIO_Init+0x34c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d007      	beq.n	8005902 <HAL_GPIO_Init+0x21e>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a4f      	ldr	r2, [pc, #316]	@ (8005a34 <HAL_GPIO_Init+0x350>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d101      	bne.n	80058fe <HAL_GPIO_Init+0x21a>
 80058fa:	2309      	movs	r3, #9
 80058fc:	e012      	b.n	8005924 <HAL_GPIO_Init+0x240>
 80058fe:	230a      	movs	r3, #10
 8005900:	e010      	b.n	8005924 <HAL_GPIO_Init+0x240>
 8005902:	2308      	movs	r3, #8
 8005904:	e00e      	b.n	8005924 <HAL_GPIO_Init+0x240>
 8005906:	2307      	movs	r3, #7
 8005908:	e00c      	b.n	8005924 <HAL_GPIO_Init+0x240>
 800590a:	2306      	movs	r3, #6
 800590c:	e00a      	b.n	8005924 <HAL_GPIO_Init+0x240>
 800590e:	2305      	movs	r3, #5
 8005910:	e008      	b.n	8005924 <HAL_GPIO_Init+0x240>
 8005912:	2304      	movs	r3, #4
 8005914:	e006      	b.n	8005924 <HAL_GPIO_Init+0x240>
 8005916:	2303      	movs	r3, #3
 8005918:	e004      	b.n	8005924 <HAL_GPIO_Init+0x240>
 800591a:	2302      	movs	r3, #2
 800591c:	e002      	b.n	8005924 <HAL_GPIO_Init+0x240>
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <HAL_GPIO_Init+0x240>
 8005922:	2300      	movs	r3, #0
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	f002 0203 	and.w	r2, r2, #3
 800592a:	0092      	lsls	r2, r2, #2
 800592c:	4093      	lsls	r3, r2
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	4313      	orrs	r3, r2
 8005932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005934:	4935      	ldr	r1, [pc, #212]	@ (8005a0c <HAL_GPIO_Init+0x328>)
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	089b      	lsrs	r3, r3, #2
 800593a:	3302      	adds	r3, #2
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005942:	4b3d      	ldr	r3, [pc, #244]	@ (8005a38 <HAL_GPIO_Init+0x354>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	43db      	mvns	r3, r3
 800594c:	69ba      	ldr	r2, [r7, #24]
 800594e:	4013      	ands	r3, r2
 8005950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	685b      	ldr	r3, [r3, #4]
 8005956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d003      	beq.n	8005966 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800595e:	69ba      	ldr	r2, [r7, #24]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005966:	4a34      	ldr	r2, [pc, #208]	@ (8005a38 <HAL_GPIO_Init+0x354>)
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800596c:	4b32      	ldr	r3, [pc, #200]	@ (8005a38 <HAL_GPIO_Init+0x354>)
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	43db      	mvns	r3, r3
 8005976:	69ba      	ldr	r2, [r7, #24]
 8005978:	4013      	ands	r3, r2
 800597a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	4313      	orrs	r3, r2
 800598e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005990:	4a29      	ldr	r2, [pc, #164]	@ (8005a38 <HAL_GPIO_Init+0x354>)
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005996:	4b28      	ldr	r3, [pc, #160]	@ (8005a38 <HAL_GPIO_Init+0x354>)
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	43db      	mvns	r3, r3
 80059a0:	69ba      	ldr	r2, [r7, #24]
 80059a2:	4013      	ands	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d003      	beq.n	80059ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059ba:	4a1f      	ldr	r2, [pc, #124]	@ (8005a38 <HAL_GPIO_Init+0x354>)
 80059bc:	69bb      	ldr	r3, [r7, #24]
 80059be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80059c0:	4b1d      	ldr	r3, [pc, #116]	@ (8005a38 <HAL_GPIO_Init+0x354>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	43db      	mvns	r3, r3
 80059ca:	69ba      	ldr	r2, [r7, #24]
 80059cc:	4013      	ands	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d003      	beq.n	80059e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80059e4:	4a14      	ldr	r2, [pc, #80]	@ (8005a38 <HAL_GPIO_Init+0x354>)
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	3301      	adds	r3, #1
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	2b0f      	cmp	r3, #15
 80059f4:	f67f ae86 	bls.w	8005704 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80059f8:	bf00      	nop
 80059fa:	bf00      	nop
 80059fc:	3724      	adds	r7, #36	@ 0x24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	40013800 	.word	0x40013800
 8005a10:	40020000 	.word	0x40020000
 8005a14:	40020400 	.word	0x40020400
 8005a18:	40020800 	.word	0x40020800
 8005a1c:	40020c00 	.word	0x40020c00
 8005a20:	40021000 	.word	0x40021000
 8005a24:	40021400 	.word	0x40021400
 8005a28:	40021800 	.word	0x40021800
 8005a2c:	40021c00 	.word	0x40021c00
 8005a30:	40022000 	.word	0x40022000
 8005a34:	40022400 	.word	0x40022400
 8005a38:	40013c00 	.word	0x40013c00

08005a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	460b      	mov	r3, r1
 8005a46:	807b      	strh	r3, [r7, #2]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005a4c:	787b      	ldrb	r3, [r7, #1]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005a52:	887a      	ldrh	r2, [r7, #2]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005a58:	e003      	b.n	8005a62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8005a5a:	887b      	ldrh	r3, [r7, #2]
 8005a5c:	041a      	lsls	r2, r3, #16
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	619a      	str	r2, [r3, #24]
}
 8005a62:	bf00      	nop
 8005a64:	370c      	adds	r7, #12
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
	...

08005a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e08b      	b.n	8005b9a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d106      	bne.n	8005a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f7fc fe9a 	bl	80027d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2224      	movs	r2, #36	@ 0x24
 8005aa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681a      	ldr	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 0201 	bic.w	r2, r2, #1
 8005ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685a      	ldr	r2, [r3, #4]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005ac0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005ad0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d107      	bne.n	8005aea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	689a      	ldr	r2, [r3, #8]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005ae6:	609a      	str	r2, [r3, #8]
 8005ae8:	e006      	b.n	8005af8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8005af6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d108      	bne.n	8005b12 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005b0e:	605a      	str	r2, [r3, #4]
 8005b10:	e007      	b.n	8005b22 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b20:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6859      	ldr	r1, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba4 <HAL_I2C_Init+0x134>)
 8005b2e:	430b      	orrs	r3, r1
 8005b30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	691a      	ldr	r2, [r3, #16]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69d9      	ldr	r1, [r3, #28]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6a1a      	ldr	r2, [r3, #32]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0201 	orr.w	r2, r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2220      	movs	r2, #32
 8005b86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	02008000 	.word	0x02008000

08005ba8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b088      	sub	sp, #32
 8005bac:	af02      	add	r7, sp, #8
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	817b      	strh	r3, [r7, #10]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b20      	cmp	r3, #32
 8005bc6:	f040 80fd 	bne.w	8005dc4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_I2C_Master_Transmit+0x30>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e0f6      	b.n	8005dc6 <HAL_I2C_Master_Transmit+0x21e>
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005be0:	f7fd fbd4 	bl	800338c <HAL_GetTick>
 8005be4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005be6:	693b      	ldr	r3, [r7, #16]
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	2319      	movs	r3, #25
 8005bec:	2201      	movs	r2, #1
 8005bee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bf2:	68f8      	ldr	r0, [r7, #12]
 8005bf4:	f000 fa0a 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d001      	beq.n	8005c02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e0e1      	b.n	8005dc6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2221      	movs	r2, #33	@ 0x21
 8005c06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2210      	movs	r2, #16
 8005c0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	893a      	ldrh	r2, [r7, #8]
 8005c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	2bff      	cmp	r3, #255	@ 0xff
 8005c32:	d906      	bls.n	8005c42 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	22ff      	movs	r2, #255	@ 0xff
 8005c38:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8005c3a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c3e:	617b      	str	r3, [r7, #20]
 8005c40:	e007      	b.n	8005c52 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8005c4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c50:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d024      	beq.n	8005ca4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5e:	781a      	ldrb	r2, [r3, #0]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	3301      	adds	r3, #1
 8005c92:	b2da      	uxtb	r2, r3
 8005c94:	8979      	ldrh	r1, [r7, #10]
 8005c96:	4b4e      	ldr	r3, [pc, #312]	@ (8005dd0 <HAL_I2C_Master_Transmit+0x228>)
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 fc05 	bl	80064ac <I2C_TransferConfig>
 8005ca2:	e066      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	8979      	ldrh	r1, [r7, #10]
 8005cac:	4b48      	ldr	r3, [pc, #288]	@ (8005dd0 <HAL_I2C_Master_Transmit+0x228>)
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	68f8      	ldr	r0, [r7, #12]
 8005cb4:	f000 fbfa 	bl	80064ac <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005cb8:	e05b      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	6a39      	ldr	r1, [r7, #32]
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f9fd 	bl	80060be <I2C_WaitOnTXISFlagUntilTimeout>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e07b      	b.n	8005dc6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cd2:	781a      	ldrb	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d034      	beq.n	8005d72 <HAL_I2C_Master_Transmit+0x1ca>
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d130      	bne.n	8005d72 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	2200      	movs	r2, #0
 8005d18:	2180      	movs	r1, #128	@ 0x80
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f976 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e04d      	b.n	8005dc6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2bff      	cmp	r3, #255	@ 0xff
 8005d32:	d90e      	bls.n	8005d52 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	22ff      	movs	r2, #255	@ 0xff
 8005d38:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	8979      	ldrh	r1, [r7, #10]
 8005d42:	2300      	movs	r3, #0
 8005d44:	9300      	str	r3, [sp, #0]
 8005d46:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f000 fbae 	bl	80064ac <I2C_TransferConfig>
 8005d50:	e00f      	b.n	8005d72 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	8979      	ldrh	r1, [r7, #10]
 8005d64:	2300      	movs	r3, #0
 8005d66:	9300      	str	r3, [sp, #0]
 8005d68:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d6c:	68f8      	ldr	r0, [r7, #12]
 8005d6e:	f000 fb9d 	bl	80064ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d76:	b29b      	uxth	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d19e      	bne.n	8005cba <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	6a39      	ldr	r1, [r7, #32]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f9e3 	bl	800614c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d001      	beq.n	8005d90 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	e01a      	b.n	8005dc6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2220      	movs	r2, #32
 8005d96:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6859      	ldr	r1, [r3, #4]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	4b0c      	ldr	r3, [pc, #48]	@ (8005dd4 <HAL_I2C_Master_Transmit+0x22c>)
 8005da4:	400b      	ands	r3, r1
 8005da6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	2200      	movs	r2, #0
 8005db4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	e000      	b.n	8005dc6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005dc4:	2302      	movs	r3, #2
  }
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3718      	adds	r7, #24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	80002000 	.word	0x80002000
 8005dd4:	fe00e800 	.word	0xfe00e800

08005dd8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b088      	sub	sp, #32
 8005ddc:	af02      	add	r7, sp, #8
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	607a      	str	r2, [r7, #4]
 8005de2:	461a      	mov	r2, r3
 8005de4:	460b      	mov	r3, r1
 8005de6:	817b      	strh	r3, [r7, #10]
 8005de8:	4613      	mov	r3, r2
 8005dea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b20      	cmp	r3, #32
 8005df6:	f040 80db 	bne.w	8005fb0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_I2C_Master_Receive+0x30>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e0d4      	b.n	8005fb2 <HAL_I2C_Master_Receive+0x1da>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e10:	f7fd fabc 	bl	800338c <HAL_GetTick>
 8005e14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e16:	697b      	ldr	r3, [r7, #20]
 8005e18:	9300      	str	r3, [sp, #0]
 8005e1a:	2319      	movs	r3, #25
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f8f2 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e0bf      	b.n	8005fb2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2222      	movs	r2, #34	@ 0x22
 8005e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2210      	movs	r2, #16
 8005e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	893a      	ldrh	r2, [r7, #8]
 8005e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2bff      	cmp	r3, #255	@ 0xff
 8005e62:	d90e      	bls.n	8005e82 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2201      	movs	r2, #1
 8005e68:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e6e:	b2da      	uxtb	r2, r3
 8005e70:	8979      	ldrh	r1, [r7, #10]
 8005e72:	4b52      	ldr	r3, [pc, #328]	@ (8005fbc <HAL_I2C_Master_Receive+0x1e4>)
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fb16 	bl	80064ac <I2C_TransferConfig>
 8005e80:	e06d      	b.n	8005f5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e90:	b2da      	uxtb	r2, r3
 8005e92:	8979      	ldrh	r1, [r7, #10]
 8005e94:	4b49      	ldr	r3, [pc, #292]	@ (8005fbc <HAL_I2C_Master_Receive+0x1e4>)
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f000 fb05 	bl	80064ac <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005ea2:	e05c      	b.n	8005f5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	6a39      	ldr	r1, [r7, #32]
 8005ea8:	68f8      	ldr	r0, [r7, #12]
 8005eaa:	f000 f993 	bl	80061d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	e07c      	b.n	8005fb2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec2:	b2d2      	uxtb	r2, r2
 8005ec4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	3b01      	subs	r3, #1
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d034      	beq.n	8005f5e <HAL_I2C_Master_Receive+0x186>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d130      	bne.n	8005f5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2200      	movs	r2, #0
 8005f04:	2180      	movs	r1, #128	@ 0x80
 8005f06:	68f8      	ldr	r0, [r7, #12]
 8005f08:	f000 f880 	bl	800600c <I2C_WaitOnFlagUntilTimeout>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d001      	beq.n	8005f16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e04d      	b.n	8005fb2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	2bff      	cmp	r3, #255	@ 0xff
 8005f1e:	d90e      	bls.n	8005f3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	22ff      	movs	r2, #255	@ 0xff
 8005f24:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f2a:	b2da      	uxtb	r2, r3
 8005f2c:	8979      	ldrh	r1, [r7, #10]
 8005f2e:	2300      	movs	r3, #0
 8005f30:	9300      	str	r3, [sp, #0]
 8005f32:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f36:	68f8      	ldr	r0, [r7, #12]
 8005f38:	f000 fab8 	bl	80064ac <I2C_TransferConfig>
 8005f3c:	e00f      	b.n	8005f5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	8979      	ldrh	r1, [r7, #10]
 8005f50:	2300      	movs	r3, #0
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f58:	68f8      	ldr	r0, [r7, #12]
 8005f5a:	f000 faa7 	bl	80064ac <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d19d      	bne.n	8005ea4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	6a39      	ldr	r1, [r7, #32]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f8ed 	bl	800614c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e01a      	b.n	8005fb2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2220      	movs	r2, #32
 8005f82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	6859      	ldr	r1, [r3, #4]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc0 <HAL_I2C_Master_Receive+0x1e8>)
 8005f90:	400b      	ands	r3, r1
 8005f92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	e000      	b.n	8005fb2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005fb0:	2302      	movs	r3, #2
  }
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3718      	adds	r7, #24
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	80002400 	.word	0x80002400
 8005fc0:	fe00e800 	.word	0xfe00e800

08005fc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d103      	bne.n	8005fe2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d007      	beq.n	8006000 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699a      	ldr	r2, [r3, #24]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f042 0201 	orr.w	r2, r2, #1
 8005ffe:	619a      	str	r2, [r3, #24]
  }
}
 8006000:	bf00      	nop
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	603b      	str	r3, [r7, #0]
 8006018:	4613      	mov	r3, r2
 800601a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800601c:	e03b      	b.n	8006096 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800601e:	69ba      	ldr	r2, [r7, #24]
 8006020:	6839      	ldr	r1, [r7, #0]
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f962 	bl	80062ec <I2C_IsErrorOccurred>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d001      	beq.n	8006032 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e041      	b.n	80060b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d02d      	beq.n	8006096 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603a:	f7fd f9a7 	bl	800338c <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	429a      	cmp	r2, r3
 8006048:	d302      	bcc.n	8006050 <I2C_WaitOnFlagUntilTimeout+0x44>
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d122      	bne.n	8006096 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	4013      	ands	r3, r2
 800605a:	68ba      	ldr	r2, [r7, #8]
 800605c:	429a      	cmp	r2, r3
 800605e:	bf0c      	ite	eq
 8006060:	2301      	moveq	r3, #1
 8006062:	2300      	movne	r3, #0
 8006064:	b2db      	uxtb	r3, r3
 8006066:	461a      	mov	r2, r3
 8006068:	79fb      	ldrb	r3, [r7, #7]
 800606a:	429a      	cmp	r2, r3
 800606c:	d113      	bne.n	8006096 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006072:	f043 0220 	orr.w	r2, r3, #32
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	2220      	movs	r2, #32
 800607e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e00f      	b.n	80060b6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	699a      	ldr	r2, [r3, #24]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4013      	ands	r3, r2
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	bf0c      	ite	eq
 80060a6:	2301      	moveq	r3, #1
 80060a8:	2300      	movne	r3, #0
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	461a      	mov	r2, r3
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d0b4      	beq.n	800601e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}

080060be <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	60f8      	str	r0, [r7, #12]
 80060c6:	60b9      	str	r1, [r7, #8]
 80060c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80060ca:	e033      	b.n	8006134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	68b9      	ldr	r1, [r7, #8]
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f000 f90b 	bl	80062ec <I2C_IsErrorOccurred>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e031      	b.n	8006144 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060e6:	d025      	beq.n	8006134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e8:	f7fd f950 	bl	800338c <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d302      	bcc.n	80060fe <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d11a      	bne.n	8006134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b02      	cmp	r3, #2
 800610a:	d013      	beq.n	8006134 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006110:	f043 0220 	orr.w	r2, r3, #32
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e007      	b.n	8006144 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b02      	cmp	r3, #2
 8006140:	d1c4      	bne.n	80060cc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006158:	e02f      	b.n	80061ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	68b9      	ldr	r1, [r7, #8]
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f8c4 	bl	80062ec <I2C_IsErrorOccurred>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e02d      	b.n	80061ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800616e:	f7fd f90d 	bl	800338c <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	429a      	cmp	r2, r3
 800617c:	d302      	bcc.n	8006184 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d11a      	bne.n	80061ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f003 0320 	and.w	r3, r3, #32
 800618e:	2b20      	cmp	r3, #32
 8006190:	d013      	beq.n	80061ba <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006196:	f043 0220 	orr.w	r2, r3, #32
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2220      	movs	r2, #32
 80061a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e007      	b.n	80061ca <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	699b      	ldr	r3, [r3, #24]
 80061c0:	f003 0320 	and.w	r3, r3, #32
 80061c4:	2b20      	cmp	r3, #32
 80061c6:	d1c8      	bne.n	800615a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b086      	sub	sp, #24
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80061e0:	2300      	movs	r3, #0
 80061e2:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80061e4:	e071      	b.n	80062ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	68b9      	ldr	r1, [r7, #8]
 80061ea:	68f8      	ldr	r0, [r7, #12]
 80061ec:	f000 f87e 	bl	80062ec <I2C_IsErrorOccurred>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d001      	beq.n	80061fa <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 0320 	and.w	r3, r3, #32
 8006204:	2b20      	cmp	r3, #32
 8006206:	d13b      	bne.n	8006280 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d138      	bne.n	8006280 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	699b      	ldr	r3, [r3, #24]
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b04      	cmp	r3, #4
 800621a:	d105      	bne.n	8006228 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	d001      	beq.n	8006228 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006224:	2300      	movs	r3, #0
 8006226:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f003 0310 	and.w	r3, r3, #16
 8006232:	2b10      	cmp	r3, #16
 8006234:	d121      	bne.n	800627a <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2210      	movs	r2, #16
 800623c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2204      	movs	r2, #4
 8006242:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2220      	movs	r2, #32
 800624a:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6859      	ldr	r1, [r3, #4]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	4b24      	ldr	r3, [pc, #144]	@ (80062e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8006258:	400b      	ands	r3, r1
 800625a:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	75fb      	strb	r3, [r7, #23]
 8006278:	e002      	b.n	8006280 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006280:	f7fd f884 	bl	800338c <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	429a      	cmp	r2, r3
 800628e:	d302      	bcc.n	8006296 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d119      	bne.n	80062ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006296:	7dfb      	ldrb	r3, [r7, #23]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d116      	bne.n	80062ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	f003 0304 	and.w	r3, r3, #4
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d00f      	beq.n	80062ca <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062ae:	f043 0220 	orr.w	r2, r3, #32
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2220      	movs	r2, #32
 80062ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80062c6:	2301      	movs	r3, #1
 80062c8:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	f003 0304 	and.w	r3, r3, #4
 80062d4:	2b04      	cmp	r3, #4
 80062d6:	d002      	beq.n	80062de <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d083      	beq.n	80061e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80062de:	7dfb      	ldrb	r3, [r7, #23]
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3718      	adds	r7, #24
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	fe00e800 	.word	0xfe00e800

080062ec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	@ 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f8:	2300      	movs	r3, #0
 80062fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006306:	2300      	movs	r3, #0
 8006308:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f003 0310 	and.w	r3, r3, #16
 8006314:	2b00      	cmp	r3, #0
 8006316:	d068      	beq.n	80063ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	2210      	movs	r2, #16
 800631e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006320:	e049      	b.n	80063b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006328:	d045      	beq.n	80063b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800632a:	f7fd f82f 	bl	800338c <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	68ba      	ldr	r2, [r7, #8]
 8006336:	429a      	cmp	r2, r3
 8006338:	d302      	bcc.n	8006340 <I2C_IsErrorOccurred+0x54>
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d13a      	bne.n	80063b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800634a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006352:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	699b      	ldr	r3, [r3, #24]
 800635a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800635e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006362:	d121      	bne.n	80063a8 <I2C_IsErrorOccurred+0xbc>
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800636a:	d01d      	beq.n	80063a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800636c:	7cfb      	ldrb	r3, [r7, #19]
 800636e:	2b20      	cmp	r3, #32
 8006370:	d01a      	beq.n	80063a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006380:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006382:	f7fd f803 	bl	800338c <HAL_GetTick>
 8006386:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006388:	e00e      	b.n	80063a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800638a:	f7fc ffff 	bl	800338c <HAL_GetTick>
 800638e:	4602      	mov	r2, r0
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	1ad3      	subs	r3, r2, r3
 8006394:	2b19      	cmp	r3, #25
 8006396:	d907      	bls.n	80063a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006398:	6a3b      	ldr	r3, [r7, #32]
 800639a:	f043 0320 	orr.w	r3, r3, #32
 800639e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80063a6:	e006      	b.n	80063b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f003 0320 	and.w	r3, r3, #32
 80063b2:	2b20      	cmp	r3, #32
 80063b4:	d1e9      	bne.n	800638a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	f003 0320 	and.w	r3, r3, #32
 80063c0:	2b20      	cmp	r3, #32
 80063c2:	d003      	beq.n	80063cc <I2C_IsErrorOccurred+0xe0>
 80063c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d0aa      	beq.n	8006322 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80063cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d103      	bne.n	80063dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2220      	movs	r2, #32
 80063da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80063dc:	6a3b      	ldr	r3, [r7, #32]
 80063de:	f043 0304 	orr.w	r3, r3, #4
 80063e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d00b      	beq.n	8006414 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80063fc:	6a3b      	ldr	r3, [r7, #32]
 80063fe:	f043 0301 	orr.w	r3, r3, #1
 8006402:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800640c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800640e:	2301      	movs	r3, #1
 8006410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00b      	beq.n	8006436 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800641e:	6a3b      	ldr	r3, [r7, #32]
 8006420:	f043 0308 	orr.w	r3, r3, #8
 8006424:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800642e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006430:	2301      	movs	r3, #1
 8006432:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006436:	69bb      	ldr	r3, [r7, #24]
 8006438:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	f043 0302 	orr.w	r3, r3, #2
 8006446:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006450:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006452:	2301      	movs	r3, #1
 8006454:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006458:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01c      	beq.n	800649a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff fdaf 	bl	8005fc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	6859      	ldr	r1, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	4b0d      	ldr	r3, [pc, #52]	@ (80064a8 <I2C_IsErrorOccurred+0x1bc>)
 8006472:	400b      	ands	r3, r1
 8006474:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	431a      	orrs	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2220      	movs	r2, #32
 8006486:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2200      	movs	r2, #0
 8006496:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800649a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3728      	adds	r7, #40	@ 0x28
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	fe00e800 	.word	0xfe00e800

080064ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b087      	sub	sp, #28
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	607b      	str	r3, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	817b      	strh	r3, [r7, #10]
 80064ba:	4613      	mov	r3, r2
 80064bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064be:	897b      	ldrh	r3, [r7, #10]
 80064c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064c4:	7a7b      	ldrb	r3, [r7, #9]
 80064c6:	041b      	lsls	r3, r3, #16
 80064c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	0d5b      	lsrs	r3, r3, #21
 80064e6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80064ea:	4b08      	ldr	r3, [pc, #32]	@ (800650c <I2C_TransferConfig+0x60>)
 80064ec:	430b      	orrs	r3, r1
 80064ee:	43db      	mvns	r3, r3
 80064f0:	ea02 0103 	and.w	r1, r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	430a      	orrs	r2, r1
 80064fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80064fe:	bf00      	nop
 8006500:	371c      	adds	r7, #28
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop
 800650c:	03ff63ff 	.word	0x03ff63ff

08006510 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b20      	cmp	r3, #32
 8006524:	d138      	bne.n	8006598 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800652c:	2b01      	cmp	r3, #1
 800652e:	d101      	bne.n	8006534 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006530:	2302      	movs	r3, #2
 8006532:	e032      	b.n	800659a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2224      	movs	r2, #36	@ 0x24
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0201 	bic.w	r2, r2, #1
 8006552:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006562:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	6819      	ldr	r1, [r3, #0]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	681a      	ldr	r2, [r3, #0]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f042 0201 	orr.w	r2, r2, #1
 8006582:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006594:	2300      	movs	r3, #0
 8006596:	e000      	b.n	800659a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006598:	2302      	movs	r3, #2
  }
}
 800659a:	4618      	mov	r0, r3
 800659c:	370c      	adds	r7, #12
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr

080065a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b085      	sub	sp, #20
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
 80065ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d139      	bne.n	8006630 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e033      	b.n	8006632 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2224      	movs	r2, #36	@ 0x24
 80065d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f022 0201 	bic.w	r2, r2, #1
 80065e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80065f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	021b      	lsls	r3, r3, #8
 80065fe:	68fa      	ldr	r2, [r7, #12]
 8006600:	4313      	orrs	r3, r2
 8006602:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800662c:	2300      	movs	r3, #0
 800662e:	e000      	b.n	8006632 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006630:	2302      	movs	r3, #2
  }
}
 8006632:	4618      	mov	r0, r3
 8006634:	3714      	adds	r7, #20
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr
	...

08006640 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 800664e:	2301      	movs	r3, #1
 8006650:	e07a      	b.n	8006748 <HAL_LPTIM_Init+0x108>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d106      	bne.n	8006672 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f7fc f935 	bl	80028dc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2202      	movs	r2, #2
 8006676:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d004      	beq.n	8006694 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006692:	d103      	bne.n	800669c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 031e 	bic.w	r3, r3, #30
 800669a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d003      	beq.n	80066b0 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4b29      	ldr	r3, [pc, #164]	@ (8006750 <HAL_LPTIM_Init+0x110>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4b28      	ldr	r3, [pc, #160]	@ (8006754 <HAL_LPTIM_Init+0x114>)
 80066b4:	4013      	ands	r3, r2
 80066b6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80066c0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80066c6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              hlptim->Init.OutputPolarity  |
 80066cc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              hlptim->Init.UpdateMode      |
 80066d2:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d107      	bne.n	80066f2 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80066ea:	4313      	orrs	r3, r2
 80066ec:	68fa      	ldr	r2, [r7, #12]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d004      	beq.n	8006704 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006702:	d107      	bne.n	8006714 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800670c:	4313      	orrs	r3, r2
 800670e:	68fa      	ldr	r2, [r7, #12]
 8006710:	4313      	orrs	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800671c:	4293      	cmp	r3, r2
 800671e:	d00a      	beq.n	8006736 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006728:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800672e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2201      	movs	r2, #1
 8006742:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* Return function status */
  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3710      	adds	r7, #16
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}
 8006750:	ffff1f3f 	.word	0xffff1f3f
 8006754:	ff19f1fe 	.word	0xff19f1fe

08006758 <HAL_LPTIM_PWM_Start>:
  * @param  Pulse Specifies the compare value.
  *         This parameter must be a value between 0x0000 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period, uint32_t Pulse)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));
  assert_param(IS_LPTIM_PULSE(Pulse));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2202      	movs	r2, #2
 8006768:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* Reset WAVE bit to set PWM mode */
  hlptim->Instance->CFGR &= ~LPTIM_CFGR_WAVE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800677a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	691a      	ldr	r2, [r3, #16]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2210      	movs	r2, #16
 8006792:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68ba      	ldr	r2, [r7, #8]
 800679a:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 800679c:	2110      	movs	r1, #16
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f000 f852 	bl	8006848 <LPTIM_WaitForFlag>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d101      	bne.n	80067ae <HAL_LPTIM_PWM_Start+0x56>
  {
    return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e01d      	b.n	80067ea <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2208      	movs	r2, #8
 80067b4:	605a      	str	r2, [r3, #4]

  /* Load the pulse value in the compare register */
  __HAL_LPTIM_COMPARE_SET(hlptim, Pulse);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	615a      	str	r2, [r3, #20]

  /* Wait for the completion of the write operation to the LPTIM_CMP register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 80067be:	2108      	movs	r1, #8
 80067c0:	68f8      	ldr	r0, [r7, #12]
 80067c2:	f000 f841 	bl	8006848 <LPTIM_WaitForFlag>
 80067c6:	4603      	mov	r3, r0
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d101      	bne.n	80067d0 <HAL_LPTIM_PWM_Start+0x78>
  {
    return HAL_TIMEOUT;
 80067cc:	2303      	movs	r3, #3
 80067ce:	e00c      	b.n	80067ea <HAL_LPTIM_PWM_Start+0x92>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691a      	ldr	r2, [r3, #16]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f042 0204 	orr.w	r2, r2, #4
 80067de:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* Return function status */
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_LPTIM_PWM_Stop>:
  * @brief  Stop the LPTIM PWM generation.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_PWM_Stop(LPTIM_HandleTypeDef *hlptim)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f850 	bl	80068a8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 f80e 	bl	800682a <HAL_LPTIM_GetState>
 800680e:	4603      	mov	r3, r0
 8006810:	2b03      	cmp	r3, #3
 8006812:	d101      	bne.n	8006818 <HAL_LPTIM_PWM_Stop+0x26>
  {
    return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e004      	b.n	8006822 <HAL_LPTIM_PWM_Stop+0x30>
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

  /* Return function status */
  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(const LPTIM_HandleTypeDef *hlptim)
{
 800682a:	b480      	push	{r7}
 800682c:	b083      	sub	sp, #12
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 8006838:	b2db      	uxtb	r3, r3
}
 800683a:	4618      	mov	r0, r3
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
	...

08006848 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8006848:	b480      	push	{r7}
 800684a:	b085      	sub	sp, #20
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8006856:	4b12      	ldr	r3, [pc, #72]	@ (80068a0 <LPTIM_WaitForFlag+0x58>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a12      	ldr	r2, [pc, #72]	@ (80068a4 <LPTIM_WaitForFlag+0x5c>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	0b9b      	lsrs	r3, r3, #14
 8006862:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006866:	fb02 f303 	mul.w	r3, r2, r3
 800686a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	3b01      	subs	r3, #1
 8006870:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8006878:	2303      	movs	r3, #3
 800687a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	4013      	ands	r3, r2
 8006886:	683a      	ldr	r2, [r7, #0]
 8006888:	429a      	cmp	r2, r3
 800688a:	d002      	beq.n	8006892 <LPTIM_WaitForFlag+0x4a>
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1ec      	bne.n	800686c <LPTIM_WaitForFlag+0x24>

  return result;
 8006892:	7bfb      	ldrb	r3, [r7, #15]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3714      	adds	r7, #20
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr
 80068a0:	20000034 	.word	0x20000034
 80068a4:	d1b71759 	.word	0xd1b71759

080068a8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08c      	sub	sp, #48	@ 0x30
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80068b0:	2300      	movs	r3, #0
 80068b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068b4:	f3ef 8310 	mrs	r3, PRIMASK
 80068b8:	613b      	str	r3, [r7, #16]
  return(result);
 80068ba:	693b      	ldr	r3, [r7, #16]
  uint32_t tmpCMP;
  uint32_t tmpARR;
  uint32_t primask_bit;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80068bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068be:	2301      	movs	r3, #1
 80068c0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f383 8810 	msr	PRIMASK, r3
}
 80068c8:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	4b56      	ldr	r3, [pc, #344]	@ (8006a2c <LPTIM_Disable+0x184>)
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d106      	bne.n	80068e4 <LPTIM_Disable+0x3c>
  {
    case LPTIM1_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 80068d6:	4b56      	ldr	r3, [pc, #344]	@ (8006a30 <LPTIM_Disable+0x188>)
 80068d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80068dc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 80068e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 80068e2:	e000      	b.n	80068e6 <LPTIM_Disable+0x3e>
    default:
      break;
 80068e4:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	627b      	str	r3, [r7, #36]	@ 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695b      	ldr	r3, [r3, #20]
 80068fc:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	61bb      	str	r3, [r7, #24]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	461a      	mov	r2, r3
 800690c:	4b47      	ldr	r3, [pc, #284]	@ (8006a2c <LPTIM_Disable+0x184>)
 800690e:	429a      	cmp	r2, r3
 8006910:	d10c      	bne.n	800692c <LPTIM_Disable+0x84>
  {
    case LPTIM1_BASE:
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8006912:	4b47      	ldr	r3, [pc, #284]	@ (8006a30 <LPTIM_Disable+0x188>)
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	4a46      	ldr	r2, [pc, #280]	@ (8006a30 <LPTIM_Disable+0x188>)
 8006918:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800691c:	6213      	str	r3, [r2, #32]
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 800691e:	4b44      	ldr	r3, [pc, #272]	@ (8006a30 <LPTIM_Disable+0x188>)
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	4a43      	ldr	r2, [pc, #268]	@ (8006a30 <LPTIM_Disable+0x188>)
 8006924:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006928:	6213      	str	r3, [r2, #32]
      break;
 800692a:	e000      	b.n	800692e <LPTIM_Disable+0x86>
    default:
      break;
 800692c:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d102      	bne.n	800693a <LPTIM_Disable+0x92>
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d05d      	beq.n	80069f6 <LPTIM_Disable+0x14e>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	4b3a      	ldr	r3, [pc, #232]	@ (8006a2c <LPTIM_Disable+0x184>)
 8006942:	429a      	cmp	r2, r3
 8006944:	d108      	bne.n	8006958 <LPTIM_Disable+0xb0>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_PCLK1);
 8006946:	4b3a      	ldr	r3, [pc, #232]	@ (8006a30 <LPTIM_Disable+0x188>)
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800694c:	4a38      	ldr	r2, [pc, #224]	@ (8006a30 <LPTIM_Disable+0x188>)
 800694e:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 8006952:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        break;
 8006956:	e000      	b.n	800695a <LPTIM_Disable+0xb2>
      default:
        break;
 8006958:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d01a      	beq.n	8006996 <LPTIM_Disable+0xee>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	691a      	ldr	r2, [r3, #16]
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f042 0201 	orr.w	r2, r2, #1
 800696e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	69fa      	ldr	r2, [r7, #28]
 8006976:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8006978:	2108      	movs	r1, #8
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff ff64 	bl	8006848 <LPTIM_WaitForFlag>
 8006980:	4603      	mov	r3, r0
 8006982:	2b03      	cmp	r3, #3
 8006984:	d103      	bne.n	800698e <LPTIM_Disable+0xe6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2203      	movs	r2, #3
 800698a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2208      	movs	r2, #8
 8006994:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d01a      	beq.n	80069d2 <LPTIM_Disable+0x12a>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691a      	ldr	r2, [r3, #16]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0201 	orr.w	r2, r2, #1
 80069aa:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 80069b4:	2110      	movs	r1, #16
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f7ff ff46 	bl	8006848 <LPTIM_WaitForFlag>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b03      	cmp	r3, #3
 80069c0:	d103      	bne.n	80069ca <LPTIM_Disable+0x122>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2203      	movs	r2, #3
 80069c6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2210      	movs	r2, #16
 80069d0:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	4b14      	ldr	r3, [pc, #80]	@ (8006a2c <LPTIM_Disable+0x184>)
 80069da:	429a      	cmp	r2, r3
 80069dc:	d10a      	bne.n	80069f4 <LPTIM_Disable+0x14c>
    {
      case LPTIM1_BASE:
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80069de:	4b14      	ldr	r3, [pc, #80]	@ (8006a30 <LPTIM_Disable+0x188>)
 80069e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80069e4:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80069e8:	4911      	ldr	r1, [pc, #68]	@ (8006a30 <LPTIM_Disable+0x188>)
 80069ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ec:	4313      	orrs	r3, r2
 80069ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
        break;
 80069f2:	e000      	b.n	80069f6 <LPTIM_Disable+0x14e>
      default:
        break;
 80069f4:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691a      	ldr	r2, [r3, #16]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0201 	bic.w	r2, r2, #1
 8006a04:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a0c:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	6a3a      	ldr	r2, [r7, #32]
 8006a14:	60da      	str	r2, [r3, #12]
 8006a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a18:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f383 8810 	msr	PRIMASK, r3
}
 8006a20:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8006a22:	bf00      	nop
 8006a24:	3730      	adds	r7, #48	@ 0x30
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	40002400 	.word	0x40002400
 8006a30:	40023800 	.word	0x40023800

08006a34 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b082      	sub	sp, #8
 8006a38:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006a3e:	4b23      	ldr	r3, [pc, #140]	@ (8006acc <HAL_PWREx_EnableOverDrive+0x98>)
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	4a22      	ldr	r2, [pc, #136]	@ (8006acc <HAL_PWREx_EnableOverDrive+0x98>)
 8006a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a4a:	4b20      	ldr	r3, [pc, #128]	@ (8006acc <HAL_PWREx_EnableOverDrive+0x98>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a52:	603b      	str	r3, [r7, #0]
 8006a54:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a56:	4b1e      	ldr	r3, [pc, #120]	@ (8006ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a60:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a62:	f7fc fc93 	bl	800338c <HAL_GetTick>
 8006a66:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a68:	e009      	b.n	8006a7e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a6a:	f7fc fc8f 	bl	800338c <HAL_GetTick>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	1ad3      	subs	r3, r2, r3
 8006a74:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a78:	d901      	bls.n	8006a7e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e022      	b.n	8006ac4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a7e:	4b14      	ldr	r3, [pc, #80]	@ (8006ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a8a:	d1ee      	bne.n	8006a6a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a8c:	4b10      	ldr	r3, [pc, #64]	@ (8006ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a0f      	ldr	r2, [pc, #60]	@ (8006ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a96:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a98:	f7fc fc78 	bl	800338c <HAL_GetTick>
 8006a9c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a9e:	e009      	b.n	8006ab4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006aa0:	f7fc fc74 	bl	800338c <HAL_GetTick>
 8006aa4:	4602      	mov	r2, r0
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006aae:	d901      	bls.n	8006ab4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006ab0:	2303      	movs	r3, #3
 8006ab2:	e007      	b.n	8006ac4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ab4:	4b06      	ldr	r3, [pc, #24]	@ (8006ad0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006abc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ac0:	d1ee      	bne.n	8006aa0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3708      	adds	r7, #8
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}
 8006acc:	40023800 	.word	0x40023800
 8006ad0:	40007000 	.word	0x40007000

08006ad4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006adc:	2300      	movs	r3, #0
 8006ade:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d101      	bne.n	8006aea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e29b      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 8087 	beq.w	8006c06 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006af8:	4b96      	ldr	r3, [pc, #600]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f003 030c 	and.w	r3, r3, #12
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d00c      	beq.n	8006b1e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b04:	4b93      	ldr	r3, [pc, #588]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	f003 030c 	and.w	r3, r3, #12
 8006b0c:	2b08      	cmp	r3, #8
 8006b0e:	d112      	bne.n	8006b36 <HAL_RCC_OscConfig+0x62>
 8006b10:	4b90      	ldr	r3, [pc, #576]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b12:	685b      	ldr	r3, [r3, #4]
 8006b14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b1c:	d10b      	bne.n	8006b36 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b1e:	4b8d      	ldr	r3, [pc, #564]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d06c      	beq.n	8006c04 <HAL_RCC_OscConfig+0x130>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d168      	bne.n	8006c04 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e275      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b3e:	d106      	bne.n	8006b4e <HAL_RCC_OscConfig+0x7a>
 8006b40:	4b84      	ldr	r3, [pc, #528]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a83      	ldr	r2, [pc, #524]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b4a:	6013      	str	r3, [r2, #0]
 8006b4c:	e02e      	b.n	8006bac <HAL_RCC_OscConfig+0xd8>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10c      	bne.n	8006b70 <HAL_RCC_OscConfig+0x9c>
 8006b56:	4b7f      	ldr	r3, [pc, #508]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b60:	6013      	str	r3, [r2, #0]
 8006b62:	4b7c      	ldr	r3, [pc, #496]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a7b      	ldr	r2, [pc, #492]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b6c:	6013      	str	r3, [r2, #0]
 8006b6e:	e01d      	b.n	8006bac <HAL_RCC_OscConfig+0xd8>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	685b      	ldr	r3, [r3, #4]
 8006b74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b78:	d10c      	bne.n	8006b94 <HAL_RCC_OscConfig+0xc0>
 8006b7a:	4b76      	ldr	r3, [pc, #472]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a75      	ldr	r2, [pc, #468]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b84:	6013      	str	r3, [r2, #0]
 8006b86:	4b73      	ldr	r3, [pc, #460]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a72      	ldr	r2, [pc, #456]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e00b      	b.n	8006bac <HAL_RCC_OscConfig+0xd8>
 8006b94:	4b6f      	ldr	r3, [pc, #444]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a6e      	ldr	r2, [pc, #440]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006b9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a6b      	ldr	r2, [pc, #428]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006ba6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006baa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d013      	beq.n	8006bdc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bb4:	f7fc fbea 	bl	800338c <HAL_GetTick>
 8006bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bbc:	f7fc fbe6 	bl	800338c <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b64      	cmp	r3, #100	@ 0x64
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e229      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bce:	4b61      	ldr	r3, [pc, #388]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0xe8>
 8006bda:	e014      	b.n	8006c06 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bdc:	f7fc fbd6 	bl	800338c <HAL_GetTick>
 8006be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006be2:	e008      	b.n	8006bf6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006be4:	f7fc fbd2 	bl	800338c <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	2b64      	cmp	r3, #100	@ 0x64
 8006bf0:	d901      	bls.n	8006bf6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e215      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bf6:	4b57      	ldr	r3, [pc, #348]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d1f0      	bne.n	8006be4 <HAL_RCC_OscConfig+0x110>
 8006c02:	e000      	b.n	8006c06 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d069      	beq.n	8006ce6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006c12:	4b50      	ldr	r3, [pc, #320]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f003 030c 	and.w	r3, r3, #12
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f003 030c 	and.w	r3, r3, #12
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d11c      	bne.n	8006c64 <HAL_RCC_OscConfig+0x190>
 8006c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d116      	bne.n	8006c64 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c36:	4b47      	ldr	r3, [pc, #284]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d005      	beq.n	8006c4e <HAL_RCC_OscConfig+0x17a>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d001      	beq.n	8006c4e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e1e9      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c4e:	4b41      	ldr	r3, [pc, #260]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	00db      	lsls	r3, r3, #3
 8006c5c:	493d      	ldr	r1, [pc, #244]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c62:	e040      	b.n	8006ce6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d023      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c6c:	4b39      	ldr	r3, [pc, #228]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	4a38      	ldr	r2, [pc, #224]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006c72:	f043 0301 	orr.w	r3, r3, #1
 8006c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c78:	f7fc fb88 	bl	800338c <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c80:	f7fc fb84 	bl	800338c <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e1c7      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c92:	4b30      	ldr	r3, [pc, #192]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f0      	beq.n	8006c80 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c9e:	4b2d      	ldr	r3, [pc, #180]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	00db      	lsls	r3, r3, #3
 8006cac:	4929      	ldr	r1, [pc, #164]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	600b      	str	r3, [r1, #0]
 8006cb2:	e018      	b.n	8006ce6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cb4:	4b27      	ldr	r3, [pc, #156]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a26      	ldr	r2, [pc, #152]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006cba:	f023 0301 	bic.w	r3, r3, #1
 8006cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc0:	f7fc fb64 	bl	800338c <HAL_GetTick>
 8006cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cc6:	e008      	b.n	8006cda <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cc8:	f7fc fb60 	bl	800338c <HAL_GetTick>
 8006ccc:	4602      	mov	r2, r0
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d901      	bls.n	8006cda <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006cd6:	2303      	movs	r3, #3
 8006cd8:	e1a3      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cda:	4b1e      	ldr	r3, [pc, #120]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1f0      	bne.n	8006cc8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0308 	and.w	r3, r3, #8
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d038      	beq.n	8006d64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d019      	beq.n	8006d2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cfa:	4b16      	ldr	r3, [pc, #88]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cfe:	4a15      	ldr	r2, [pc, #84]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006d00:	f043 0301 	orr.w	r3, r3, #1
 8006d04:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d06:	f7fc fb41 	bl	800338c <HAL_GetTick>
 8006d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d0c:	e008      	b.n	8006d20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d0e:	f7fc fb3d 	bl	800338c <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b02      	cmp	r3, #2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e180      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d20:	4b0c      	ldr	r3, [pc, #48]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0f0      	beq.n	8006d0e <HAL_RCC_OscConfig+0x23a>
 8006d2c:	e01a      	b.n	8006d64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d2e:	4b09      	ldr	r3, [pc, #36]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d32:	4a08      	ldr	r2, [pc, #32]	@ (8006d54 <HAL_RCC_OscConfig+0x280>)
 8006d34:	f023 0301 	bic.w	r3, r3, #1
 8006d38:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d3a:	f7fc fb27 	bl	800338c <HAL_GetTick>
 8006d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d40:	e00a      	b.n	8006d58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d42:	f7fc fb23 	bl	800338c <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d903      	bls.n	8006d58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e166      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
 8006d54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d58:	4b92      	ldr	r3, [pc, #584]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d5c:	f003 0302 	and.w	r3, r3, #2
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1ee      	bne.n	8006d42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80a4 	beq.w	8006eba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d72:	4b8c      	ldr	r3, [pc, #560]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d76:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d10d      	bne.n	8006d9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d7e:	4b89      	ldr	r3, [pc, #548]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d82:	4a88      	ldr	r2, [pc, #544]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006d84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d88:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d8a:	4b86      	ldr	r3, [pc, #536]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d92:	60bb      	str	r3, [r7, #8]
 8006d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d96:	2301      	movs	r3, #1
 8006d98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d9a:	4b83      	ldr	r3, [pc, #524]	@ (8006fa8 <HAL_RCC_OscConfig+0x4d4>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d118      	bne.n	8006dd8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006da6:	4b80      	ldr	r3, [pc, #512]	@ (8006fa8 <HAL_RCC_OscConfig+0x4d4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a7f      	ldr	r2, [pc, #508]	@ (8006fa8 <HAL_RCC_OscConfig+0x4d4>)
 8006dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006db2:	f7fc faeb 	bl	800338c <HAL_GetTick>
 8006db6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006db8:	e008      	b.n	8006dcc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dba:	f7fc fae7 	bl	800338c <HAL_GetTick>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	1ad3      	subs	r3, r2, r3
 8006dc4:	2b64      	cmp	r3, #100	@ 0x64
 8006dc6:	d901      	bls.n	8006dcc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006dc8:	2303      	movs	r3, #3
 8006dca:	e12a      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006dcc:	4b76      	ldr	r3, [pc, #472]	@ (8006fa8 <HAL_RCC_OscConfig+0x4d4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d0f0      	beq.n	8006dba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d106      	bne.n	8006dee <HAL_RCC_OscConfig+0x31a>
 8006de0:	4b70      	ldr	r3, [pc, #448]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006de4:	4a6f      	ldr	r2, [pc, #444]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006de6:	f043 0301 	orr.w	r3, r3, #1
 8006dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8006dec:	e02d      	b.n	8006e4a <HAL_RCC_OscConfig+0x376>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10c      	bne.n	8006e10 <HAL_RCC_OscConfig+0x33c>
 8006df6:	4b6b      	ldr	r3, [pc, #428]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfa:	4a6a      	ldr	r2, [pc, #424]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006dfc:	f023 0301 	bic.w	r3, r3, #1
 8006e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e02:	4b68      	ldr	r3, [pc, #416]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e06:	4a67      	ldr	r2, [pc, #412]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e08:	f023 0304 	bic.w	r3, r3, #4
 8006e0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e0e:	e01c      	b.n	8006e4a <HAL_RCC_OscConfig+0x376>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	2b05      	cmp	r3, #5
 8006e16:	d10c      	bne.n	8006e32 <HAL_RCC_OscConfig+0x35e>
 8006e18:	4b62      	ldr	r3, [pc, #392]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1c:	4a61      	ldr	r2, [pc, #388]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e1e:	f043 0304 	orr.w	r3, r3, #4
 8006e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e24:	4b5f      	ldr	r3, [pc, #380]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e28:	4a5e      	ldr	r2, [pc, #376]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e2a:	f043 0301 	orr.w	r3, r3, #1
 8006e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e30:	e00b      	b.n	8006e4a <HAL_RCC_OscConfig+0x376>
 8006e32:	4b5c      	ldr	r3, [pc, #368]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e36:	4a5b      	ldr	r2, [pc, #364]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e3e:	4b59      	ldr	r3, [pc, #356]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e42:	4a58      	ldr	r2, [pc, #352]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e44:	f023 0304 	bic.w	r3, r3, #4
 8006e48:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d015      	beq.n	8006e7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e52:	f7fc fa9b 	bl	800338c <HAL_GetTick>
 8006e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e58:	e00a      	b.n	8006e70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e5a:	f7fc fa97 	bl	800338c <HAL_GetTick>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	1ad3      	subs	r3, r2, r3
 8006e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d901      	bls.n	8006e70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e0d8      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e70:	4b4c      	ldr	r3, [pc, #304]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0ee      	beq.n	8006e5a <HAL_RCC_OscConfig+0x386>
 8006e7c:	e014      	b.n	8006ea8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e7e:	f7fc fa85 	bl	800338c <HAL_GetTick>
 8006e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e84:	e00a      	b.n	8006e9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e86:	f7fc fa81 	bl	800338c <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e0c2      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e9c:	4b41      	ldr	r3, [pc, #260]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006e9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d1ee      	bne.n	8006e86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d105      	bne.n	8006eba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eae:	4b3d      	ldr	r3, [pc, #244]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb2:	4a3c      	ldr	r2, [pc, #240]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006eb4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eb8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f000 80ae 	beq.w	8007020 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006ec4:	4b37      	ldr	r3, [pc, #220]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f003 030c 	and.w	r3, r3, #12
 8006ecc:	2b08      	cmp	r3, #8
 8006ece:	d06d      	beq.n	8006fac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d14b      	bne.n	8006f70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed8:	4b32      	ldr	r3, [pc, #200]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a31      	ldr	r2, [pc, #196]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006ede:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006ee2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee4:	f7fc fa52 	bl	800338c <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eea:	e008      	b.n	8006efe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eec:	f7fc fa4e 	bl	800338c <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	2b02      	cmp	r3, #2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e091      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006efe:	4b29      	ldr	r3, [pc, #164]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1f0      	bne.n	8006eec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69da      	ldr	r2, [r3, #28]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f18:	019b      	lsls	r3, r3, #6
 8006f1a:	431a      	orrs	r2, r3
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f20:	085b      	lsrs	r3, r3, #1
 8006f22:	3b01      	subs	r3, #1
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	431a      	orrs	r2, r3
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2c:	061b      	lsls	r3, r3, #24
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f34:	071b      	lsls	r3, r3, #28
 8006f36:	491b      	ldr	r1, [pc, #108]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f3c:	4b19      	ldr	r3, [pc, #100]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a18      	ldr	r2, [pc, #96]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006f42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f48:	f7fc fa20 	bl	800338c <HAL_GetTick>
 8006f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f4e:	e008      	b.n	8006f62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f50:	f7fc fa1c 	bl	800338c <HAL_GetTick>
 8006f54:	4602      	mov	r2, r0
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	2b02      	cmp	r3, #2
 8006f5c:	d901      	bls.n	8006f62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8006f5e:	2303      	movs	r3, #3
 8006f60:	e05f      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f62:	4b10      	ldr	r3, [pc, #64]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d0f0      	beq.n	8006f50 <HAL_RCC_OscConfig+0x47c>
 8006f6e:	e057      	b.n	8007020 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f70:	4b0c      	ldr	r3, [pc, #48]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a0b      	ldr	r2, [pc, #44]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006f76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f7c:	f7fc fa06 	bl	800338c <HAL_GetTick>
 8006f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f82:	e008      	b.n	8006f96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f84:	f7fc fa02 	bl	800338c <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d901      	bls.n	8006f96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8006f92:	2303      	movs	r3, #3
 8006f94:	e045      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f96:	4b03      	ldr	r3, [pc, #12]	@ (8006fa4 <HAL_RCC_OscConfig+0x4d0>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d1f0      	bne.n	8006f84 <HAL_RCC_OscConfig+0x4b0>
 8006fa2:	e03d      	b.n	8007020 <HAL_RCC_OscConfig+0x54c>
 8006fa4:	40023800 	.word	0x40023800
 8006fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006fac:	4b1f      	ldr	r3, [pc, #124]	@ (800702c <HAL_RCC_OscConfig+0x558>)
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d030      	beq.n	800701c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d129      	bne.n	800701c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d122      	bne.n	800701c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fd6:	68fa      	ldr	r2, [r7, #12]
 8006fd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006fdc:	4013      	ands	r3, r2
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fe2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d119      	bne.n	800701c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff2:	085b      	lsrs	r3, r3, #1
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d10f      	bne.n	800701c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007006:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007008:	429a      	cmp	r2, r3
 800700a:	d107      	bne.n	800701c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007016:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007018:	429a      	cmp	r2, r3
 800701a:	d001      	beq.n	8007020 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e000      	b.n	8007022 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	40023800 	.word	0x40023800

08007030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e0d0      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007048:	4b6a      	ldr	r3, [pc, #424]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	429a      	cmp	r2, r3
 8007054:	d910      	bls.n	8007078 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007056:	4b67      	ldr	r3, [pc, #412]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f023 020f 	bic.w	r2, r3, #15
 800705e:	4965      	ldr	r1, [pc, #404]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	4313      	orrs	r3, r2
 8007064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007066:	4b63      	ldr	r3, [pc, #396]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 030f 	and.w	r3, r3, #15
 800706e:	683a      	ldr	r2, [r7, #0]
 8007070:	429a      	cmp	r2, r3
 8007072:	d001      	beq.n	8007078 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0b8      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f003 0302 	and.w	r3, r3, #2
 8007080:	2b00      	cmp	r3, #0
 8007082:	d020      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007090:	4b59      	ldr	r3, [pc, #356]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	4a58      	ldr	r2, [pc, #352]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007096:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800709a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f003 0308 	and.w	r3, r3, #8
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d005      	beq.n	80070b4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070a8:	4b53      	ldr	r3, [pc, #332]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	4a52      	ldr	r2, [pc, #328]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 80070ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80070b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070b4:	4b50      	ldr	r3, [pc, #320]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	494d      	ldr	r1, [pc, #308]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d040      	beq.n	8007154 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d107      	bne.n	80070ea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070da:	4b47      	ldr	r3, [pc, #284]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d115      	bne.n	8007112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e07f      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d107      	bne.n	8007102 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070f2:	4b41      	ldr	r3, [pc, #260]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d109      	bne.n	8007112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e073      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007102:	4b3d      	ldr	r3, [pc, #244]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0302 	and.w	r3, r3, #2
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e06b      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007112:	4b39      	ldr	r3, [pc, #228]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	f023 0203 	bic.w	r2, r3, #3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	4936      	ldr	r1, [pc, #216]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007120:	4313      	orrs	r3, r2
 8007122:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007124:	f7fc f932 	bl	800338c <HAL_GetTick>
 8007128:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800712a:	e00a      	b.n	8007142 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800712c:	f7fc f92e 	bl	800338c <HAL_GetTick>
 8007130:	4602      	mov	r2, r0
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800713a:	4293      	cmp	r3, r2
 800713c:	d901      	bls.n	8007142 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e053      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007142:	4b2d      	ldr	r3, [pc, #180]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 020c 	and.w	r2, r3, #12
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	429a      	cmp	r2, r3
 8007152:	d1eb      	bne.n	800712c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007154:	4b27      	ldr	r3, [pc, #156]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 030f 	and.w	r3, r3, #15
 800715c:	683a      	ldr	r2, [r7, #0]
 800715e:	429a      	cmp	r2, r3
 8007160:	d210      	bcs.n	8007184 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007162:	4b24      	ldr	r3, [pc, #144]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f023 020f 	bic.w	r2, r3, #15
 800716a:	4922      	ldr	r1, [pc, #136]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c4>)
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	4313      	orrs	r3, r2
 8007170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007172:	4b20      	ldr	r3, [pc, #128]	@ (80071f4 <HAL_RCC_ClockConfig+0x1c4>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d001      	beq.n	8007184 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e032      	b.n	80071ea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b00      	cmp	r3, #0
 800718e:	d008      	beq.n	80071a2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007190:	4b19      	ldr	r3, [pc, #100]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	4916      	ldr	r1, [pc, #88]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 800719e:	4313      	orrs	r3, r2
 80071a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0308 	and.w	r3, r3, #8
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d009      	beq.n	80071c2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80071ae:	4b12      	ldr	r3, [pc, #72]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	00db      	lsls	r3, r3, #3
 80071bc:	490e      	ldr	r1, [pc, #56]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071c2:	f000 f885 	bl	80072d0 <HAL_RCC_GetSysClockFreq>
 80071c6:	4602      	mov	r2, r0
 80071c8:	4b0b      	ldr	r3, [pc, #44]	@ (80071f8 <HAL_RCC_ClockConfig+0x1c8>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	091b      	lsrs	r3, r3, #4
 80071ce:	f003 030f 	and.w	r3, r3, #15
 80071d2:	490a      	ldr	r1, [pc, #40]	@ (80071fc <HAL_RCC_ClockConfig+0x1cc>)
 80071d4:	5ccb      	ldrb	r3, [r1, r3]
 80071d6:	fa22 f303 	lsr.w	r3, r2, r3
 80071da:	4a09      	ldr	r2, [pc, #36]	@ (8007200 <HAL_RCC_ClockConfig+0x1d0>)
 80071dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80071de:	4b09      	ldr	r3, [pc, #36]	@ (8007204 <HAL_RCC_ClockConfig+0x1d4>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4618      	mov	r0, r3
 80071e4:	f7fc f88e 	bl	8003304 <HAL_InitTick>

  return HAL_OK;
 80071e8:	2300      	movs	r3, #0
}
 80071ea:	4618      	mov	r0, r3
 80071ec:	3710      	adds	r7, #16
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	40023c00 	.word	0x40023c00
 80071f8:	40023800 	.word	0x40023800
 80071fc:	0800d260 	.word	0x0800d260
 8007200:	20000034 	.word	0x20000034
 8007204:	20000038 	.word	0x20000038

08007208 <HAL_RCC_MCOConfig>:
  *            @arg RCC_MCODIV_4: division by 4 applied to MCOx clock
  *            @arg RCC_MCODIV_5: division by 5 applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08c      	sub	sp, #48	@ 0x30
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d127      	bne.n	800726a <HAL_RCC_MCOConfig+0x62>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800721a:	4b2a      	ldr	r3, [pc, #168]	@ (80072c4 <HAL_RCC_MCOConfig+0xbc>)
 800721c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800721e:	4a29      	ldr	r2, [pc, #164]	@ (80072c4 <HAL_RCC_MCOConfig+0xbc>)
 8007220:	f043 0301 	orr.w	r3, r3, #1
 8007224:	6313      	str	r3, [r2, #48]	@ 0x30
 8007226:	4b27      	ldr	r3, [pc, #156]	@ (80072c4 <HAL_RCC_MCOConfig+0xbc>)
 8007228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8007232:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007238:	2302      	movs	r3, #2
 800723a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800723c:	2303      	movs	r3, #3
 800723e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007240:	2300      	movs	r3, #0
 8007242:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007244:	2300      	movs	r3, #0
 8007246:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8007248:	f107 031c 	add.w	r3, r7, #28
 800724c:	4619      	mov	r1, r3
 800724e:	481e      	ldr	r0, [pc, #120]	@ (80072c8 <HAL_RCC_MCOConfig+0xc0>)
 8007250:	f7fe fa48 	bl	80056e4 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8007254:	4b1b      	ldr	r3, [pc, #108]	@ (80072c4 <HAL_RCC_MCOConfig+0xbc>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f023 62ec 	bic.w	r2, r3, #123731968	@ 0x7600000
 800725c:	68b9      	ldr	r1, [r7, #8]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	430b      	orrs	r3, r1
 8007262:	4918      	ldr	r1, [pc, #96]	@ (80072c4 <HAL_RCC_MCOConfig+0xbc>)
 8007264:	4313      	orrs	r3, r2
 8007266:	608b      	str	r3, [r1, #8]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
  }
}
 8007268:	e027      	b.n	80072ba <HAL_RCC_MCOConfig+0xb2>
    MCO2_CLK_ENABLE();
 800726a:	4b16      	ldr	r3, [pc, #88]	@ (80072c4 <HAL_RCC_MCOConfig+0xbc>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726e:	4a15      	ldr	r2, [pc, #84]	@ (80072c4 <HAL_RCC_MCOConfig+0xbc>)
 8007270:	f043 0304 	orr.w	r3, r3, #4
 8007274:	6313      	str	r3, [r2, #48]	@ 0x30
 8007276:	4b13      	ldr	r3, [pc, #76]	@ (80072c4 <HAL_RCC_MCOConfig+0xbc>)
 8007278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	617b      	str	r3, [r7, #20]
 8007280:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8007282:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007288:	2302      	movs	r3, #2
 800728a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800728c:	2303      	movs	r3, #3
 800728e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007290:	2300      	movs	r3, #0
 8007292:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8007294:	2300      	movs	r3, #0
 8007296:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8007298:	f107 031c 	add.w	r3, r7, #28
 800729c:	4619      	mov	r1, r3
 800729e:	480b      	ldr	r0, [pc, #44]	@ (80072cc <HAL_RCC_MCOConfig+0xc4>)
 80072a0:	f7fe fa20 	bl	80056e4 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3)));
 80072a4:	4b07      	ldr	r3, [pc, #28]	@ (80072c4 <HAL_RCC_MCOConfig+0xbc>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	f023 4278 	bic.w	r2, r3, #4160749568	@ 0xf8000000
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	00d9      	lsls	r1, r3, #3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	430b      	orrs	r3, r1
 80072b4:	4903      	ldr	r1, [pc, #12]	@ (80072c4 <HAL_RCC_MCOConfig+0xbc>)
 80072b6:	4313      	orrs	r3, r2
 80072b8:	608b      	str	r3, [r1, #8]
}
 80072ba:	bf00      	nop
 80072bc:	3730      	adds	r7, #48	@ 0x30
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
 80072c2:	bf00      	nop
 80072c4:	40023800 	.word	0x40023800
 80072c8:	40020000 	.word	0x40020000
 80072cc:	40020800 	.word	0x40020800

080072d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d4:	b094      	sub	sp, #80	@ 0x50
 80072d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80072d8:	2300      	movs	r3, #0
 80072da:	647b      	str	r3, [r7, #68]	@ 0x44
 80072dc:	2300      	movs	r3, #0
 80072de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072e0:	2300      	movs	r3, #0
 80072e2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80072e4:	2300      	movs	r3, #0
 80072e6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80072e8:	4b79      	ldr	r3, [pc, #484]	@ (80074d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	f003 030c 	and.w	r3, r3, #12
 80072f0:	2b08      	cmp	r3, #8
 80072f2:	d00d      	beq.n	8007310 <HAL_RCC_GetSysClockFreq+0x40>
 80072f4:	2b08      	cmp	r3, #8
 80072f6:	f200 80e1 	bhi.w	80074bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_RCC_GetSysClockFreq+0x34>
 80072fe:	2b04      	cmp	r3, #4
 8007300:	d003      	beq.n	800730a <HAL_RCC_GetSysClockFreq+0x3a>
 8007302:	e0db      	b.n	80074bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007304:	4b73      	ldr	r3, [pc, #460]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007306:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007308:	e0db      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800730a:	4b73      	ldr	r3, [pc, #460]	@ (80074d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800730c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800730e:	e0d8      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007310:	4b6f      	ldr	r3, [pc, #444]	@ (80074d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007318:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800731a:	4b6d      	ldr	r3, [pc, #436]	@ (80074d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007322:	2b00      	cmp	r3, #0
 8007324:	d063      	beq.n	80073ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007326:	4b6a      	ldr	r3, [pc, #424]	@ (80074d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	099b      	lsrs	r3, r3, #6
 800732c:	2200      	movs	r2, #0
 800732e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007330:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007334:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007338:	633b      	str	r3, [r7, #48]	@ 0x30
 800733a:	2300      	movs	r3, #0
 800733c:	637b      	str	r3, [r7, #52]	@ 0x34
 800733e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007342:	4622      	mov	r2, r4
 8007344:	462b      	mov	r3, r5
 8007346:	f04f 0000 	mov.w	r0, #0
 800734a:	f04f 0100 	mov.w	r1, #0
 800734e:	0159      	lsls	r1, r3, #5
 8007350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007354:	0150      	lsls	r0, r2, #5
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4621      	mov	r1, r4
 800735c:	1a51      	subs	r1, r2, r1
 800735e:	6139      	str	r1, [r7, #16]
 8007360:	4629      	mov	r1, r5
 8007362:	eb63 0301 	sbc.w	r3, r3, r1
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	f04f 0300 	mov.w	r3, #0
 8007370:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007374:	4659      	mov	r1, fp
 8007376:	018b      	lsls	r3, r1, #6
 8007378:	4651      	mov	r1, sl
 800737a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800737e:	4651      	mov	r1, sl
 8007380:	018a      	lsls	r2, r1, #6
 8007382:	4651      	mov	r1, sl
 8007384:	ebb2 0801 	subs.w	r8, r2, r1
 8007388:	4659      	mov	r1, fp
 800738a:	eb63 0901 	sbc.w	r9, r3, r1
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f04f 0300 	mov.w	r3, #0
 8007396:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800739a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800739e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80073a2:	4690      	mov	r8, r2
 80073a4:	4699      	mov	r9, r3
 80073a6:	4623      	mov	r3, r4
 80073a8:	eb18 0303 	adds.w	r3, r8, r3
 80073ac:	60bb      	str	r3, [r7, #8]
 80073ae:	462b      	mov	r3, r5
 80073b0:	eb49 0303 	adc.w	r3, r9, r3
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	f04f 0200 	mov.w	r2, #0
 80073ba:	f04f 0300 	mov.w	r3, #0
 80073be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80073c2:	4629      	mov	r1, r5
 80073c4:	024b      	lsls	r3, r1, #9
 80073c6:	4621      	mov	r1, r4
 80073c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80073cc:	4621      	mov	r1, r4
 80073ce:	024a      	lsls	r2, r1, #9
 80073d0:	4610      	mov	r0, r2
 80073d2:	4619      	mov	r1, r3
 80073d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073d6:	2200      	movs	r2, #0
 80073d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80073da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80073e0:	f7f9 f942 	bl	8000668 <__aeabi_uldivmod>
 80073e4:	4602      	mov	r2, r0
 80073e6:	460b      	mov	r3, r1
 80073e8:	4613      	mov	r3, r2
 80073ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80073ec:	e058      	b.n	80074a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073ee:	4b38      	ldr	r3, [pc, #224]	@ (80074d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	099b      	lsrs	r3, r3, #6
 80073f4:	2200      	movs	r2, #0
 80073f6:	4618      	mov	r0, r3
 80073f8:	4611      	mov	r1, r2
 80073fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80073fe:	623b      	str	r3, [r7, #32]
 8007400:	2300      	movs	r3, #0
 8007402:	627b      	str	r3, [r7, #36]	@ 0x24
 8007404:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007408:	4642      	mov	r2, r8
 800740a:	464b      	mov	r3, r9
 800740c:	f04f 0000 	mov.w	r0, #0
 8007410:	f04f 0100 	mov.w	r1, #0
 8007414:	0159      	lsls	r1, r3, #5
 8007416:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800741a:	0150      	lsls	r0, r2, #5
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	4641      	mov	r1, r8
 8007422:	ebb2 0a01 	subs.w	sl, r2, r1
 8007426:	4649      	mov	r1, r9
 8007428:	eb63 0b01 	sbc.w	fp, r3, r1
 800742c:	f04f 0200 	mov.w	r2, #0
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007438:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800743c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007440:	ebb2 040a 	subs.w	r4, r2, sl
 8007444:	eb63 050b 	sbc.w	r5, r3, fp
 8007448:	f04f 0200 	mov.w	r2, #0
 800744c:	f04f 0300 	mov.w	r3, #0
 8007450:	00eb      	lsls	r3, r5, #3
 8007452:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007456:	00e2      	lsls	r2, r4, #3
 8007458:	4614      	mov	r4, r2
 800745a:	461d      	mov	r5, r3
 800745c:	4643      	mov	r3, r8
 800745e:	18e3      	adds	r3, r4, r3
 8007460:	603b      	str	r3, [r7, #0]
 8007462:	464b      	mov	r3, r9
 8007464:	eb45 0303 	adc.w	r3, r5, r3
 8007468:	607b      	str	r3, [r7, #4]
 800746a:	f04f 0200 	mov.w	r2, #0
 800746e:	f04f 0300 	mov.w	r3, #0
 8007472:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007476:	4629      	mov	r1, r5
 8007478:	028b      	lsls	r3, r1, #10
 800747a:	4621      	mov	r1, r4
 800747c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007480:	4621      	mov	r1, r4
 8007482:	028a      	lsls	r2, r1, #10
 8007484:	4610      	mov	r0, r2
 8007486:	4619      	mov	r1, r3
 8007488:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800748a:	2200      	movs	r2, #0
 800748c:	61bb      	str	r3, [r7, #24]
 800748e:	61fa      	str	r2, [r7, #28]
 8007490:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007494:	f7f9 f8e8 	bl	8000668 <__aeabi_uldivmod>
 8007498:	4602      	mov	r2, r0
 800749a:	460b      	mov	r3, r1
 800749c:	4613      	mov	r3, r2
 800749e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80074a0:	4b0b      	ldr	r3, [pc, #44]	@ (80074d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	0c1b      	lsrs	r3, r3, #16
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	3301      	adds	r3, #1
 80074ac:	005b      	lsls	r3, r3, #1
 80074ae:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80074b0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80074b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074ba:	e002      	b.n	80074c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074bc:	4b05      	ldr	r3, [pc, #20]	@ (80074d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80074be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80074c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3750      	adds	r7, #80	@ 0x50
 80074c8:	46bd      	mov	sp, r7
 80074ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ce:	bf00      	nop
 80074d0:	40023800 	.word	0x40023800
 80074d4:	00f42400 	.word	0x00f42400
 80074d8:	007a1200 	.word	0x007a1200

080074dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80074e4:	2300      	movs	r3, #0
 80074e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80074f0:	2300      	movs	r3, #0
 80074f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80074f4:	2300      	movs	r3, #0
 80074f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f003 0301 	and.w	r3, r3, #1
 8007500:	2b00      	cmp	r3, #0
 8007502:	d012      	beq.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007504:	4b69      	ldr	r3, [pc, #420]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	4a68      	ldr	r2, [pc, #416]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800750a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800750e:	6093      	str	r3, [r2, #8]
 8007510:	4b66      	ldr	r3, [pc, #408]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007512:	689a      	ldr	r2, [r3, #8]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007518:	4964      	ldr	r1, [pc, #400]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800751a:	4313      	orrs	r3, r2
 800751c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007526:	2301      	movs	r3, #1
 8007528:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007532:	2b00      	cmp	r3, #0
 8007534:	d017      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007536:	4b5d      	ldr	r3, [pc, #372]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007538:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800753c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007544:	4959      	ldr	r1, [pc, #356]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007546:	4313      	orrs	r3, r2
 8007548:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007554:	d101      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007556:	2301      	movs	r3, #1
 8007558:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007562:	2301      	movs	r3, #1
 8007564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800756e:	2b00      	cmp	r3, #0
 8007570:	d017      	beq.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007572:	4b4e      	ldr	r3, [pc, #312]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007574:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007578:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007580:	494a      	ldr	r1, [pc, #296]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007582:	4313      	orrs	r3, r2
 8007584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007590:	d101      	bne.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007592:	2301      	movs	r3, #1
 8007594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800759e:	2301      	movs	r3, #1
 80075a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d001      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80075ae:	2301      	movs	r3, #1
 80075b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	f000 808b 	beq.w	80076d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80075c0:	4b3a      	ldr	r3, [pc, #232]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075c4:	4a39      	ldr	r2, [pc, #228]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80075cc:	4b37      	ldr	r3, [pc, #220]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80075ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80075d8:	4b35      	ldr	r3, [pc, #212]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a34      	ldr	r2, [pc, #208]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80075de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e4:	f7fb fed2 	bl	800338c <HAL_GetTick>
 80075e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80075ea:	e008      	b.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075ec:	f7fb fece 	bl	800338c <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b64      	cmp	r3, #100	@ 0x64
 80075f8:	d901      	bls.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e38f      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80075fe:	4b2c      	ldr	r3, [pc, #176]	@ (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007606:	2b00      	cmp	r3, #0
 8007608:	d0f0      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800760a:	4b28      	ldr	r3, [pc, #160]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800760c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800760e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007612:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d035      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	429a      	cmp	r2, r3
 8007626:	d02e      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007628:	4b20      	ldr	r3, [pc, #128]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800762a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007630:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007632:	4b1e      	ldr	r3, [pc, #120]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007636:	4a1d      	ldr	r2, [pc, #116]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800763c:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800763e:	4b1b      	ldr	r3, [pc, #108]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007642:	4a1a      	ldr	r2, [pc, #104]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007648:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800764a:	4a18      	ldr	r2, [pc, #96]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007650:	4b16      	ldr	r3, [pc, #88]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b01      	cmp	r3, #1
 800765a:	d114      	bne.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800765c:	f7fb fe96 	bl	800338c <HAL_GetTick>
 8007660:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007662:	e00a      	b.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007664:	f7fb fe92 	bl	800338c <HAL_GetTick>
 8007668:	4602      	mov	r2, r0
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	1ad3      	subs	r3, r2, r3
 800766e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007672:	4293      	cmp	r3, r2
 8007674:	d901      	bls.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007676:	2303      	movs	r3, #3
 8007678:	e351      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800767a:	4b0c      	ldr	r3, [pc, #48]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800767c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0ee      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800768e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007692:	d111      	bne.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007694:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80076a0:	4b04      	ldr	r3, [pc, #16]	@ (80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80076a2:	400b      	ands	r3, r1
 80076a4:	4901      	ldr	r1, [pc, #4]	@ (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80076a6:	4313      	orrs	r3, r2
 80076a8:	608b      	str	r3, [r1, #8]
 80076aa:	e00b      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80076ac:	40023800 	.word	0x40023800
 80076b0:	40007000 	.word	0x40007000
 80076b4:	0ffffcff 	.word	0x0ffffcff
 80076b8:	4bac      	ldr	r3, [pc, #688]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	4aab      	ldr	r2, [pc, #684]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076be:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80076c2:	6093      	str	r3, [r2, #8]
 80076c4:	4ba9      	ldr	r3, [pc, #676]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076c6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d0:	49a6      	ldr	r1, [pc, #664]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076d2:	4313      	orrs	r3, r2
 80076d4:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 0310 	and.w	r3, r3, #16
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d010      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80076e2:	4ba2      	ldr	r3, [pc, #648]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80076e8:	4aa0      	ldr	r2, [pc, #640]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80076ee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 80076f2:	4b9e      	ldr	r3, [pc, #632]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fc:	499b      	ldr	r1, [pc, #620]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007710:	4b96      	ldr	r3, [pc, #600]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007712:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007716:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800771e:	4993      	ldr	r1, [pc, #588]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007720:	4313      	orrs	r3, r2
 8007722:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800772e:	2b00      	cmp	r3, #0
 8007730:	d00a      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007732:	4b8e      	ldr	r3, [pc, #568]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007734:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007738:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007740:	498a      	ldr	r1, [pc, #552]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007742:	4313      	orrs	r3, r2
 8007744:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d00a      	beq.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007754:	4b85      	ldr	r3, [pc, #532]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800775a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007762:	4982      	ldr	r1, [pc, #520]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007764:	4313      	orrs	r3, r2
 8007766:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00a      	beq.n	800778c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007776:	4b7d      	ldr	r3, [pc, #500]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007784:	4979      	ldr	r1, [pc, #484]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007786:	4313      	orrs	r3, r2
 8007788:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00a      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007798:	4b74      	ldr	r3, [pc, #464]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800779a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800779e:	f023 0203 	bic.w	r2, r3, #3
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077a6:	4971      	ldr	r1, [pc, #452]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00a      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80077ba:	4b6c      	ldr	r3, [pc, #432]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c0:	f023 020c 	bic.w	r2, r3, #12
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077c8:	4968      	ldr	r1, [pc, #416]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077ca:	4313      	orrs	r3, r2
 80077cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00a      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80077dc:	4b63      	ldr	r3, [pc, #396]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e2:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077ea:	4960      	ldr	r1, [pc, #384]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80077ec:	4313      	orrs	r3, r2
 80077ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80077fe:	4b5b      	ldr	r3, [pc, #364]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007800:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007804:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800780c:	4957      	ldr	r1, [pc, #348]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800780e:	4313      	orrs	r3, r2
 8007810:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800781c:	2b00      	cmp	r3, #0
 800781e:	d00a      	beq.n	8007836 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007820:	4b52      	ldr	r3, [pc, #328]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007822:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007826:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800782e:	494f      	ldr	r1, [pc, #316]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007830:	4313      	orrs	r3, r2
 8007832:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00a      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007842:	4b4a      	ldr	r3, [pc, #296]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007848:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007850:	4946      	ldr	r1, [pc, #280]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007852:	4313      	orrs	r3, r2
 8007854:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00a      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007864:	4b41      	ldr	r3, [pc, #260]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007866:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800786a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007872:	493e      	ldr	r1, [pc, #248]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007874:	4313      	orrs	r3, r2
 8007876:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007886:	4b39      	ldr	r3, [pc, #228]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800788c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007894:	4935      	ldr	r1, [pc, #212]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007896:	4313      	orrs	r3, r2
 8007898:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d00a      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80078a8:	4b30      	ldr	r3, [pc, #192]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078ae:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078b6:	492d      	ldr	r1, [pc, #180]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078b8:	4313      	orrs	r3, r2
 80078ba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d011      	beq.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80078ca:	4b28      	ldr	r3, [pc, #160]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078d0:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078d8:	4924      	ldr	r1, [pc, #144]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078e8:	d101      	bne.n	80078ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80078ea:	2301      	movs	r3, #1
 80078ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d001      	beq.n	80078fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80078fa:	2301      	movs	r3, #1
 80078fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d00a      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800790a:	4b18      	ldr	r3, [pc, #96]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800790c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007910:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007918:	4914      	ldr	r1, [pc, #80]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800791a:	4313      	orrs	r3, r2
 800791c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00b      	beq.n	8007944 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800792c:	4b0f      	ldr	r3, [pc, #60]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800792e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007932:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800793c:	490b      	ldr	r1, [pc, #44]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800793e:	4313      	orrs	r3, r2
 8007940:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d00f      	beq.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8007950:	4b06      	ldr	r3, [pc, #24]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007956:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007960:	4902      	ldr	r1, [pc, #8]	@ (800796c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8007962:	4313      	orrs	r3, r2
 8007964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8007968:	e002      	b.n	8007970 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800796a:	bf00      	nop
 800796c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00b      	beq.n	8007994 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800797c:	4b8a      	ldr	r3, [pc, #552]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800797e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007982:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800798c:	4986      	ldr	r1, [pc, #536]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800798e:	4313      	orrs	r3, r2
 8007990:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00b      	beq.n	80079b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80079a0:	4b81      	ldr	r3, [pc, #516]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079a6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079b0:	497d      	ldr	r1, [pc, #500]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d006      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 80d6 	beq.w	8007b78 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80079cc:	4b76      	ldr	r3, [pc, #472]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a75      	ldr	r2, [pc, #468]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079d2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80079d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079d8:	f7fb fcd8 	bl	800338c <HAL_GetTick>
 80079dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80079e0:	f7fb fcd4 	bl	800338c <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b64      	cmp	r3, #100	@ 0x64
 80079ec:	d901      	bls.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e195      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80079f2:	4b6d      	ldr	r3, [pc, #436]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1f0      	bne.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d021      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x572>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d11d      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007a12:	4b65      	ldr	r3, [pc, #404]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a18:	0c1b      	lsrs	r3, r3, #16
 8007a1a:	f003 0303 	and.w	r3, r3, #3
 8007a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007a20:	4b61      	ldr	r3, [pc, #388]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a26:	0e1b      	lsrs	r3, r3, #24
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	019a      	lsls	r2, r3, #6
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	041b      	lsls	r3, r3, #16
 8007a38:	431a      	orrs	r2, r3
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	061b      	lsls	r3, r3, #24
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	071b      	lsls	r3, r3, #28
 8007a46:	4958      	ldr	r1, [pc, #352]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d004      	beq.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007a62:	d00a      	beq.n	8007a7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d02e      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a78:	d129      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a80:	0c1b      	lsrs	r3, r3, #16
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007a88:	4b47      	ldr	r3, [pc, #284]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007a8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007a8e:	0f1b      	lsrs	r3, r3, #28
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	019a      	lsls	r2, r3, #6
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	041b      	lsls	r3, r3, #16
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	061b      	lsls	r3, r3, #24
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	071b      	lsls	r3, r3, #28
 8007aae:	493e      	ldr	r1, [pc, #248]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007ab6:	4b3c      	ldr	r3, [pc, #240]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007abc:	f023 021f 	bic.w	r2, r3, #31
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	4938      	ldr	r1, [pc, #224]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d01d      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007ada:	4b33      	ldr	r3, [pc, #204]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ae0:	0e1b      	lsrs	r3, r3, #24
 8007ae2:	f003 030f 	and.w	r3, r3, #15
 8007ae6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007aea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007aee:	0f1b      	lsrs	r3, r3, #28
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	019a      	lsls	r2, r3, #6
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	041b      	lsls	r3, r3, #16
 8007b02:	431a      	orrs	r2, r3
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	061b      	lsls	r3, r3, #24
 8007b08:	431a      	orrs	r2, r3
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	071b      	lsls	r3, r3, #28
 8007b0e:	4926      	ldr	r1, [pc, #152]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b10:	4313      	orrs	r3, r2
 8007b12:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d011      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	019a      	lsls	r2, r3, #6
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	041b      	lsls	r3, r3, #16
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	061b      	lsls	r3, r3, #24
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	689b      	ldr	r3, [r3, #8]
 8007b3c:	071b      	lsls	r3, r3, #28
 8007b3e:	491a      	ldr	r1, [pc, #104]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b46:	4b18      	ldr	r3, [pc, #96]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a17      	ldr	r2, [pc, #92]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007b50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b52:	f7fb fc1b 	bl	800338c <HAL_GetTick>
 8007b56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b58:	e008      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007b5a:	f7fb fc17 	bl	800338c <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b64      	cmp	r3, #100	@ 0x64
 8007b66:	d901      	bls.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e0d8      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007b6c:	4b0e      	ldr	r3, [pc, #56]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0f0      	beq.n	8007b5a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007b78:	69bb      	ldr	r3, [r7, #24]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	f040 80ce 	bne.w	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007b80:	4b09      	ldr	r3, [pc, #36]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a08      	ldr	r2, [pc, #32]	@ (8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8007b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b8c:	f7fb fbfe 	bl	800338c <HAL_GetTick>
 8007b90:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007b92:	e00b      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b94:	f7fb fbfa 	bl	800338c <HAL_GetTick>
 8007b98:	4602      	mov	r2, r0
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	1ad3      	subs	r3, r2, r3
 8007b9e:	2b64      	cmp	r3, #100	@ 0x64
 8007ba0:	d904      	bls.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e0bb      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007ba6:	bf00      	nop
 8007ba8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007bac:	4b5e      	ldr	r3, [pc, #376]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007bb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007bb8:	d0ec      	beq.n	8007b94 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d003      	beq.n	8007bce <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d009      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d02e      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d12a      	bne.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007be2:	4b51      	ldr	r3, [pc, #324]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007be8:	0c1b      	lsrs	r3, r3, #16
 8007bea:	f003 0303 	and.w	r3, r3, #3
 8007bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007bf6:	0f1b      	lsrs	r3, r3, #28
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	695b      	ldr	r3, [r3, #20]
 8007c02:	019a      	lsls	r2, r3, #6
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	041b      	lsls	r3, r3, #16
 8007c08:	431a      	orrs	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	061b      	lsls	r3, r3, #24
 8007c10:	431a      	orrs	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	071b      	lsls	r3, r3, #28
 8007c16:	4944      	ldr	r1, [pc, #272]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007c1e:	4b42      	ldr	r3, [pc, #264]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c24:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	021b      	lsls	r3, r3, #8
 8007c30:	493d      	ldr	r1, [pc, #244]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d022      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007c4c:	d11d      	bne.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c4e:	4b36      	ldr	r3, [pc, #216]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c54:	0e1b      	lsrs	r3, r3, #24
 8007c56:	f003 030f 	and.w	r3, r3, #15
 8007c5a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007c5c:	4b32      	ldr	r3, [pc, #200]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c62:	0f1b      	lsrs	r3, r3, #28
 8007c64:	f003 0307 	and.w	r3, r3, #7
 8007c68:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	019a      	lsls	r2, r3, #6
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6a1b      	ldr	r3, [r3, #32]
 8007c74:	041b      	lsls	r3, r3, #16
 8007c76:	431a      	orrs	r2, r3
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	061b      	lsls	r3, r3, #24
 8007c7c:	431a      	orrs	r2, r3
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	071b      	lsls	r3, r3, #28
 8007c82:	4929      	ldr	r1, [pc, #164]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0308 	and.w	r3, r3, #8
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d028      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007c96:	4b24      	ldr	r3, [pc, #144]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c9c:	0e1b      	lsrs	r3, r3, #24
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ca4:	4b20      	ldr	r3, [pc, #128]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007caa:	0c1b      	lsrs	r3, r3, #16
 8007cac:	f003 0303 	and.w	r3, r3, #3
 8007cb0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	019a      	lsls	r2, r3, #6
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	041b      	lsls	r3, r3, #16
 8007cbc:	431a      	orrs	r2, r3
 8007cbe:	693b      	ldr	r3, [r7, #16]
 8007cc0:	061b      	lsls	r3, r3, #24
 8007cc2:	431a      	orrs	r2, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	071b      	lsls	r3, r3, #28
 8007cca:	4917      	ldr	r1, [pc, #92]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007cd2:	4b15      	ldr	r3, [pc, #84]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007cd8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ce0:	4911      	ldr	r1, [pc, #68]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	4a0e      	ldr	r2, [pc, #56]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf4:	f7fb fb4a 	bl	800338c <HAL_GetTick>
 8007cf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007cfa:	e008      	b.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007cfc:	f7fb fb46 	bl	800338c <HAL_GetTick>
 8007d00:	4602      	mov	r2, r0
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	2b64      	cmp	r3, #100	@ 0x64
 8007d08:	d901      	bls.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e007      	b.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007d0e:	4b06      	ldr	r3, [pc, #24]	@ (8007d28 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007d1a:	d1ef      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8007d1c:	2300      	movs	r3, #0
}
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3720      	adds	r7, #32
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	40023800 	.word	0x40023800

08007d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e09d      	b.n	8007e7a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d108      	bne.n	8007d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	685b      	ldr	r3, [r3, #4]
 8007d4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d4e:	d009      	beq.n	8007d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2200      	movs	r2, #0
 8007d54:	61da      	str	r2, [r3, #28]
 8007d56:	e005      	b.n	8007d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d106      	bne.n	8007d84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7fb f882 	bl	8002e88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2202      	movs	r2, #2
 8007d88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007da4:	d902      	bls.n	8007dac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007da6:	2300      	movs	r3, #0
 8007da8:	60fb      	str	r3, [r7, #12]
 8007daa:	e002      	b.n	8007db2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007dac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007db0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007dba:	d007      	beq.n	8007dcc <HAL_SPI_Init+0xa0>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007dc4:	d002      	beq.n	8007dcc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007ddc:	431a      	orrs	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	f003 0302 	and.w	r3, r3, #2
 8007de6:	431a      	orrs	r2, r3
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	695b      	ldr	r3, [r3, #20]
 8007dec:	f003 0301 	and.w	r3, r3, #1
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e04:	431a      	orrs	r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e0e:	ea42 0103 	orr.w	r1, r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e16:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	430a      	orrs	r2, r1
 8007e20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	0c1b      	lsrs	r3, r3, #16
 8007e28:	f003 0204 	and.w	r2, r3, #4
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e30:	f003 0310 	and.w	r3, r3, #16
 8007e34:	431a      	orrs	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e3a:	f003 0308 	and.w	r3, r3, #8
 8007e3e:	431a      	orrs	r2, r3
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007e48:	ea42 0103 	orr.w	r1, r2, r3
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	69da      	ldr	r2, [r3, #28]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b088      	sub	sp, #32
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	603b      	str	r3, [r7, #0]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e92:	2300      	movs	r3, #0
 8007e94:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d101      	bne.n	8007ea4 <HAL_SPI_Transmit+0x22>
 8007ea0:	2302      	movs	r3, #2
 8007ea2:	e15f      	b.n	8008164 <HAL_SPI_Transmit+0x2e2>
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007eac:	f7fb fa6e 	bl	800338c <HAL_GetTick>
 8007eb0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8007eb2:	88fb      	ldrh	r3, [r7, #6]
 8007eb4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d002      	beq.n	8007ec8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ec6:	e148      	b.n	800815a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d002      	beq.n	8007ed4 <HAL_SPI_Transmit+0x52>
 8007ece:	88fb      	ldrh	r3, [r7, #6]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d102      	bne.n	8007eda <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007ed8:	e13f      	b.n	800815a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2203      	movs	r2, #3
 8007ede:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	68ba      	ldr	r2, [r7, #8]
 8007eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	88fa      	ldrh	r2, [r7, #6]
 8007ef2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	88fa      	ldrh	r2, [r7, #6]
 8007ef8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2200      	movs	r2, #0
 8007efe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	2200      	movs	r2, #0
 8007f14:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f24:	d10f      	bne.n	8007f46 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f50:	2b40      	cmp	r3, #64	@ 0x40
 8007f52:	d007      	beq.n	8007f64 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681a      	ldr	r2, [r3, #0]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007f6c:	d94f      	bls.n	800800e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <HAL_SPI_Transmit+0xfa>
 8007f76:	8afb      	ldrh	r3, [r7, #22]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d142      	bne.n	8008002 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f80:	881a      	ldrh	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f8c:	1c9a      	adds	r2, r3, #2
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007f96:	b29b      	uxth	r3, r3
 8007f98:	3b01      	subs	r3, #1
 8007f9a:	b29a      	uxth	r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007fa0:	e02f      	b.n	8008002 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f003 0302 	and.w	r3, r3, #2
 8007fac:	2b02      	cmp	r3, #2
 8007fae:	d112      	bne.n	8007fd6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fb4:	881a      	ldrh	r2, [r3, #0]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fc0:	1c9a      	adds	r2, r3, #2
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	b29a      	uxth	r2, r3
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007fd4:	e015      	b.n	8008002 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007fd6:	f7fb f9d9 	bl	800338c <HAL_GetTick>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	1ad3      	subs	r3, r2, r3
 8007fe0:	683a      	ldr	r2, [r7, #0]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d803      	bhi.n	8007fee <HAL_SPI_Transmit+0x16c>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fec:	d102      	bne.n	8007ff4 <HAL_SPI_Transmit+0x172>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d106      	bne.n	8008002 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008000:	e0ab      	b.n	800815a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008006:	b29b      	uxth	r3, r3
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1ca      	bne.n	8007fa2 <HAL_SPI_Transmit+0x120>
 800800c:	e080      	b.n	8008110 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d002      	beq.n	800801c <HAL_SPI_Transmit+0x19a>
 8008016:	8afb      	ldrh	r3, [r7, #22]
 8008018:	2b01      	cmp	r3, #1
 800801a:	d174      	bne.n	8008106 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008020:	b29b      	uxth	r3, r3
 8008022:	2b01      	cmp	r3, #1
 8008024:	d912      	bls.n	800804c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802a:	881a      	ldrh	r2, [r3, #0]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008036:	1c9a      	adds	r2, r3, #2
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008040:	b29b      	uxth	r3, r3
 8008042:	3b02      	subs	r3, #2
 8008044:	b29a      	uxth	r2, r3
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800804a:	e05c      	b.n	8008106 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b01      	subs	r3, #1
 800806c:	b29a      	uxth	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008072:	e048      	b.n	8008106 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b02      	cmp	r3, #2
 8008080:	d12b      	bne.n	80080da <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008086:	b29b      	uxth	r3, r3
 8008088:	2b01      	cmp	r3, #1
 800808a:	d912      	bls.n	80080b2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008090:	881a      	ldrh	r2, [r3, #0]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809c:	1c9a      	adds	r2, r3, #2
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080a6:	b29b      	uxth	r3, r3
 80080a8:	3b02      	subs	r3, #2
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080b0:	e029      	b.n	8008106 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	330c      	adds	r3, #12
 80080bc:	7812      	ldrb	r2, [r2, #0]
 80080be:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080c4:	1c5a      	adds	r2, r3, #1
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080d8:	e015      	b.n	8008106 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080da:	f7fb f957 	bl	800338c <HAL_GetTick>
 80080de:	4602      	mov	r2, r0
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	1ad3      	subs	r3, r2, r3
 80080e4:	683a      	ldr	r2, [r7, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d803      	bhi.n	80080f2 <HAL_SPI_Transmit+0x270>
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f0:	d102      	bne.n	80080f8 <HAL_SPI_Transmit+0x276>
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d106      	bne.n	8008106 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80080f8:	2303      	movs	r3, #3
 80080fa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8008104:	e029      	b.n	800815a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800810a:	b29b      	uxth	r3, r3
 800810c:	2b00      	cmp	r3, #0
 800810e:	d1b1      	bne.n	8008074 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	6839      	ldr	r1, [r7, #0]
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f000 f947 	bl	80083a8 <SPI_EndRxTxTransaction>
 800811a:	4603      	mov	r3, r0
 800811c:	2b00      	cmp	r3, #0
 800811e:	d002      	beq.n	8008126 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	2220      	movs	r2, #32
 8008124:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	689b      	ldr	r3, [r3, #8]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800812e:	2300      	movs	r3, #0
 8008130:	613b      	str	r3, [r7, #16]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68db      	ldr	r3, [r3, #12]
 8008138:	613b      	str	r3, [r7, #16]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	613b      	str	r3, [r7, #16]
 8008142:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008148:	2b00      	cmp	r3, #0
 800814a:	d002      	beq.n	8008152 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800814c:	2301      	movs	r3, #1
 800814e:	77fb      	strb	r3, [r7, #31]
 8008150:	e003      	b.n	800815a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8008162:	7ffb      	ldrb	r3, [r7, #31]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3720      	adds	r7, #32
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b088      	sub	sp, #32
 8008170:	af00      	add	r7, sp, #0
 8008172:	60f8      	str	r0, [r7, #12]
 8008174:	60b9      	str	r1, [r7, #8]
 8008176:	603b      	str	r3, [r7, #0]
 8008178:	4613      	mov	r3, r2
 800817a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800817c:	f7fb f906 	bl	800338c <HAL_GetTick>
 8008180:	4602      	mov	r2, r0
 8008182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008184:	1a9b      	subs	r3, r3, r2
 8008186:	683a      	ldr	r2, [r7, #0]
 8008188:	4413      	add	r3, r2
 800818a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800818c:	f7fb f8fe 	bl	800338c <HAL_GetTick>
 8008190:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008192:	4b39      	ldr	r3, [pc, #228]	@ (8008278 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	015b      	lsls	r3, r3, #5
 8008198:	0d1b      	lsrs	r3, r3, #20
 800819a:	69fa      	ldr	r2, [r7, #28]
 800819c:	fb02 f303 	mul.w	r3, r2, r3
 80081a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081a2:	e054      	b.n	800824e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081aa:	d050      	beq.n	800824e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081ac:	f7fb f8ee 	bl	800338c <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	69bb      	ldr	r3, [r7, #24]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	69fa      	ldr	r2, [r7, #28]
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d902      	bls.n	80081c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d13d      	bne.n	800823e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80081d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081da:	d111      	bne.n	8008200 <SPI_WaitFlagStateUntilTimeout+0x94>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081e4:	d004      	beq.n	80081f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80081ee:	d107      	bne.n	8008200 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80081fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008204:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008208:	d10f      	bne.n	800822a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008218:	601a      	str	r2, [r3, #0]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008228:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2200      	movs	r2, #0
 8008236:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800823a:	2303      	movs	r3, #3
 800823c:	e017      	b.n	800826e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d101      	bne.n	8008248 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008244:	2300      	movs	r3, #0
 8008246:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	3b01      	subs	r3, #1
 800824c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	689a      	ldr	r2, [r3, #8]
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	4013      	ands	r3, r2
 8008258:	68ba      	ldr	r2, [r7, #8]
 800825a:	429a      	cmp	r2, r3
 800825c:	bf0c      	ite	eq
 800825e:	2301      	moveq	r3, #1
 8008260:	2300      	movne	r3, #0
 8008262:	b2db      	uxtb	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	79fb      	ldrb	r3, [r7, #7]
 8008268:	429a      	cmp	r2, r3
 800826a:	d19b      	bne.n	80081a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3720      	adds	r7, #32
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}
 8008276:	bf00      	nop
 8008278:	20000034 	.word	0x20000034

0800827c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b08a      	sub	sp, #40	@ 0x28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800828a:	2300      	movs	r3, #0
 800828c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800828e:	f7fb f87d 	bl	800338c <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008296:	1a9b      	subs	r3, r3, r2
 8008298:	683a      	ldr	r2, [r7, #0]
 800829a:	4413      	add	r3, r2
 800829c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800829e:	f7fb f875 	bl	800338c <HAL_GetTick>
 80082a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	330c      	adds	r3, #12
 80082aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80082ac:	4b3d      	ldr	r3, [pc, #244]	@ (80083a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80082ae:	681a      	ldr	r2, [r3, #0]
 80082b0:	4613      	mov	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4413      	add	r3, r2
 80082b6:	00da      	lsls	r2, r3, #3
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	0d1b      	lsrs	r3, r3, #20
 80082bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082be:	fb02 f303 	mul.w	r3, r2, r3
 80082c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80082c4:	e060      	b.n	8008388 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80082cc:	d107      	bne.n	80082de <SPI_WaitFifoStateUntilTimeout+0x62>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d104      	bne.n	80082de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80082dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e4:	d050      	beq.n	8008388 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80082e6:	f7fb f851 	bl	800338c <HAL_GetTick>
 80082ea:	4602      	mov	r2, r0
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	1ad3      	subs	r3, r2, r3
 80082f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d902      	bls.n	80082fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80082f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d13d      	bne.n	8008378 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	685a      	ldr	r2, [r3, #4]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800830a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008314:	d111      	bne.n	800833a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800831e:	d004      	beq.n	800832a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008328:	d107      	bne.n	800833a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	681a      	ldr	r2, [r3, #0]
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008338:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008342:	d10f      	bne.n	8008364 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008362:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	2201      	movs	r2, #1
 8008368:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	e010      	b.n	800839a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008378:	69bb      	ldr	r3, [r7, #24]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d101      	bne.n	8008382 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	3b01      	subs	r3, #1
 8008386:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	4013      	ands	r3, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	429a      	cmp	r2, r3
 8008396:	d196      	bne.n	80082c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3728      	adds	r7, #40	@ 0x28
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
 80083a2:	bf00      	nop
 80083a4:	20000034 	.word	0x20000034

080083a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af02      	add	r7, sp, #8
 80083ae:	60f8      	str	r0, [r7, #12]
 80083b0:	60b9      	str	r1, [r7, #8]
 80083b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f7ff ff5b 	bl	800827c <SPI_WaitFifoStateUntilTimeout>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d007      	beq.n	80083dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80083d0:	f043 0220 	orr.w	r2, r3, #32
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e046      	b.n	800846a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80083dc:	4b25      	ldr	r3, [pc, #148]	@ (8008474 <SPI_EndRxTxTransaction+0xcc>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a25      	ldr	r2, [pc, #148]	@ (8008478 <SPI_EndRxTxTransaction+0xd0>)
 80083e2:	fba2 2303 	umull	r2, r3, r2, r3
 80083e6:	0d5b      	lsrs	r3, r3, #21
 80083e8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80083ec:	fb02 f303 	mul.w	r3, r2, r3
 80083f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083fa:	d112      	bne.n	8008422 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	2200      	movs	r2, #0
 8008404:	2180      	movs	r1, #128	@ 0x80
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f7ff feb0 	bl	800816c <SPI_WaitFlagStateUntilTimeout>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d016      	beq.n	8008440 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008416:	f043 0220 	orr.w	r2, r3, #32
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800841e:	2303      	movs	r3, #3
 8008420:	e023      	b.n	800846a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00a      	beq.n	800843e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	3b01      	subs	r3, #1
 800842c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008438:	2b80      	cmp	r3, #128	@ 0x80
 800843a:	d0f2      	beq.n	8008422 <SPI_EndRxTxTransaction+0x7a>
 800843c:	e000      	b.n	8008440 <SPI_EndRxTxTransaction+0x98>
        break;
 800843e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	68bb      	ldr	r3, [r7, #8]
 8008446:	2200      	movs	r2, #0
 8008448:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f7ff ff15 	bl	800827c <SPI_WaitFifoStateUntilTimeout>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d007      	beq.n	8008468 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800845c:	f043 0220 	orr.w	r2, r3, #32
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e000      	b.n	800846a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	20000034 	.word	0x20000034
 8008478:	165e9f81 	.word	0x165e9f81

0800847c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e049      	b.n	8008522 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d106      	bne.n	80084a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f7fa fec8 	bl	8003238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2202      	movs	r2, #2
 80084ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681a      	ldr	r2, [r3, #0]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	3304      	adds	r3, #4
 80084b8:	4619      	mov	r1, r3
 80084ba:	4610      	mov	r0, r2
 80084bc:	f000 f900 	bl	80086c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2201      	movs	r2, #1
 80084cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2201      	movs	r2, #1
 80084e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2201      	movs	r2, #1
 80084f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2201      	movs	r2, #1
 8008504:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2201      	movs	r2, #1
 800850c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008520:	2300      	movs	r3, #0
}
 8008522:	4618      	mov	r0, r3
 8008524:	3708      	adds	r7, #8
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
	...

0800852c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008536:	2300      	movs	r3, #0
 8008538:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008540:	2b01      	cmp	r3, #1
 8008542:	d101      	bne.n	8008548 <HAL_TIM_ConfigClockSource+0x1c>
 8008544:	2302      	movs	r3, #2
 8008546:	e0b4      	b.n	80086b2 <HAL_TIM_ConfigClockSource+0x186>
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2202      	movs	r2, #2
 8008554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	4b56      	ldr	r3, [pc, #344]	@ (80086bc <HAL_TIM_ConfigClockSource+0x190>)
 8008564:	4013      	ands	r3, r2
 8008566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800856e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68ba      	ldr	r2, [r7, #8]
 8008576:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008580:	d03e      	beq.n	8008600 <HAL_TIM_ConfigClockSource+0xd4>
 8008582:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008586:	f200 8087 	bhi.w	8008698 <HAL_TIM_ConfigClockSource+0x16c>
 800858a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800858e:	f000 8086 	beq.w	800869e <HAL_TIM_ConfigClockSource+0x172>
 8008592:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008596:	d87f      	bhi.n	8008698 <HAL_TIM_ConfigClockSource+0x16c>
 8008598:	2b70      	cmp	r3, #112	@ 0x70
 800859a:	d01a      	beq.n	80085d2 <HAL_TIM_ConfigClockSource+0xa6>
 800859c:	2b70      	cmp	r3, #112	@ 0x70
 800859e:	d87b      	bhi.n	8008698 <HAL_TIM_ConfigClockSource+0x16c>
 80085a0:	2b60      	cmp	r3, #96	@ 0x60
 80085a2:	d050      	beq.n	8008646 <HAL_TIM_ConfigClockSource+0x11a>
 80085a4:	2b60      	cmp	r3, #96	@ 0x60
 80085a6:	d877      	bhi.n	8008698 <HAL_TIM_ConfigClockSource+0x16c>
 80085a8:	2b50      	cmp	r3, #80	@ 0x50
 80085aa:	d03c      	beq.n	8008626 <HAL_TIM_ConfigClockSource+0xfa>
 80085ac:	2b50      	cmp	r3, #80	@ 0x50
 80085ae:	d873      	bhi.n	8008698 <HAL_TIM_ConfigClockSource+0x16c>
 80085b0:	2b40      	cmp	r3, #64	@ 0x40
 80085b2:	d058      	beq.n	8008666 <HAL_TIM_ConfigClockSource+0x13a>
 80085b4:	2b40      	cmp	r3, #64	@ 0x40
 80085b6:	d86f      	bhi.n	8008698 <HAL_TIM_ConfigClockSource+0x16c>
 80085b8:	2b30      	cmp	r3, #48	@ 0x30
 80085ba:	d064      	beq.n	8008686 <HAL_TIM_ConfigClockSource+0x15a>
 80085bc:	2b30      	cmp	r3, #48	@ 0x30
 80085be:	d86b      	bhi.n	8008698 <HAL_TIM_ConfigClockSource+0x16c>
 80085c0:	2b20      	cmp	r3, #32
 80085c2:	d060      	beq.n	8008686 <HAL_TIM_ConfigClockSource+0x15a>
 80085c4:	2b20      	cmp	r3, #32
 80085c6:	d867      	bhi.n	8008698 <HAL_TIM_ConfigClockSource+0x16c>
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d05c      	beq.n	8008686 <HAL_TIM_ConfigClockSource+0x15a>
 80085cc:	2b10      	cmp	r3, #16
 80085ce:	d05a      	beq.n	8008686 <HAL_TIM_ConfigClockSource+0x15a>
 80085d0:	e062      	b.n	8008698 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085e2:	f000 f993 	bl	800890c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80085ee:	68bb      	ldr	r3, [r7, #8]
 80085f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	609a      	str	r2, [r3, #8]
      break;
 80085fe:	e04f      	b.n	80086a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008610:	f000 f97c 	bl	800890c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	689a      	ldr	r2, [r3, #8]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008622:	609a      	str	r2, [r3, #8]
      break;
 8008624:	e03c      	b.n	80086a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008632:	461a      	mov	r2, r3
 8008634:	f000 f8f0 	bl	8008818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2150      	movs	r1, #80	@ 0x50
 800863e:	4618      	mov	r0, r3
 8008640:	f000 f949 	bl	80088d6 <TIM_ITRx_SetConfig>
      break;
 8008644:	e02c      	b.n	80086a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008652:	461a      	mov	r2, r3
 8008654:	f000 f90f 	bl	8008876 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2160      	movs	r1, #96	@ 0x60
 800865e:	4618      	mov	r0, r3
 8008660:	f000 f939 	bl	80088d6 <TIM_ITRx_SetConfig>
      break;
 8008664:	e01c      	b.n	80086a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008672:	461a      	mov	r2, r3
 8008674:	f000 f8d0 	bl	8008818 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2140      	movs	r1, #64	@ 0x40
 800867e:	4618      	mov	r0, r3
 8008680:	f000 f929 	bl	80088d6 <TIM_ITRx_SetConfig>
      break;
 8008684:	e00c      	b.n	80086a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4619      	mov	r1, r3
 8008690:	4610      	mov	r0, r2
 8008692:	f000 f920 	bl	80088d6 <TIM_ITRx_SetConfig>
      break;
 8008696:	e003      	b.n	80086a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	73fb      	strb	r3, [r7, #15]
      break;
 800869c:	e000      	b.n	80086a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800869e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2201      	movs	r2, #1
 80086a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2200      	movs	r2, #0
 80086ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80086b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3710      	adds	r7, #16
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	fffeff88 	.word	0xfffeff88

080086c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	4a46      	ldr	r2, [pc, #280]	@ (80087ec <TIM_Base_SetConfig+0x12c>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	d013      	beq.n	8008700 <TIM_Base_SetConfig+0x40>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086de:	d00f      	beq.n	8008700 <TIM_Base_SetConfig+0x40>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4a43      	ldr	r2, [pc, #268]	@ (80087f0 <TIM_Base_SetConfig+0x130>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d00b      	beq.n	8008700 <TIM_Base_SetConfig+0x40>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a42      	ldr	r2, [pc, #264]	@ (80087f4 <TIM_Base_SetConfig+0x134>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d007      	beq.n	8008700 <TIM_Base_SetConfig+0x40>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a41      	ldr	r2, [pc, #260]	@ (80087f8 <TIM_Base_SetConfig+0x138>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d003      	beq.n	8008700 <TIM_Base_SetConfig+0x40>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a40      	ldr	r2, [pc, #256]	@ (80087fc <TIM_Base_SetConfig+0x13c>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d108      	bne.n	8008712 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	4313      	orrs	r3, r2
 8008710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	4a35      	ldr	r2, [pc, #212]	@ (80087ec <TIM_Base_SetConfig+0x12c>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d02b      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008720:	d027      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a32      	ldr	r2, [pc, #200]	@ (80087f0 <TIM_Base_SetConfig+0x130>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d023      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a31      	ldr	r2, [pc, #196]	@ (80087f4 <TIM_Base_SetConfig+0x134>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d01f      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a30      	ldr	r2, [pc, #192]	@ (80087f8 <TIM_Base_SetConfig+0x138>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d01b      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a2f      	ldr	r2, [pc, #188]	@ (80087fc <TIM_Base_SetConfig+0x13c>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d017      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a2e      	ldr	r2, [pc, #184]	@ (8008800 <TIM_Base_SetConfig+0x140>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d013      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a2d      	ldr	r2, [pc, #180]	@ (8008804 <TIM_Base_SetConfig+0x144>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d00f      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a2c      	ldr	r2, [pc, #176]	@ (8008808 <TIM_Base_SetConfig+0x148>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d00b      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a2b      	ldr	r2, [pc, #172]	@ (800880c <TIM_Base_SetConfig+0x14c>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d007      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a2a      	ldr	r2, [pc, #168]	@ (8008810 <TIM_Base_SetConfig+0x150>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d003      	beq.n	8008772 <TIM_Base_SetConfig+0xb2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a29      	ldr	r2, [pc, #164]	@ (8008814 <TIM_Base_SetConfig+0x154>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d108      	bne.n	8008784 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008778:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	4313      	orrs	r3, r2
 8008782:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	695b      	ldr	r3, [r3, #20]
 800878e:	4313      	orrs	r3, r2
 8008790:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681a      	ldr	r2, [r3, #0]
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a10      	ldr	r2, [pc, #64]	@ (80087ec <TIM_Base_SetConfig+0x12c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d003      	beq.n	80087b8 <TIM_Base_SetConfig+0xf8>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a12      	ldr	r2, [pc, #72]	@ (80087fc <TIM_Base_SetConfig+0x13c>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d103      	bne.n	80087c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	691a      	ldr	r2, [r3, #16]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	f003 0301 	and.w	r3, r3, #1
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d105      	bne.n	80087de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f023 0201 	bic.w	r2, r3, #1
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	611a      	str	r2, [r3, #16]
  }
}
 80087de:	bf00      	nop
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	40010000 	.word	0x40010000
 80087f0:	40000400 	.word	0x40000400
 80087f4:	40000800 	.word	0x40000800
 80087f8:	40000c00 	.word	0x40000c00
 80087fc:	40010400 	.word	0x40010400
 8008800:	40014000 	.word	0x40014000
 8008804:	40014400 	.word	0x40014400
 8008808:	40014800 	.word	0x40014800
 800880c:	40001800 	.word	0x40001800
 8008810:	40001c00 	.word	0x40001c00
 8008814:	40002000 	.word	0x40002000

08008818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	f023 0201 	bic.w	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f023 030a 	bic.w	r3, r3, #10
 8008854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4313      	orrs	r3, r2
 800885c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	621a      	str	r2, [r3, #32]
}
 800886a:	bf00      	nop
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008876:	b480      	push	{r7}
 8008878:	b087      	sub	sp, #28
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	f023 0210 	bic.w	r2, r3, #16
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	031b      	lsls	r3, r3, #12
 80088a6:	693a      	ldr	r2, [r7, #16]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	697a      	ldr	r2, [r7, #20]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	693a      	ldr	r2, [r7, #16]
 80088c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	621a      	str	r2, [r3, #32]
}
 80088ca:	bf00      	nop
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	f043 0307 	orr.w	r3, r3, #7
 80088f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	609a      	str	r2, [r3, #8]
}
 8008900:	bf00      	nop
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	021a      	lsls	r2, r3, #8
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	431a      	orrs	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4313      	orrs	r3, r2
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	609a      	str	r2, [r3, #8]
}
 8008940:	bf00      	nop
 8008942:	371c      	adds	r7, #28
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008960:	2302      	movs	r3, #2
 8008962:	e06d      	b.n	8008a40 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2202      	movs	r2, #2
 8008970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a30      	ldr	r2, [pc, #192]	@ (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d004      	beq.n	8008998 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	4a2f      	ldr	r2, [pc, #188]	@ (8008a50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d108      	bne.n	80089aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800899e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	68fa      	ldr	r2, [r7, #12]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80089b0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	68fa      	ldr	r2, [r7, #12]
 80089b8:	4313      	orrs	r3, r2
 80089ba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	68fa      	ldr	r2, [r7, #12]
 80089c2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	4a20      	ldr	r2, [pc, #128]	@ (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d022      	beq.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089d6:	d01d      	beq.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a1d      	ldr	r2, [pc, #116]	@ (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d018      	beq.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a1c      	ldr	r2, [pc, #112]	@ (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d013      	beq.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a1a      	ldr	r2, [pc, #104]	@ (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d00e      	beq.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a15      	ldr	r2, [pc, #84]	@ (8008a50 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80089fc:	4293      	cmp	r3, r2
 80089fe:	d009      	beq.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a16      	ldr	r2, [pc, #88]	@ (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d004      	beq.n	8008a14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a15      	ldr	r2, [pc, #84]	@ (8008a64 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d10c      	bne.n	8008a2e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a14:	68bb      	ldr	r3, [r7, #8]
 8008a16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	689b      	ldr	r3, [r3, #8]
 8008a20:	68ba      	ldr	r2, [r7, #8]
 8008a22:	4313      	orrs	r3, r2
 8008a24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68ba      	ldr	r2, [r7, #8]
 8008a2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2201      	movs	r2, #1
 8008a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3714      	adds	r7, #20
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	40010000 	.word	0x40010000
 8008a50:	40010400 	.word	0x40010400
 8008a54:	40000400 	.word	0x40000400
 8008a58:	40000800 	.word	0x40000800
 8008a5c:	40000c00 	.word	0x40000c00
 8008a60:	40014000 	.word	0x40014000
 8008a64:	40001800 	.word	0x40001800

08008a68 <__cvt>:
 8008a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a6a:	ed2d 8b02 	vpush	{d8}
 8008a6e:	eeb0 8b40 	vmov.f64	d8, d0
 8008a72:	b085      	sub	sp, #20
 8008a74:	4617      	mov	r7, r2
 8008a76:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8008a78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a7a:	ee18 2a90 	vmov	r2, s17
 8008a7e:	f025 0520 	bic.w	r5, r5, #32
 8008a82:	2a00      	cmp	r2, #0
 8008a84:	bfb6      	itet	lt
 8008a86:	222d      	movlt	r2, #45	@ 0x2d
 8008a88:	2200      	movge	r2, #0
 8008a8a:	eeb1 8b40 	vneglt.f64	d8, d0
 8008a8e:	2d46      	cmp	r5, #70	@ 0x46
 8008a90:	460c      	mov	r4, r1
 8008a92:	701a      	strb	r2, [r3, #0]
 8008a94:	d004      	beq.n	8008aa0 <__cvt+0x38>
 8008a96:	2d45      	cmp	r5, #69	@ 0x45
 8008a98:	d100      	bne.n	8008a9c <__cvt+0x34>
 8008a9a:	3401      	adds	r4, #1
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	e000      	b.n	8008aa2 <__cvt+0x3a>
 8008aa0:	2103      	movs	r1, #3
 8008aa2:	ab03      	add	r3, sp, #12
 8008aa4:	9301      	str	r3, [sp, #4]
 8008aa6:	ab02      	add	r3, sp, #8
 8008aa8:	9300      	str	r3, [sp, #0]
 8008aaa:	4622      	mov	r2, r4
 8008aac:	4633      	mov	r3, r6
 8008aae:	eeb0 0b48 	vmov.f64	d0, d8
 8008ab2:	f001 f851 	bl	8009b58 <_dtoa_r>
 8008ab6:	2d47      	cmp	r5, #71	@ 0x47
 8008ab8:	d114      	bne.n	8008ae4 <__cvt+0x7c>
 8008aba:	07fb      	lsls	r3, r7, #31
 8008abc:	d50a      	bpl.n	8008ad4 <__cvt+0x6c>
 8008abe:	1902      	adds	r2, r0, r4
 8008ac0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ac8:	bf08      	it	eq
 8008aca:	9203      	streq	r2, [sp, #12]
 8008acc:	2130      	movs	r1, #48	@ 0x30
 8008ace:	9b03      	ldr	r3, [sp, #12]
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d319      	bcc.n	8008b08 <__cvt+0xa0>
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008ad8:	1a1b      	subs	r3, r3, r0
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	b005      	add	sp, #20
 8008ade:	ecbd 8b02 	vpop	{d8}
 8008ae2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ae4:	2d46      	cmp	r5, #70	@ 0x46
 8008ae6:	eb00 0204 	add.w	r2, r0, r4
 8008aea:	d1e9      	bne.n	8008ac0 <__cvt+0x58>
 8008aec:	7803      	ldrb	r3, [r0, #0]
 8008aee:	2b30      	cmp	r3, #48	@ 0x30
 8008af0:	d107      	bne.n	8008b02 <__cvt+0x9a>
 8008af2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afa:	bf1c      	itt	ne
 8008afc:	f1c4 0401 	rsbne	r4, r4, #1
 8008b00:	6034      	strne	r4, [r6, #0]
 8008b02:	6833      	ldr	r3, [r6, #0]
 8008b04:	441a      	add	r2, r3
 8008b06:	e7db      	b.n	8008ac0 <__cvt+0x58>
 8008b08:	1c5c      	adds	r4, r3, #1
 8008b0a:	9403      	str	r4, [sp, #12]
 8008b0c:	7019      	strb	r1, [r3, #0]
 8008b0e:	e7de      	b.n	8008ace <__cvt+0x66>

08008b10 <__exponent>:
 8008b10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b12:	2900      	cmp	r1, #0
 8008b14:	bfba      	itte	lt
 8008b16:	4249      	neglt	r1, r1
 8008b18:	232d      	movlt	r3, #45	@ 0x2d
 8008b1a:	232b      	movge	r3, #43	@ 0x2b
 8008b1c:	2909      	cmp	r1, #9
 8008b1e:	7002      	strb	r2, [r0, #0]
 8008b20:	7043      	strb	r3, [r0, #1]
 8008b22:	dd29      	ble.n	8008b78 <__exponent+0x68>
 8008b24:	f10d 0307 	add.w	r3, sp, #7
 8008b28:	461d      	mov	r5, r3
 8008b2a:	270a      	movs	r7, #10
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	fbb1 f6f7 	udiv	r6, r1, r7
 8008b32:	fb07 1416 	mls	r4, r7, r6, r1
 8008b36:	3430      	adds	r4, #48	@ 0x30
 8008b38:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008b3c:	460c      	mov	r4, r1
 8008b3e:	2c63      	cmp	r4, #99	@ 0x63
 8008b40:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b44:	4631      	mov	r1, r6
 8008b46:	dcf1      	bgt.n	8008b2c <__exponent+0x1c>
 8008b48:	3130      	adds	r1, #48	@ 0x30
 8008b4a:	1e94      	subs	r4, r2, #2
 8008b4c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b50:	1c41      	adds	r1, r0, #1
 8008b52:	4623      	mov	r3, r4
 8008b54:	42ab      	cmp	r3, r5
 8008b56:	d30a      	bcc.n	8008b6e <__exponent+0x5e>
 8008b58:	f10d 0309 	add.w	r3, sp, #9
 8008b5c:	1a9b      	subs	r3, r3, r2
 8008b5e:	42ac      	cmp	r4, r5
 8008b60:	bf88      	it	hi
 8008b62:	2300      	movhi	r3, #0
 8008b64:	3302      	adds	r3, #2
 8008b66:	4403      	add	r3, r0
 8008b68:	1a18      	subs	r0, r3, r0
 8008b6a:	b003      	add	sp, #12
 8008b6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b6e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008b72:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008b76:	e7ed      	b.n	8008b54 <__exponent+0x44>
 8008b78:	2330      	movs	r3, #48	@ 0x30
 8008b7a:	3130      	adds	r1, #48	@ 0x30
 8008b7c:	7083      	strb	r3, [r0, #2]
 8008b7e:	70c1      	strb	r1, [r0, #3]
 8008b80:	1d03      	adds	r3, r0, #4
 8008b82:	e7f1      	b.n	8008b68 <__exponent+0x58>
 8008b84:	0000      	movs	r0, r0
	...

08008b88 <_printf_float>:
 8008b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b8c:	b08d      	sub	sp, #52	@ 0x34
 8008b8e:	460c      	mov	r4, r1
 8008b90:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008b94:	4616      	mov	r6, r2
 8008b96:	461f      	mov	r7, r3
 8008b98:	4605      	mov	r5, r0
 8008b9a:	f000 fed7 	bl	800994c <_localeconv_r>
 8008b9e:	f8d0 b000 	ldr.w	fp, [r0]
 8008ba2:	4658      	mov	r0, fp
 8008ba4:	f7f7 fb9c 	bl	80002e0 <strlen>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bac:	f8d8 3000 	ldr.w	r3, [r8]
 8008bb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008bb4:	6822      	ldr	r2, [r4, #0]
 8008bb6:	9005      	str	r0, [sp, #20]
 8008bb8:	3307      	adds	r3, #7
 8008bba:	f023 0307 	bic.w	r3, r3, #7
 8008bbe:	f103 0108 	add.w	r1, r3, #8
 8008bc2:	f8c8 1000 	str.w	r1, [r8]
 8008bc6:	ed93 0b00 	vldr	d0, [r3]
 8008bca:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008e28 <_printf_float+0x2a0>
 8008bce:	eeb0 7bc0 	vabs.f64	d7, d0
 8008bd2:	eeb4 7b46 	vcmp.f64	d7, d6
 8008bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bda:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008bde:	dd24      	ble.n	8008c2a <_printf_float+0xa2>
 8008be0:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be8:	d502      	bpl.n	8008bf0 <_printf_float+0x68>
 8008bea:	232d      	movs	r3, #45	@ 0x2d
 8008bec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008bf0:	498f      	ldr	r1, [pc, #572]	@ (8008e30 <_printf_float+0x2a8>)
 8008bf2:	4b90      	ldr	r3, [pc, #576]	@ (8008e34 <_printf_float+0x2ac>)
 8008bf4:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008bf8:	bf94      	ite	ls
 8008bfa:	4688      	movls	r8, r1
 8008bfc:	4698      	movhi	r8, r3
 8008bfe:	f022 0204 	bic.w	r2, r2, #4
 8008c02:	2303      	movs	r3, #3
 8008c04:	6123      	str	r3, [r4, #16]
 8008c06:	6022      	str	r2, [r4, #0]
 8008c08:	f04f 0a00 	mov.w	sl, #0
 8008c0c:	9700      	str	r7, [sp, #0]
 8008c0e:	4633      	mov	r3, r6
 8008c10:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c12:	4621      	mov	r1, r4
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 f9d1 	bl	8008fbc <_printf_common>
 8008c1a:	3001      	adds	r0, #1
 8008c1c:	f040 8089 	bne.w	8008d32 <_printf_float+0x1aa>
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	b00d      	add	sp, #52	@ 0x34
 8008c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c32:	d709      	bvc.n	8008c48 <_printf_float+0xc0>
 8008c34:	ee10 3a90 	vmov	r3, s1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	bfbc      	itt	lt
 8008c3c:	232d      	movlt	r3, #45	@ 0x2d
 8008c3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008c42:	497d      	ldr	r1, [pc, #500]	@ (8008e38 <_printf_float+0x2b0>)
 8008c44:	4b7d      	ldr	r3, [pc, #500]	@ (8008e3c <_printf_float+0x2b4>)
 8008c46:	e7d5      	b.n	8008bf4 <_printf_float+0x6c>
 8008c48:	6863      	ldr	r3, [r4, #4]
 8008c4a:	1c59      	adds	r1, r3, #1
 8008c4c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008c50:	d139      	bne.n	8008cc6 <_printf_float+0x13e>
 8008c52:	2306      	movs	r3, #6
 8008c54:	6063      	str	r3, [r4, #4]
 8008c56:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	6022      	str	r2, [r4, #0]
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	ab0a      	add	r3, sp, #40	@ 0x28
 8008c62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008c66:	ab09      	add	r3, sp, #36	@ 0x24
 8008c68:	9300      	str	r3, [sp, #0]
 8008c6a:	6861      	ldr	r1, [r4, #4]
 8008c6c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008c70:	4628      	mov	r0, r5
 8008c72:	f7ff fef9 	bl	8008a68 <__cvt>
 8008c76:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c7a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	d129      	bne.n	8008cd4 <_printf_float+0x14c>
 8008c80:	1cc8      	adds	r0, r1, #3
 8008c82:	db02      	blt.n	8008c8a <_printf_float+0x102>
 8008c84:	6863      	ldr	r3, [r4, #4]
 8008c86:	4299      	cmp	r1, r3
 8008c88:	dd41      	ble.n	8008d0e <_printf_float+0x186>
 8008c8a:	f1a9 0902 	sub.w	r9, r9, #2
 8008c8e:	fa5f f989 	uxtb.w	r9, r9
 8008c92:	3901      	subs	r1, #1
 8008c94:	464a      	mov	r2, r9
 8008c96:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008c9a:	9109      	str	r1, [sp, #36]	@ 0x24
 8008c9c:	f7ff ff38 	bl	8008b10 <__exponent>
 8008ca0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ca2:	1813      	adds	r3, r2, r0
 8008ca4:	2a01      	cmp	r2, #1
 8008ca6:	4682      	mov	sl, r0
 8008ca8:	6123      	str	r3, [r4, #16]
 8008caa:	dc02      	bgt.n	8008cb2 <_printf_float+0x12a>
 8008cac:	6822      	ldr	r2, [r4, #0]
 8008cae:	07d2      	lsls	r2, r2, #31
 8008cb0:	d501      	bpl.n	8008cb6 <_printf_float+0x12e>
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	6123      	str	r3, [r4, #16]
 8008cb6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d0a6      	beq.n	8008c0c <_printf_float+0x84>
 8008cbe:	232d      	movs	r3, #45	@ 0x2d
 8008cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cc4:	e7a2      	b.n	8008c0c <_printf_float+0x84>
 8008cc6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008cca:	d1c4      	bne.n	8008c56 <_printf_float+0xce>
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1c2      	bne.n	8008c56 <_printf_float+0xce>
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e7bf      	b.n	8008c54 <_printf_float+0xcc>
 8008cd4:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008cd8:	d9db      	bls.n	8008c92 <_printf_float+0x10a>
 8008cda:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008cde:	d118      	bne.n	8008d12 <_printf_float+0x18a>
 8008ce0:	2900      	cmp	r1, #0
 8008ce2:	6863      	ldr	r3, [r4, #4]
 8008ce4:	dd0b      	ble.n	8008cfe <_printf_float+0x176>
 8008ce6:	6121      	str	r1, [r4, #16]
 8008ce8:	b913      	cbnz	r3, 8008cf0 <_printf_float+0x168>
 8008cea:	6822      	ldr	r2, [r4, #0]
 8008cec:	07d0      	lsls	r0, r2, #31
 8008cee:	d502      	bpl.n	8008cf6 <_printf_float+0x16e>
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	440b      	add	r3, r1
 8008cf4:	6123      	str	r3, [r4, #16]
 8008cf6:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008cf8:	f04f 0a00 	mov.w	sl, #0
 8008cfc:	e7db      	b.n	8008cb6 <_printf_float+0x12e>
 8008cfe:	b913      	cbnz	r3, 8008d06 <_printf_float+0x17e>
 8008d00:	6822      	ldr	r2, [r4, #0]
 8008d02:	07d2      	lsls	r2, r2, #31
 8008d04:	d501      	bpl.n	8008d0a <_printf_float+0x182>
 8008d06:	3302      	adds	r3, #2
 8008d08:	e7f4      	b.n	8008cf4 <_printf_float+0x16c>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e7f2      	b.n	8008cf4 <_printf_float+0x16c>
 8008d0e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008d12:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d14:	4299      	cmp	r1, r3
 8008d16:	db05      	blt.n	8008d24 <_printf_float+0x19c>
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	6121      	str	r1, [r4, #16]
 8008d1c:	07d8      	lsls	r0, r3, #31
 8008d1e:	d5ea      	bpl.n	8008cf6 <_printf_float+0x16e>
 8008d20:	1c4b      	adds	r3, r1, #1
 8008d22:	e7e7      	b.n	8008cf4 <_printf_float+0x16c>
 8008d24:	2900      	cmp	r1, #0
 8008d26:	bfd4      	ite	le
 8008d28:	f1c1 0202 	rsble	r2, r1, #2
 8008d2c:	2201      	movgt	r2, #1
 8008d2e:	4413      	add	r3, r2
 8008d30:	e7e0      	b.n	8008cf4 <_printf_float+0x16c>
 8008d32:	6823      	ldr	r3, [r4, #0]
 8008d34:	055a      	lsls	r2, r3, #21
 8008d36:	d407      	bmi.n	8008d48 <_printf_float+0x1c0>
 8008d38:	6923      	ldr	r3, [r4, #16]
 8008d3a:	4642      	mov	r2, r8
 8008d3c:	4631      	mov	r1, r6
 8008d3e:	4628      	mov	r0, r5
 8008d40:	47b8      	blx	r7
 8008d42:	3001      	adds	r0, #1
 8008d44:	d12a      	bne.n	8008d9c <_printf_float+0x214>
 8008d46:	e76b      	b.n	8008c20 <_printf_float+0x98>
 8008d48:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008d4c:	f240 80e0 	bls.w	8008f10 <_printf_float+0x388>
 8008d50:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008d54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5c:	d133      	bne.n	8008dc6 <_printf_float+0x23e>
 8008d5e:	4a38      	ldr	r2, [pc, #224]	@ (8008e40 <_printf_float+0x2b8>)
 8008d60:	2301      	movs	r3, #1
 8008d62:	4631      	mov	r1, r6
 8008d64:	4628      	mov	r0, r5
 8008d66:	47b8      	blx	r7
 8008d68:	3001      	adds	r0, #1
 8008d6a:	f43f af59 	beq.w	8008c20 <_printf_float+0x98>
 8008d6e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008d72:	4543      	cmp	r3, r8
 8008d74:	db02      	blt.n	8008d7c <_printf_float+0x1f4>
 8008d76:	6823      	ldr	r3, [r4, #0]
 8008d78:	07d8      	lsls	r0, r3, #31
 8008d7a:	d50f      	bpl.n	8008d9c <_printf_float+0x214>
 8008d7c:	9b05      	ldr	r3, [sp, #20]
 8008d7e:	465a      	mov	r2, fp
 8008d80:	4631      	mov	r1, r6
 8008d82:	4628      	mov	r0, r5
 8008d84:	47b8      	blx	r7
 8008d86:	3001      	adds	r0, #1
 8008d88:	f43f af4a 	beq.w	8008c20 <_printf_float+0x98>
 8008d8c:	f04f 0900 	mov.w	r9, #0
 8008d90:	f108 38ff 	add.w	r8, r8, #4294967295
 8008d94:	f104 0a1a 	add.w	sl, r4, #26
 8008d98:	45c8      	cmp	r8, r9
 8008d9a:	dc09      	bgt.n	8008db0 <_printf_float+0x228>
 8008d9c:	6823      	ldr	r3, [r4, #0]
 8008d9e:	079b      	lsls	r3, r3, #30
 8008da0:	f100 8107 	bmi.w	8008fb2 <_printf_float+0x42a>
 8008da4:	68e0      	ldr	r0, [r4, #12]
 8008da6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008da8:	4298      	cmp	r0, r3
 8008daa:	bfb8      	it	lt
 8008dac:	4618      	movlt	r0, r3
 8008dae:	e739      	b.n	8008c24 <_printf_float+0x9c>
 8008db0:	2301      	movs	r3, #1
 8008db2:	4652      	mov	r2, sl
 8008db4:	4631      	mov	r1, r6
 8008db6:	4628      	mov	r0, r5
 8008db8:	47b8      	blx	r7
 8008dba:	3001      	adds	r0, #1
 8008dbc:	f43f af30 	beq.w	8008c20 <_printf_float+0x98>
 8008dc0:	f109 0901 	add.w	r9, r9, #1
 8008dc4:	e7e8      	b.n	8008d98 <_printf_float+0x210>
 8008dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dc3b      	bgt.n	8008e44 <_printf_float+0x2bc>
 8008dcc:	4a1c      	ldr	r2, [pc, #112]	@ (8008e40 <_printf_float+0x2b8>)
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4631      	mov	r1, r6
 8008dd2:	4628      	mov	r0, r5
 8008dd4:	47b8      	blx	r7
 8008dd6:	3001      	adds	r0, #1
 8008dd8:	f43f af22 	beq.w	8008c20 <_printf_float+0x98>
 8008ddc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008de0:	ea59 0303 	orrs.w	r3, r9, r3
 8008de4:	d102      	bne.n	8008dec <_printf_float+0x264>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	07d9      	lsls	r1, r3, #31
 8008dea:	d5d7      	bpl.n	8008d9c <_printf_float+0x214>
 8008dec:	9b05      	ldr	r3, [sp, #20]
 8008dee:	465a      	mov	r2, fp
 8008df0:	4631      	mov	r1, r6
 8008df2:	4628      	mov	r0, r5
 8008df4:	47b8      	blx	r7
 8008df6:	3001      	adds	r0, #1
 8008df8:	f43f af12 	beq.w	8008c20 <_printf_float+0x98>
 8008dfc:	f04f 0a00 	mov.w	sl, #0
 8008e00:	f104 0b1a 	add.w	fp, r4, #26
 8008e04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e06:	425b      	negs	r3, r3
 8008e08:	4553      	cmp	r3, sl
 8008e0a:	dc01      	bgt.n	8008e10 <_printf_float+0x288>
 8008e0c:	464b      	mov	r3, r9
 8008e0e:	e794      	b.n	8008d3a <_printf_float+0x1b2>
 8008e10:	2301      	movs	r3, #1
 8008e12:	465a      	mov	r2, fp
 8008e14:	4631      	mov	r1, r6
 8008e16:	4628      	mov	r0, r5
 8008e18:	47b8      	blx	r7
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	f43f af00 	beq.w	8008c20 <_printf_float+0x98>
 8008e20:	f10a 0a01 	add.w	sl, sl, #1
 8008e24:	e7ee      	b.n	8008e04 <_printf_float+0x27c>
 8008e26:	bf00      	nop
 8008e28:	ffffffff 	.word	0xffffffff
 8008e2c:	7fefffff 	.word	0x7fefffff
 8008e30:	0800d278 	.word	0x0800d278
 8008e34:	0800d27c 	.word	0x0800d27c
 8008e38:	0800d280 	.word	0x0800d280
 8008e3c:	0800d284 	.word	0x0800d284
 8008e40:	0800d288 	.word	0x0800d288
 8008e44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e4a:	4553      	cmp	r3, sl
 8008e4c:	bfa8      	it	ge
 8008e4e:	4653      	movge	r3, sl
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	4699      	mov	r9, r3
 8008e54:	dc37      	bgt.n	8008ec6 <_printf_float+0x33e>
 8008e56:	2300      	movs	r3, #0
 8008e58:	9307      	str	r3, [sp, #28]
 8008e5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e5e:	f104 021a 	add.w	r2, r4, #26
 8008e62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008e64:	9907      	ldr	r1, [sp, #28]
 8008e66:	9306      	str	r3, [sp, #24]
 8008e68:	eba3 0309 	sub.w	r3, r3, r9
 8008e6c:	428b      	cmp	r3, r1
 8008e6e:	dc31      	bgt.n	8008ed4 <_printf_float+0x34c>
 8008e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e72:	459a      	cmp	sl, r3
 8008e74:	dc3b      	bgt.n	8008eee <_printf_float+0x366>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	07da      	lsls	r2, r3, #31
 8008e7a:	d438      	bmi.n	8008eee <_printf_float+0x366>
 8008e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7e:	ebaa 0903 	sub.w	r9, sl, r3
 8008e82:	9b06      	ldr	r3, [sp, #24]
 8008e84:	ebaa 0303 	sub.w	r3, sl, r3
 8008e88:	4599      	cmp	r9, r3
 8008e8a:	bfa8      	it	ge
 8008e8c:	4699      	movge	r9, r3
 8008e8e:	f1b9 0f00 	cmp.w	r9, #0
 8008e92:	dc34      	bgt.n	8008efe <_printf_float+0x376>
 8008e94:	f04f 0800 	mov.w	r8, #0
 8008e98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e9c:	f104 0b1a 	add.w	fp, r4, #26
 8008ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea2:	ebaa 0303 	sub.w	r3, sl, r3
 8008ea6:	eba3 0309 	sub.w	r3, r3, r9
 8008eaa:	4543      	cmp	r3, r8
 8008eac:	f77f af76 	ble.w	8008d9c <_printf_float+0x214>
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	465a      	mov	r2, fp
 8008eb4:	4631      	mov	r1, r6
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	47b8      	blx	r7
 8008eba:	3001      	adds	r0, #1
 8008ebc:	f43f aeb0 	beq.w	8008c20 <_printf_float+0x98>
 8008ec0:	f108 0801 	add.w	r8, r8, #1
 8008ec4:	e7ec      	b.n	8008ea0 <_printf_float+0x318>
 8008ec6:	4642      	mov	r2, r8
 8008ec8:	4631      	mov	r1, r6
 8008eca:	4628      	mov	r0, r5
 8008ecc:	47b8      	blx	r7
 8008ece:	3001      	adds	r0, #1
 8008ed0:	d1c1      	bne.n	8008e56 <_printf_float+0x2ce>
 8008ed2:	e6a5      	b.n	8008c20 <_printf_float+0x98>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	9206      	str	r2, [sp, #24]
 8008edc:	47b8      	blx	r7
 8008ede:	3001      	adds	r0, #1
 8008ee0:	f43f ae9e 	beq.w	8008c20 <_printf_float+0x98>
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	9a06      	ldr	r2, [sp, #24]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	9307      	str	r3, [sp, #28]
 8008eec:	e7b9      	b.n	8008e62 <_printf_float+0x2da>
 8008eee:	9b05      	ldr	r3, [sp, #20]
 8008ef0:	465a      	mov	r2, fp
 8008ef2:	4631      	mov	r1, r6
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	47b8      	blx	r7
 8008ef8:	3001      	adds	r0, #1
 8008efa:	d1bf      	bne.n	8008e7c <_printf_float+0x2f4>
 8008efc:	e690      	b.n	8008c20 <_printf_float+0x98>
 8008efe:	9a06      	ldr	r2, [sp, #24]
 8008f00:	464b      	mov	r3, r9
 8008f02:	4442      	add	r2, r8
 8008f04:	4631      	mov	r1, r6
 8008f06:	4628      	mov	r0, r5
 8008f08:	47b8      	blx	r7
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	d1c2      	bne.n	8008e94 <_printf_float+0x30c>
 8008f0e:	e687      	b.n	8008c20 <_printf_float+0x98>
 8008f10:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008f14:	f1b9 0f01 	cmp.w	r9, #1
 8008f18:	dc01      	bgt.n	8008f1e <_printf_float+0x396>
 8008f1a:	07db      	lsls	r3, r3, #31
 8008f1c:	d536      	bpl.n	8008f8c <_printf_float+0x404>
 8008f1e:	2301      	movs	r3, #1
 8008f20:	4642      	mov	r2, r8
 8008f22:	4631      	mov	r1, r6
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b8      	blx	r7
 8008f28:	3001      	adds	r0, #1
 8008f2a:	f43f ae79 	beq.w	8008c20 <_printf_float+0x98>
 8008f2e:	9b05      	ldr	r3, [sp, #20]
 8008f30:	465a      	mov	r2, fp
 8008f32:	4631      	mov	r1, r6
 8008f34:	4628      	mov	r0, r5
 8008f36:	47b8      	blx	r7
 8008f38:	3001      	adds	r0, #1
 8008f3a:	f43f ae71 	beq.w	8008c20 <_printf_float+0x98>
 8008f3e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008f42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f4a:	f109 39ff 	add.w	r9, r9, #4294967295
 8008f4e:	d018      	beq.n	8008f82 <_printf_float+0x3fa>
 8008f50:	464b      	mov	r3, r9
 8008f52:	f108 0201 	add.w	r2, r8, #1
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d10c      	bne.n	8008f7a <_printf_float+0x3f2>
 8008f60:	e65e      	b.n	8008c20 <_printf_float+0x98>
 8008f62:	2301      	movs	r3, #1
 8008f64:	465a      	mov	r2, fp
 8008f66:	4631      	mov	r1, r6
 8008f68:	4628      	mov	r0, r5
 8008f6a:	47b8      	blx	r7
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	f43f ae57 	beq.w	8008c20 <_printf_float+0x98>
 8008f72:	f108 0801 	add.w	r8, r8, #1
 8008f76:	45c8      	cmp	r8, r9
 8008f78:	dbf3      	blt.n	8008f62 <_printf_float+0x3da>
 8008f7a:	4653      	mov	r3, sl
 8008f7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008f80:	e6dc      	b.n	8008d3c <_printf_float+0x1b4>
 8008f82:	f04f 0800 	mov.w	r8, #0
 8008f86:	f104 0b1a 	add.w	fp, r4, #26
 8008f8a:	e7f4      	b.n	8008f76 <_printf_float+0x3ee>
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	4642      	mov	r2, r8
 8008f90:	e7e1      	b.n	8008f56 <_printf_float+0x3ce>
 8008f92:	2301      	movs	r3, #1
 8008f94:	464a      	mov	r2, r9
 8008f96:	4631      	mov	r1, r6
 8008f98:	4628      	mov	r0, r5
 8008f9a:	47b8      	blx	r7
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	f43f ae3f 	beq.w	8008c20 <_printf_float+0x98>
 8008fa2:	f108 0801 	add.w	r8, r8, #1
 8008fa6:	68e3      	ldr	r3, [r4, #12]
 8008fa8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008faa:	1a5b      	subs	r3, r3, r1
 8008fac:	4543      	cmp	r3, r8
 8008fae:	dcf0      	bgt.n	8008f92 <_printf_float+0x40a>
 8008fb0:	e6f8      	b.n	8008da4 <_printf_float+0x21c>
 8008fb2:	f04f 0800 	mov.w	r8, #0
 8008fb6:	f104 0919 	add.w	r9, r4, #25
 8008fba:	e7f4      	b.n	8008fa6 <_printf_float+0x41e>

08008fbc <_printf_common>:
 8008fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc0:	4616      	mov	r6, r2
 8008fc2:	4698      	mov	r8, r3
 8008fc4:	688a      	ldr	r2, [r1, #8]
 8008fc6:	690b      	ldr	r3, [r1, #16]
 8008fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	bfb8      	it	lt
 8008fd0:	4613      	movlt	r3, r2
 8008fd2:	6033      	str	r3, [r6, #0]
 8008fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008fd8:	4607      	mov	r7, r0
 8008fda:	460c      	mov	r4, r1
 8008fdc:	b10a      	cbz	r2, 8008fe2 <_printf_common+0x26>
 8008fde:	3301      	adds	r3, #1
 8008fe0:	6033      	str	r3, [r6, #0]
 8008fe2:	6823      	ldr	r3, [r4, #0]
 8008fe4:	0699      	lsls	r1, r3, #26
 8008fe6:	bf42      	ittt	mi
 8008fe8:	6833      	ldrmi	r3, [r6, #0]
 8008fea:	3302      	addmi	r3, #2
 8008fec:	6033      	strmi	r3, [r6, #0]
 8008fee:	6825      	ldr	r5, [r4, #0]
 8008ff0:	f015 0506 	ands.w	r5, r5, #6
 8008ff4:	d106      	bne.n	8009004 <_printf_common+0x48>
 8008ff6:	f104 0a19 	add.w	sl, r4, #25
 8008ffa:	68e3      	ldr	r3, [r4, #12]
 8008ffc:	6832      	ldr	r2, [r6, #0]
 8008ffe:	1a9b      	subs	r3, r3, r2
 8009000:	42ab      	cmp	r3, r5
 8009002:	dc26      	bgt.n	8009052 <_printf_common+0x96>
 8009004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009008:	6822      	ldr	r2, [r4, #0]
 800900a:	3b00      	subs	r3, #0
 800900c:	bf18      	it	ne
 800900e:	2301      	movne	r3, #1
 8009010:	0692      	lsls	r2, r2, #26
 8009012:	d42b      	bmi.n	800906c <_printf_common+0xb0>
 8009014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009018:	4641      	mov	r1, r8
 800901a:	4638      	mov	r0, r7
 800901c:	47c8      	blx	r9
 800901e:	3001      	adds	r0, #1
 8009020:	d01e      	beq.n	8009060 <_printf_common+0xa4>
 8009022:	6823      	ldr	r3, [r4, #0]
 8009024:	6922      	ldr	r2, [r4, #16]
 8009026:	f003 0306 	and.w	r3, r3, #6
 800902a:	2b04      	cmp	r3, #4
 800902c:	bf02      	ittt	eq
 800902e:	68e5      	ldreq	r5, [r4, #12]
 8009030:	6833      	ldreq	r3, [r6, #0]
 8009032:	1aed      	subeq	r5, r5, r3
 8009034:	68a3      	ldr	r3, [r4, #8]
 8009036:	bf0c      	ite	eq
 8009038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800903c:	2500      	movne	r5, #0
 800903e:	4293      	cmp	r3, r2
 8009040:	bfc4      	itt	gt
 8009042:	1a9b      	subgt	r3, r3, r2
 8009044:	18ed      	addgt	r5, r5, r3
 8009046:	2600      	movs	r6, #0
 8009048:	341a      	adds	r4, #26
 800904a:	42b5      	cmp	r5, r6
 800904c:	d11a      	bne.n	8009084 <_printf_common+0xc8>
 800904e:	2000      	movs	r0, #0
 8009050:	e008      	b.n	8009064 <_printf_common+0xa8>
 8009052:	2301      	movs	r3, #1
 8009054:	4652      	mov	r2, sl
 8009056:	4641      	mov	r1, r8
 8009058:	4638      	mov	r0, r7
 800905a:	47c8      	blx	r9
 800905c:	3001      	adds	r0, #1
 800905e:	d103      	bne.n	8009068 <_printf_common+0xac>
 8009060:	f04f 30ff 	mov.w	r0, #4294967295
 8009064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009068:	3501      	adds	r5, #1
 800906a:	e7c6      	b.n	8008ffa <_printf_common+0x3e>
 800906c:	18e1      	adds	r1, r4, r3
 800906e:	1c5a      	adds	r2, r3, #1
 8009070:	2030      	movs	r0, #48	@ 0x30
 8009072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009076:	4422      	add	r2, r4
 8009078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800907c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009080:	3302      	adds	r3, #2
 8009082:	e7c7      	b.n	8009014 <_printf_common+0x58>
 8009084:	2301      	movs	r3, #1
 8009086:	4622      	mov	r2, r4
 8009088:	4641      	mov	r1, r8
 800908a:	4638      	mov	r0, r7
 800908c:	47c8      	blx	r9
 800908e:	3001      	adds	r0, #1
 8009090:	d0e6      	beq.n	8009060 <_printf_common+0xa4>
 8009092:	3601      	adds	r6, #1
 8009094:	e7d9      	b.n	800904a <_printf_common+0x8e>
	...

08009098 <_printf_i>:
 8009098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800909c:	7e0f      	ldrb	r7, [r1, #24]
 800909e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80090a0:	2f78      	cmp	r7, #120	@ 0x78
 80090a2:	4691      	mov	r9, r2
 80090a4:	4680      	mov	r8, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	469a      	mov	sl, r3
 80090aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80090ae:	d807      	bhi.n	80090c0 <_printf_i+0x28>
 80090b0:	2f62      	cmp	r7, #98	@ 0x62
 80090b2:	d80a      	bhi.n	80090ca <_printf_i+0x32>
 80090b4:	2f00      	cmp	r7, #0
 80090b6:	f000 80d2 	beq.w	800925e <_printf_i+0x1c6>
 80090ba:	2f58      	cmp	r7, #88	@ 0x58
 80090bc:	f000 80b9 	beq.w	8009232 <_printf_i+0x19a>
 80090c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80090c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80090c8:	e03a      	b.n	8009140 <_printf_i+0xa8>
 80090ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80090ce:	2b15      	cmp	r3, #21
 80090d0:	d8f6      	bhi.n	80090c0 <_printf_i+0x28>
 80090d2:	a101      	add	r1, pc, #4	@ (adr r1, 80090d8 <_printf_i+0x40>)
 80090d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090d8:	08009131 	.word	0x08009131
 80090dc:	08009145 	.word	0x08009145
 80090e0:	080090c1 	.word	0x080090c1
 80090e4:	080090c1 	.word	0x080090c1
 80090e8:	080090c1 	.word	0x080090c1
 80090ec:	080090c1 	.word	0x080090c1
 80090f0:	08009145 	.word	0x08009145
 80090f4:	080090c1 	.word	0x080090c1
 80090f8:	080090c1 	.word	0x080090c1
 80090fc:	080090c1 	.word	0x080090c1
 8009100:	080090c1 	.word	0x080090c1
 8009104:	08009245 	.word	0x08009245
 8009108:	0800916f 	.word	0x0800916f
 800910c:	080091ff 	.word	0x080091ff
 8009110:	080090c1 	.word	0x080090c1
 8009114:	080090c1 	.word	0x080090c1
 8009118:	08009267 	.word	0x08009267
 800911c:	080090c1 	.word	0x080090c1
 8009120:	0800916f 	.word	0x0800916f
 8009124:	080090c1 	.word	0x080090c1
 8009128:	080090c1 	.word	0x080090c1
 800912c:	08009207 	.word	0x08009207
 8009130:	6833      	ldr	r3, [r6, #0]
 8009132:	1d1a      	adds	r2, r3, #4
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6032      	str	r2, [r6, #0]
 8009138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800913c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009140:	2301      	movs	r3, #1
 8009142:	e09d      	b.n	8009280 <_printf_i+0x1e8>
 8009144:	6833      	ldr	r3, [r6, #0]
 8009146:	6820      	ldr	r0, [r4, #0]
 8009148:	1d19      	adds	r1, r3, #4
 800914a:	6031      	str	r1, [r6, #0]
 800914c:	0606      	lsls	r6, r0, #24
 800914e:	d501      	bpl.n	8009154 <_printf_i+0xbc>
 8009150:	681d      	ldr	r5, [r3, #0]
 8009152:	e003      	b.n	800915c <_printf_i+0xc4>
 8009154:	0645      	lsls	r5, r0, #25
 8009156:	d5fb      	bpl.n	8009150 <_printf_i+0xb8>
 8009158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800915c:	2d00      	cmp	r5, #0
 800915e:	da03      	bge.n	8009168 <_printf_i+0xd0>
 8009160:	232d      	movs	r3, #45	@ 0x2d
 8009162:	426d      	negs	r5, r5
 8009164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009168:	4859      	ldr	r0, [pc, #356]	@ (80092d0 <_printf_i+0x238>)
 800916a:	230a      	movs	r3, #10
 800916c:	e011      	b.n	8009192 <_printf_i+0xfa>
 800916e:	6821      	ldr	r1, [r4, #0]
 8009170:	6833      	ldr	r3, [r6, #0]
 8009172:	0608      	lsls	r0, r1, #24
 8009174:	f853 5b04 	ldr.w	r5, [r3], #4
 8009178:	d402      	bmi.n	8009180 <_printf_i+0xe8>
 800917a:	0649      	lsls	r1, r1, #25
 800917c:	bf48      	it	mi
 800917e:	b2ad      	uxthmi	r5, r5
 8009180:	2f6f      	cmp	r7, #111	@ 0x6f
 8009182:	4853      	ldr	r0, [pc, #332]	@ (80092d0 <_printf_i+0x238>)
 8009184:	6033      	str	r3, [r6, #0]
 8009186:	bf14      	ite	ne
 8009188:	230a      	movne	r3, #10
 800918a:	2308      	moveq	r3, #8
 800918c:	2100      	movs	r1, #0
 800918e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009192:	6866      	ldr	r6, [r4, #4]
 8009194:	60a6      	str	r6, [r4, #8]
 8009196:	2e00      	cmp	r6, #0
 8009198:	bfa2      	ittt	ge
 800919a:	6821      	ldrge	r1, [r4, #0]
 800919c:	f021 0104 	bicge.w	r1, r1, #4
 80091a0:	6021      	strge	r1, [r4, #0]
 80091a2:	b90d      	cbnz	r5, 80091a8 <_printf_i+0x110>
 80091a4:	2e00      	cmp	r6, #0
 80091a6:	d04b      	beq.n	8009240 <_printf_i+0x1a8>
 80091a8:	4616      	mov	r6, r2
 80091aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80091ae:	fb03 5711 	mls	r7, r3, r1, r5
 80091b2:	5dc7      	ldrb	r7, [r0, r7]
 80091b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80091b8:	462f      	mov	r7, r5
 80091ba:	42bb      	cmp	r3, r7
 80091bc:	460d      	mov	r5, r1
 80091be:	d9f4      	bls.n	80091aa <_printf_i+0x112>
 80091c0:	2b08      	cmp	r3, #8
 80091c2:	d10b      	bne.n	80091dc <_printf_i+0x144>
 80091c4:	6823      	ldr	r3, [r4, #0]
 80091c6:	07df      	lsls	r7, r3, #31
 80091c8:	d508      	bpl.n	80091dc <_printf_i+0x144>
 80091ca:	6923      	ldr	r3, [r4, #16]
 80091cc:	6861      	ldr	r1, [r4, #4]
 80091ce:	4299      	cmp	r1, r3
 80091d0:	bfde      	ittt	le
 80091d2:	2330      	movle	r3, #48	@ 0x30
 80091d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80091d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80091dc:	1b92      	subs	r2, r2, r6
 80091de:	6122      	str	r2, [r4, #16]
 80091e0:	f8cd a000 	str.w	sl, [sp]
 80091e4:	464b      	mov	r3, r9
 80091e6:	aa03      	add	r2, sp, #12
 80091e8:	4621      	mov	r1, r4
 80091ea:	4640      	mov	r0, r8
 80091ec:	f7ff fee6 	bl	8008fbc <_printf_common>
 80091f0:	3001      	adds	r0, #1
 80091f2:	d14a      	bne.n	800928a <_printf_i+0x1f2>
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	b004      	add	sp, #16
 80091fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091fe:	6823      	ldr	r3, [r4, #0]
 8009200:	f043 0320 	orr.w	r3, r3, #32
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	4833      	ldr	r0, [pc, #204]	@ (80092d4 <_printf_i+0x23c>)
 8009208:	2778      	movs	r7, #120	@ 0x78
 800920a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	6831      	ldr	r1, [r6, #0]
 8009212:	061f      	lsls	r7, r3, #24
 8009214:	f851 5b04 	ldr.w	r5, [r1], #4
 8009218:	d402      	bmi.n	8009220 <_printf_i+0x188>
 800921a:	065f      	lsls	r7, r3, #25
 800921c:	bf48      	it	mi
 800921e:	b2ad      	uxthmi	r5, r5
 8009220:	6031      	str	r1, [r6, #0]
 8009222:	07d9      	lsls	r1, r3, #31
 8009224:	bf44      	itt	mi
 8009226:	f043 0320 	orrmi.w	r3, r3, #32
 800922a:	6023      	strmi	r3, [r4, #0]
 800922c:	b11d      	cbz	r5, 8009236 <_printf_i+0x19e>
 800922e:	2310      	movs	r3, #16
 8009230:	e7ac      	b.n	800918c <_printf_i+0xf4>
 8009232:	4827      	ldr	r0, [pc, #156]	@ (80092d0 <_printf_i+0x238>)
 8009234:	e7e9      	b.n	800920a <_printf_i+0x172>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	f023 0320 	bic.w	r3, r3, #32
 800923c:	6023      	str	r3, [r4, #0]
 800923e:	e7f6      	b.n	800922e <_printf_i+0x196>
 8009240:	4616      	mov	r6, r2
 8009242:	e7bd      	b.n	80091c0 <_printf_i+0x128>
 8009244:	6833      	ldr	r3, [r6, #0]
 8009246:	6825      	ldr	r5, [r4, #0]
 8009248:	6961      	ldr	r1, [r4, #20]
 800924a:	1d18      	adds	r0, r3, #4
 800924c:	6030      	str	r0, [r6, #0]
 800924e:	062e      	lsls	r6, r5, #24
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	d501      	bpl.n	8009258 <_printf_i+0x1c0>
 8009254:	6019      	str	r1, [r3, #0]
 8009256:	e002      	b.n	800925e <_printf_i+0x1c6>
 8009258:	0668      	lsls	r0, r5, #25
 800925a:	d5fb      	bpl.n	8009254 <_printf_i+0x1bc>
 800925c:	8019      	strh	r1, [r3, #0]
 800925e:	2300      	movs	r3, #0
 8009260:	6123      	str	r3, [r4, #16]
 8009262:	4616      	mov	r6, r2
 8009264:	e7bc      	b.n	80091e0 <_printf_i+0x148>
 8009266:	6833      	ldr	r3, [r6, #0]
 8009268:	1d1a      	adds	r2, r3, #4
 800926a:	6032      	str	r2, [r6, #0]
 800926c:	681e      	ldr	r6, [r3, #0]
 800926e:	6862      	ldr	r2, [r4, #4]
 8009270:	2100      	movs	r1, #0
 8009272:	4630      	mov	r0, r6
 8009274:	f7f6 ffe4 	bl	8000240 <memchr>
 8009278:	b108      	cbz	r0, 800927e <_printf_i+0x1e6>
 800927a:	1b80      	subs	r0, r0, r6
 800927c:	6060      	str	r0, [r4, #4]
 800927e:	6863      	ldr	r3, [r4, #4]
 8009280:	6123      	str	r3, [r4, #16]
 8009282:	2300      	movs	r3, #0
 8009284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009288:	e7aa      	b.n	80091e0 <_printf_i+0x148>
 800928a:	6923      	ldr	r3, [r4, #16]
 800928c:	4632      	mov	r2, r6
 800928e:	4649      	mov	r1, r9
 8009290:	4640      	mov	r0, r8
 8009292:	47d0      	blx	sl
 8009294:	3001      	adds	r0, #1
 8009296:	d0ad      	beq.n	80091f4 <_printf_i+0x15c>
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	079b      	lsls	r3, r3, #30
 800929c:	d413      	bmi.n	80092c6 <_printf_i+0x22e>
 800929e:	68e0      	ldr	r0, [r4, #12]
 80092a0:	9b03      	ldr	r3, [sp, #12]
 80092a2:	4298      	cmp	r0, r3
 80092a4:	bfb8      	it	lt
 80092a6:	4618      	movlt	r0, r3
 80092a8:	e7a6      	b.n	80091f8 <_printf_i+0x160>
 80092aa:	2301      	movs	r3, #1
 80092ac:	4632      	mov	r2, r6
 80092ae:	4649      	mov	r1, r9
 80092b0:	4640      	mov	r0, r8
 80092b2:	47d0      	blx	sl
 80092b4:	3001      	adds	r0, #1
 80092b6:	d09d      	beq.n	80091f4 <_printf_i+0x15c>
 80092b8:	3501      	adds	r5, #1
 80092ba:	68e3      	ldr	r3, [r4, #12]
 80092bc:	9903      	ldr	r1, [sp, #12]
 80092be:	1a5b      	subs	r3, r3, r1
 80092c0:	42ab      	cmp	r3, r5
 80092c2:	dcf2      	bgt.n	80092aa <_printf_i+0x212>
 80092c4:	e7eb      	b.n	800929e <_printf_i+0x206>
 80092c6:	2500      	movs	r5, #0
 80092c8:	f104 0619 	add.w	r6, r4, #25
 80092cc:	e7f5      	b.n	80092ba <_printf_i+0x222>
 80092ce:	bf00      	nop
 80092d0:	0800d28a 	.word	0x0800d28a
 80092d4:	0800d29b 	.word	0x0800d29b

080092d8 <_scanf_float>:
 80092d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092dc:	b087      	sub	sp, #28
 80092de:	4617      	mov	r7, r2
 80092e0:	9303      	str	r3, [sp, #12]
 80092e2:	688b      	ldr	r3, [r1, #8]
 80092e4:	1e5a      	subs	r2, r3, #1
 80092e6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80092ea:	bf81      	itttt	hi
 80092ec:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80092f0:	eb03 0b05 	addhi.w	fp, r3, r5
 80092f4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80092f8:	608b      	strhi	r3, [r1, #8]
 80092fa:	680b      	ldr	r3, [r1, #0]
 80092fc:	460a      	mov	r2, r1
 80092fe:	f04f 0500 	mov.w	r5, #0
 8009302:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8009306:	f842 3b1c 	str.w	r3, [r2], #28
 800930a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800930e:	4680      	mov	r8, r0
 8009310:	460c      	mov	r4, r1
 8009312:	bf98      	it	ls
 8009314:	f04f 0b00 	movls.w	fp, #0
 8009318:	9201      	str	r2, [sp, #4]
 800931a:	4616      	mov	r6, r2
 800931c:	46aa      	mov	sl, r5
 800931e:	46a9      	mov	r9, r5
 8009320:	9502      	str	r5, [sp, #8]
 8009322:	68a2      	ldr	r2, [r4, #8]
 8009324:	b152      	cbz	r2, 800933c <_scanf_float+0x64>
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	781b      	ldrb	r3, [r3, #0]
 800932a:	2b4e      	cmp	r3, #78	@ 0x4e
 800932c:	d864      	bhi.n	80093f8 <_scanf_float+0x120>
 800932e:	2b40      	cmp	r3, #64	@ 0x40
 8009330:	d83c      	bhi.n	80093ac <_scanf_float+0xd4>
 8009332:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8009336:	b2c8      	uxtb	r0, r1
 8009338:	280e      	cmp	r0, #14
 800933a:	d93a      	bls.n	80093b2 <_scanf_float+0xda>
 800933c:	f1b9 0f00 	cmp.w	r9, #0
 8009340:	d003      	beq.n	800934a <_scanf_float+0x72>
 8009342:	6823      	ldr	r3, [r4, #0]
 8009344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009348:	6023      	str	r3, [r4, #0]
 800934a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800934e:	f1ba 0f01 	cmp.w	sl, #1
 8009352:	f200 8117 	bhi.w	8009584 <_scanf_float+0x2ac>
 8009356:	9b01      	ldr	r3, [sp, #4]
 8009358:	429e      	cmp	r6, r3
 800935a:	f200 8108 	bhi.w	800956e <_scanf_float+0x296>
 800935e:	2001      	movs	r0, #1
 8009360:	b007      	add	sp, #28
 8009362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009366:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800936a:	2a0d      	cmp	r2, #13
 800936c:	d8e6      	bhi.n	800933c <_scanf_float+0x64>
 800936e:	a101      	add	r1, pc, #4	@ (adr r1, 8009374 <_scanf_float+0x9c>)
 8009370:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009374:	080094bb 	.word	0x080094bb
 8009378:	0800933d 	.word	0x0800933d
 800937c:	0800933d 	.word	0x0800933d
 8009380:	0800933d 	.word	0x0800933d
 8009384:	0800951b 	.word	0x0800951b
 8009388:	080094f3 	.word	0x080094f3
 800938c:	0800933d 	.word	0x0800933d
 8009390:	0800933d 	.word	0x0800933d
 8009394:	080094c9 	.word	0x080094c9
 8009398:	0800933d 	.word	0x0800933d
 800939c:	0800933d 	.word	0x0800933d
 80093a0:	0800933d 	.word	0x0800933d
 80093a4:	0800933d 	.word	0x0800933d
 80093a8:	08009481 	.word	0x08009481
 80093ac:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80093b0:	e7db      	b.n	800936a <_scanf_float+0x92>
 80093b2:	290e      	cmp	r1, #14
 80093b4:	d8c2      	bhi.n	800933c <_scanf_float+0x64>
 80093b6:	a001      	add	r0, pc, #4	@ (adr r0, 80093bc <_scanf_float+0xe4>)
 80093b8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80093bc:	08009471 	.word	0x08009471
 80093c0:	0800933d 	.word	0x0800933d
 80093c4:	08009471 	.word	0x08009471
 80093c8:	08009507 	.word	0x08009507
 80093cc:	0800933d 	.word	0x0800933d
 80093d0:	08009419 	.word	0x08009419
 80093d4:	08009457 	.word	0x08009457
 80093d8:	08009457 	.word	0x08009457
 80093dc:	08009457 	.word	0x08009457
 80093e0:	08009457 	.word	0x08009457
 80093e4:	08009457 	.word	0x08009457
 80093e8:	08009457 	.word	0x08009457
 80093ec:	08009457 	.word	0x08009457
 80093f0:	08009457 	.word	0x08009457
 80093f4:	08009457 	.word	0x08009457
 80093f8:	2b6e      	cmp	r3, #110	@ 0x6e
 80093fa:	d809      	bhi.n	8009410 <_scanf_float+0x138>
 80093fc:	2b60      	cmp	r3, #96	@ 0x60
 80093fe:	d8b2      	bhi.n	8009366 <_scanf_float+0x8e>
 8009400:	2b54      	cmp	r3, #84	@ 0x54
 8009402:	d07b      	beq.n	80094fc <_scanf_float+0x224>
 8009404:	2b59      	cmp	r3, #89	@ 0x59
 8009406:	d199      	bne.n	800933c <_scanf_float+0x64>
 8009408:	2d07      	cmp	r5, #7
 800940a:	d197      	bne.n	800933c <_scanf_float+0x64>
 800940c:	2508      	movs	r5, #8
 800940e:	e02c      	b.n	800946a <_scanf_float+0x192>
 8009410:	2b74      	cmp	r3, #116	@ 0x74
 8009412:	d073      	beq.n	80094fc <_scanf_float+0x224>
 8009414:	2b79      	cmp	r3, #121	@ 0x79
 8009416:	e7f6      	b.n	8009406 <_scanf_float+0x12e>
 8009418:	6821      	ldr	r1, [r4, #0]
 800941a:	05c8      	lsls	r0, r1, #23
 800941c:	d51b      	bpl.n	8009456 <_scanf_float+0x17e>
 800941e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8009422:	6021      	str	r1, [r4, #0]
 8009424:	f109 0901 	add.w	r9, r9, #1
 8009428:	f1bb 0f00 	cmp.w	fp, #0
 800942c:	d003      	beq.n	8009436 <_scanf_float+0x15e>
 800942e:	3201      	adds	r2, #1
 8009430:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009434:	60a2      	str	r2, [r4, #8]
 8009436:	68a3      	ldr	r3, [r4, #8]
 8009438:	3b01      	subs	r3, #1
 800943a:	60a3      	str	r3, [r4, #8]
 800943c:	6923      	ldr	r3, [r4, #16]
 800943e:	3301      	adds	r3, #1
 8009440:	6123      	str	r3, [r4, #16]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	3b01      	subs	r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	607b      	str	r3, [r7, #4]
 800944a:	f340 8087 	ble.w	800955c <_scanf_float+0x284>
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	3301      	adds	r3, #1
 8009452:	603b      	str	r3, [r7, #0]
 8009454:	e765      	b.n	8009322 <_scanf_float+0x4a>
 8009456:	eb1a 0105 	adds.w	r1, sl, r5
 800945a:	f47f af6f 	bne.w	800933c <_scanf_float+0x64>
 800945e:	6822      	ldr	r2, [r4, #0]
 8009460:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8009464:	6022      	str	r2, [r4, #0]
 8009466:	460d      	mov	r5, r1
 8009468:	468a      	mov	sl, r1
 800946a:	f806 3b01 	strb.w	r3, [r6], #1
 800946e:	e7e2      	b.n	8009436 <_scanf_float+0x15e>
 8009470:	6822      	ldr	r2, [r4, #0]
 8009472:	0610      	lsls	r0, r2, #24
 8009474:	f57f af62 	bpl.w	800933c <_scanf_float+0x64>
 8009478:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800947c:	6022      	str	r2, [r4, #0]
 800947e:	e7f4      	b.n	800946a <_scanf_float+0x192>
 8009480:	f1ba 0f00 	cmp.w	sl, #0
 8009484:	d10e      	bne.n	80094a4 <_scanf_float+0x1cc>
 8009486:	f1b9 0f00 	cmp.w	r9, #0
 800948a:	d10e      	bne.n	80094aa <_scanf_float+0x1d2>
 800948c:	6822      	ldr	r2, [r4, #0]
 800948e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8009492:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8009496:	d108      	bne.n	80094aa <_scanf_float+0x1d2>
 8009498:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800949c:	6022      	str	r2, [r4, #0]
 800949e:	f04f 0a01 	mov.w	sl, #1
 80094a2:	e7e2      	b.n	800946a <_scanf_float+0x192>
 80094a4:	f1ba 0f02 	cmp.w	sl, #2
 80094a8:	d055      	beq.n	8009556 <_scanf_float+0x27e>
 80094aa:	2d01      	cmp	r5, #1
 80094ac:	d002      	beq.n	80094b4 <_scanf_float+0x1dc>
 80094ae:	2d04      	cmp	r5, #4
 80094b0:	f47f af44 	bne.w	800933c <_scanf_float+0x64>
 80094b4:	3501      	adds	r5, #1
 80094b6:	b2ed      	uxtb	r5, r5
 80094b8:	e7d7      	b.n	800946a <_scanf_float+0x192>
 80094ba:	f1ba 0f01 	cmp.w	sl, #1
 80094be:	f47f af3d 	bne.w	800933c <_scanf_float+0x64>
 80094c2:	f04f 0a02 	mov.w	sl, #2
 80094c6:	e7d0      	b.n	800946a <_scanf_float+0x192>
 80094c8:	b97d      	cbnz	r5, 80094ea <_scanf_float+0x212>
 80094ca:	f1b9 0f00 	cmp.w	r9, #0
 80094ce:	f47f af38 	bne.w	8009342 <_scanf_float+0x6a>
 80094d2:	6822      	ldr	r2, [r4, #0]
 80094d4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80094d8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80094dc:	f040 8101 	bne.w	80096e2 <_scanf_float+0x40a>
 80094e0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80094e4:	6022      	str	r2, [r4, #0]
 80094e6:	2501      	movs	r5, #1
 80094e8:	e7bf      	b.n	800946a <_scanf_float+0x192>
 80094ea:	2d03      	cmp	r5, #3
 80094ec:	d0e2      	beq.n	80094b4 <_scanf_float+0x1dc>
 80094ee:	2d05      	cmp	r5, #5
 80094f0:	e7de      	b.n	80094b0 <_scanf_float+0x1d8>
 80094f2:	2d02      	cmp	r5, #2
 80094f4:	f47f af22 	bne.w	800933c <_scanf_float+0x64>
 80094f8:	2503      	movs	r5, #3
 80094fa:	e7b6      	b.n	800946a <_scanf_float+0x192>
 80094fc:	2d06      	cmp	r5, #6
 80094fe:	f47f af1d 	bne.w	800933c <_scanf_float+0x64>
 8009502:	2507      	movs	r5, #7
 8009504:	e7b1      	b.n	800946a <_scanf_float+0x192>
 8009506:	6822      	ldr	r2, [r4, #0]
 8009508:	0591      	lsls	r1, r2, #22
 800950a:	f57f af17 	bpl.w	800933c <_scanf_float+0x64>
 800950e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8009512:	6022      	str	r2, [r4, #0]
 8009514:	f8cd 9008 	str.w	r9, [sp, #8]
 8009518:	e7a7      	b.n	800946a <_scanf_float+0x192>
 800951a:	6822      	ldr	r2, [r4, #0]
 800951c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8009520:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009524:	d006      	beq.n	8009534 <_scanf_float+0x25c>
 8009526:	0550      	lsls	r0, r2, #21
 8009528:	f57f af08 	bpl.w	800933c <_scanf_float+0x64>
 800952c:	f1b9 0f00 	cmp.w	r9, #0
 8009530:	f000 80d7 	beq.w	80096e2 <_scanf_float+0x40a>
 8009534:	0591      	lsls	r1, r2, #22
 8009536:	bf58      	it	pl
 8009538:	9902      	ldrpl	r1, [sp, #8]
 800953a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800953e:	bf58      	it	pl
 8009540:	eba9 0101 	subpl.w	r1, r9, r1
 8009544:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009548:	bf58      	it	pl
 800954a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800954e:	6022      	str	r2, [r4, #0]
 8009550:	f04f 0900 	mov.w	r9, #0
 8009554:	e789      	b.n	800946a <_scanf_float+0x192>
 8009556:	f04f 0a03 	mov.w	sl, #3
 800955a:	e786      	b.n	800946a <_scanf_float+0x192>
 800955c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009560:	4639      	mov	r1, r7
 8009562:	4640      	mov	r0, r8
 8009564:	4798      	blx	r3
 8009566:	2800      	cmp	r0, #0
 8009568:	f43f aedb 	beq.w	8009322 <_scanf_float+0x4a>
 800956c:	e6e6      	b.n	800933c <_scanf_float+0x64>
 800956e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009572:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009576:	463a      	mov	r2, r7
 8009578:	4640      	mov	r0, r8
 800957a:	4798      	blx	r3
 800957c:	6923      	ldr	r3, [r4, #16]
 800957e:	3b01      	subs	r3, #1
 8009580:	6123      	str	r3, [r4, #16]
 8009582:	e6e8      	b.n	8009356 <_scanf_float+0x7e>
 8009584:	1e6b      	subs	r3, r5, #1
 8009586:	2b06      	cmp	r3, #6
 8009588:	d824      	bhi.n	80095d4 <_scanf_float+0x2fc>
 800958a:	2d02      	cmp	r5, #2
 800958c:	d836      	bhi.n	80095fc <_scanf_float+0x324>
 800958e:	9b01      	ldr	r3, [sp, #4]
 8009590:	429e      	cmp	r6, r3
 8009592:	f67f aee4 	bls.w	800935e <_scanf_float+0x86>
 8009596:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800959a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800959e:	463a      	mov	r2, r7
 80095a0:	4640      	mov	r0, r8
 80095a2:	4798      	blx	r3
 80095a4:	6923      	ldr	r3, [r4, #16]
 80095a6:	3b01      	subs	r3, #1
 80095a8:	6123      	str	r3, [r4, #16]
 80095aa:	e7f0      	b.n	800958e <_scanf_float+0x2b6>
 80095ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80095b0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80095b4:	463a      	mov	r2, r7
 80095b6:	4640      	mov	r0, r8
 80095b8:	4798      	blx	r3
 80095ba:	6923      	ldr	r3, [r4, #16]
 80095bc:	3b01      	subs	r3, #1
 80095be:	6123      	str	r3, [r4, #16]
 80095c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80095c4:	fa5f fa8a 	uxtb.w	sl, sl
 80095c8:	f1ba 0f02 	cmp.w	sl, #2
 80095cc:	d1ee      	bne.n	80095ac <_scanf_float+0x2d4>
 80095ce:	3d03      	subs	r5, #3
 80095d0:	b2ed      	uxtb	r5, r5
 80095d2:	1b76      	subs	r6, r6, r5
 80095d4:	6823      	ldr	r3, [r4, #0]
 80095d6:	05da      	lsls	r2, r3, #23
 80095d8:	d530      	bpl.n	800963c <_scanf_float+0x364>
 80095da:	055b      	lsls	r3, r3, #21
 80095dc:	d511      	bpl.n	8009602 <_scanf_float+0x32a>
 80095de:	9b01      	ldr	r3, [sp, #4]
 80095e0:	429e      	cmp	r6, r3
 80095e2:	f67f aebc 	bls.w	800935e <_scanf_float+0x86>
 80095e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80095ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80095ee:	463a      	mov	r2, r7
 80095f0:	4640      	mov	r0, r8
 80095f2:	4798      	blx	r3
 80095f4:	6923      	ldr	r3, [r4, #16]
 80095f6:	3b01      	subs	r3, #1
 80095f8:	6123      	str	r3, [r4, #16]
 80095fa:	e7f0      	b.n	80095de <_scanf_float+0x306>
 80095fc:	46aa      	mov	sl, r5
 80095fe:	46b3      	mov	fp, r6
 8009600:	e7de      	b.n	80095c0 <_scanf_float+0x2e8>
 8009602:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009606:	6923      	ldr	r3, [r4, #16]
 8009608:	2965      	cmp	r1, #101	@ 0x65
 800960a:	f103 33ff 	add.w	r3, r3, #4294967295
 800960e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009612:	6123      	str	r3, [r4, #16]
 8009614:	d00c      	beq.n	8009630 <_scanf_float+0x358>
 8009616:	2945      	cmp	r1, #69	@ 0x45
 8009618:	d00a      	beq.n	8009630 <_scanf_float+0x358>
 800961a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800961e:	463a      	mov	r2, r7
 8009620:	4640      	mov	r0, r8
 8009622:	4798      	blx	r3
 8009624:	6923      	ldr	r3, [r4, #16]
 8009626:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800962a:	3b01      	subs	r3, #1
 800962c:	1eb5      	subs	r5, r6, #2
 800962e:	6123      	str	r3, [r4, #16]
 8009630:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009634:	463a      	mov	r2, r7
 8009636:	4640      	mov	r0, r8
 8009638:	4798      	blx	r3
 800963a:	462e      	mov	r6, r5
 800963c:	6822      	ldr	r2, [r4, #0]
 800963e:	f012 0210 	ands.w	r2, r2, #16
 8009642:	d001      	beq.n	8009648 <_scanf_float+0x370>
 8009644:	2000      	movs	r0, #0
 8009646:	e68b      	b.n	8009360 <_scanf_float+0x88>
 8009648:	7032      	strb	r2, [r6, #0]
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009650:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009654:	d11a      	bne.n	800968c <_scanf_float+0x3b4>
 8009656:	9b02      	ldr	r3, [sp, #8]
 8009658:	454b      	cmp	r3, r9
 800965a:	eba3 0209 	sub.w	r2, r3, r9
 800965e:	d121      	bne.n	80096a4 <_scanf_float+0x3cc>
 8009660:	9901      	ldr	r1, [sp, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	4640      	mov	r0, r8
 8009666:	f002 fb2d 	bl	800bcc4 <_strtod_r>
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	6821      	ldr	r1, [r4, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f011 0f02 	tst.w	r1, #2
 8009674:	f103 0204 	add.w	r2, r3, #4
 8009678:	d01f      	beq.n	80096ba <_scanf_float+0x3e2>
 800967a:	9903      	ldr	r1, [sp, #12]
 800967c:	600a      	str	r2, [r1, #0]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	ed83 0b00 	vstr	d0, [r3]
 8009684:	68e3      	ldr	r3, [r4, #12]
 8009686:	3301      	adds	r3, #1
 8009688:	60e3      	str	r3, [r4, #12]
 800968a:	e7db      	b.n	8009644 <_scanf_float+0x36c>
 800968c:	9b04      	ldr	r3, [sp, #16]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d0e6      	beq.n	8009660 <_scanf_float+0x388>
 8009692:	9905      	ldr	r1, [sp, #20]
 8009694:	230a      	movs	r3, #10
 8009696:	3101      	adds	r1, #1
 8009698:	4640      	mov	r0, r8
 800969a:	f002 fb93 	bl	800bdc4 <_strtol_r>
 800969e:	9b04      	ldr	r3, [sp, #16]
 80096a0:	9e05      	ldr	r6, [sp, #20]
 80096a2:	1ac2      	subs	r2, r0, r3
 80096a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80096a8:	429e      	cmp	r6, r3
 80096aa:	bf28      	it	cs
 80096ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80096b0:	490d      	ldr	r1, [pc, #52]	@ (80096e8 <_scanf_float+0x410>)
 80096b2:	4630      	mov	r0, r6
 80096b4:	f000 f8de 	bl	8009874 <siprintf>
 80096b8:	e7d2      	b.n	8009660 <_scanf_float+0x388>
 80096ba:	f011 0f04 	tst.w	r1, #4
 80096be:	9903      	ldr	r1, [sp, #12]
 80096c0:	600a      	str	r2, [r1, #0]
 80096c2:	d1dc      	bne.n	800967e <_scanf_float+0x3a6>
 80096c4:	eeb4 0b40 	vcmp.f64	d0, d0
 80096c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096cc:	681d      	ldr	r5, [r3, #0]
 80096ce:	d705      	bvc.n	80096dc <_scanf_float+0x404>
 80096d0:	4806      	ldr	r0, [pc, #24]	@ (80096ec <_scanf_float+0x414>)
 80096d2:	f000 f9b3 	bl	8009a3c <nanf>
 80096d6:	ed85 0a00 	vstr	s0, [r5]
 80096da:	e7d3      	b.n	8009684 <_scanf_float+0x3ac>
 80096dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80096e0:	e7f9      	b.n	80096d6 <_scanf_float+0x3fe>
 80096e2:	f04f 0900 	mov.w	r9, #0
 80096e6:	e630      	b.n	800934a <_scanf_float+0x72>
 80096e8:	0800d2ac 	.word	0x0800d2ac
 80096ec:	0800d645 	.word	0x0800d645

080096f0 <std>:
 80096f0:	2300      	movs	r3, #0
 80096f2:	b510      	push	{r4, lr}
 80096f4:	4604      	mov	r4, r0
 80096f6:	e9c0 3300 	strd	r3, r3, [r0]
 80096fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80096fe:	6083      	str	r3, [r0, #8]
 8009700:	8181      	strh	r1, [r0, #12]
 8009702:	6643      	str	r3, [r0, #100]	@ 0x64
 8009704:	81c2      	strh	r2, [r0, #14]
 8009706:	6183      	str	r3, [r0, #24]
 8009708:	4619      	mov	r1, r3
 800970a:	2208      	movs	r2, #8
 800970c:	305c      	adds	r0, #92	@ 0x5c
 800970e:	f000 f914 	bl	800993a <memset>
 8009712:	4b0d      	ldr	r3, [pc, #52]	@ (8009748 <std+0x58>)
 8009714:	6263      	str	r3, [r4, #36]	@ 0x24
 8009716:	4b0d      	ldr	r3, [pc, #52]	@ (800974c <std+0x5c>)
 8009718:	62a3      	str	r3, [r4, #40]	@ 0x28
 800971a:	4b0d      	ldr	r3, [pc, #52]	@ (8009750 <std+0x60>)
 800971c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800971e:	4b0d      	ldr	r3, [pc, #52]	@ (8009754 <std+0x64>)
 8009720:	6323      	str	r3, [r4, #48]	@ 0x30
 8009722:	4b0d      	ldr	r3, [pc, #52]	@ (8009758 <std+0x68>)
 8009724:	6224      	str	r4, [r4, #32]
 8009726:	429c      	cmp	r4, r3
 8009728:	d006      	beq.n	8009738 <std+0x48>
 800972a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800972e:	4294      	cmp	r4, r2
 8009730:	d002      	beq.n	8009738 <std+0x48>
 8009732:	33d0      	adds	r3, #208	@ 0xd0
 8009734:	429c      	cmp	r4, r3
 8009736:	d105      	bne.n	8009744 <std+0x54>
 8009738:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800973c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009740:	f000 b978 	b.w	8009a34 <__retarget_lock_init_recursive>
 8009744:	bd10      	pop	{r4, pc}
 8009746:	bf00      	nop
 8009748:	080098b5 	.word	0x080098b5
 800974c:	080098d7 	.word	0x080098d7
 8009750:	0800990f 	.word	0x0800990f
 8009754:	08009933 	.word	0x08009933
 8009758:	20031c40 	.word	0x20031c40

0800975c <stdio_exit_handler>:
 800975c:	4a02      	ldr	r2, [pc, #8]	@ (8009768 <stdio_exit_handler+0xc>)
 800975e:	4903      	ldr	r1, [pc, #12]	@ (800976c <stdio_exit_handler+0x10>)
 8009760:	4803      	ldr	r0, [pc, #12]	@ (8009770 <stdio_exit_handler+0x14>)
 8009762:	f000 b869 	b.w	8009838 <_fwalk_sglue>
 8009766:	bf00      	nop
 8009768:	20000040 	.word	0x20000040
 800976c:	0800c181 	.word	0x0800c181
 8009770:	20000050 	.word	0x20000050

08009774 <cleanup_stdio>:
 8009774:	6841      	ldr	r1, [r0, #4]
 8009776:	4b0c      	ldr	r3, [pc, #48]	@ (80097a8 <cleanup_stdio+0x34>)
 8009778:	4299      	cmp	r1, r3
 800977a:	b510      	push	{r4, lr}
 800977c:	4604      	mov	r4, r0
 800977e:	d001      	beq.n	8009784 <cleanup_stdio+0x10>
 8009780:	f002 fcfe 	bl	800c180 <_fflush_r>
 8009784:	68a1      	ldr	r1, [r4, #8]
 8009786:	4b09      	ldr	r3, [pc, #36]	@ (80097ac <cleanup_stdio+0x38>)
 8009788:	4299      	cmp	r1, r3
 800978a:	d002      	beq.n	8009792 <cleanup_stdio+0x1e>
 800978c:	4620      	mov	r0, r4
 800978e:	f002 fcf7 	bl	800c180 <_fflush_r>
 8009792:	68e1      	ldr	r1, [r4, #12]
 8009794:	4b06      	ldr	r3, [pc, #24]	@ (80097b0 <cleanup_stdio+0x3c>)
 8009796:	4299      	cmp	r1, r3
 8009798:	d004      	beq.n	80097a4 <cleanup_stdio+0x30>
 800979a:	4620      	mov	r0, r4
 800979c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097a0:	f002 bcee 	b.w	800c180 <_fflush_r>
 80097a4:	bd10      	pop	{r4, pc}
 80097a6:	bf00      	nop
 80097a8:	20031c40 	.word	0x20031c40
 80097ac:	20031ca8 	.word	0x20031ca8
 80097b0:	20031d10 	.word	0x20031d10

080097b4 <global_stdio_init.part.0>:
 80097b4:	b510      	push	{r4, lr}
 80097b6:	4b0b      	ldr	r3, [pc, #44]	@ (80097e4 <global_stdio_init.part.0+0x30>)
 80097b8:	4c0b      	ldr	r4, [pc, #44]	@ (80097e8 <global_stdio_init.part.0+0x34>)
 80097ba:	4a0c      	ldr	r2, [pc, #48]	@ (80097ec <global_stdio_init.part.0+0x38>)
 80097bc:	601a      	str	r2, [r3, #0]
 80097be:	4620      	mov	r0, r4
 80097c0:	2200      	movs	r2, #0
 80097c2:	2104      	movs	r1, #4
 80097c4:	f7ff ff94 	bl	80096f0 <std>
 80097c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80097cc:	2201      	movs	r2, #1
 80097ce:	2109      	movs	r1, #9
 80097d0:	f7ff ff8e 	bl	80096f0 <std>
 80097d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80097d8:	2202      	movs	r2, #2
 80097da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80097de:	2112      	movs	r1, #18
 80097e0:	f7ff bf86 	b.w	80096f0 <std>
 80097e4:	20031d78 	.word	0x20031d78
 80097e8:	20031c40 	.word	0x20031c40
 80097ec:	0800975d 	.word	0x0800975d

080097f0 <__sfp_lock_acquire>:
 80097f0:	4801      	ldr	r0, [pc, #4]	@ (80097f8 <__sfp_lock_acquire+0x8>)
 80097f2:	f000 b920 	b.w	8009a36 <__retarget_lock_acquire_recursive>
 80097f6:	bf00      	nop
 80097f8:	20031d81 	.word	0x20031d81

080097fc <__sfp_lock_release>:
 80097fc:	4801      	ldr	r0, [pc, #4]	@ (8009804 <__sfp_lock_release+0x8>)
 80097fe:	f000 b91b 	b.w	8009a38 <__retarget_lock_release_recursive>
 8009802:	bf00      	nop
 8009804:	20031d81 	.word	0x20031d81

08009808 <__sinit>:
 8009808:	b510      	push	{r4, lr}
 800980a:	4604      	mov	r4, r0
 800980c:	f7ff fff0 	bl	80097f0 <__sfp_lock_acquire>
 8009810:	6a23      	ldr	r3, [r4, #32]
 8009812:	b11b      	cbz	r3, 800981c <__sinit+0x14>
 8009814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009818:	f7ff bff0 	b.w	80097fc <__sfp_lock_release>
 800981c:	4b04      	ldr	r3, [pc, #16]	@ (8009830 <__sinit+0x28>)
 800981e:	6223      	str	r3, [r4, #32]
 8009820:	4b04      	ldr	r3, [pc, #16]	@ (8009834 <__sinit+0x2c>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1f5      	bne.n	8009814 <__sinit+0xc>
 8009828:	f7ff ffc4 	bl	80097b4 <global_stdio_init.part.0>
 800982c:	e7f2      	b.n	8009814 <__sinit+0xc>
 800982e:	bf00      	nop
 8009830:	08009775 	.word	0x08009775
 8009834:	20031d78 	.word	0x20031d78

08009838 <_fwalk_sglue>:
 8009838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800983c:	4607      	mov	r7, r0
 800983e:	4688      	mov	r8, r1
 8009840:	4614      	mov	r4, r2
 8009842:	2600      	movs	r6, #0
 8009844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009848:	f1b9 0901 	subs.w	r9, r9, #1
 800984c:	d505      	bpl.n	800985a <_fwalk_sglue+0x22>
 800984e:	6824      	ldr	r4, [r4, #0]
 8009850:	2c00      	cmp	r4, #0
 8009852:	d1f7      	bne.n	8009844 <_fwalk_sglue+0xc>
 8009854:	4630      	mov	r0, r6
 8009856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800985a:	89ab      	ldrh	r3, [r5, #12]
 800985c:	2b01      	cmp	r3, #1
 800985e:	d907      	bls.n	8009870 <_fwalk_sglue+0x38>
 8009860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009864:	3301      	adds	r3, #1
 8009866:	d003      	beq.n	8009870 <_fwalk_sglue+0x38>
 8009868:	4629      	mov	r1, r5
 800986a:	4638      	mov	r0, r7
 800986c:	47c0      	blx	r8
 800986e:	4306      	orrs	r6, r0
 8009870:	3568      	adds	r5, #104	@ 0x68
 8009872:	e7e9      	b.n	8009848 <_fwalk_sglue+0x10>

08009874 <siprintf>:
 8009874:	b40e      	push	{r1, r2, r3}
 8009876:	b500      	push	{lr}
 8009878:	b09c      	sub	sp, #112	@ 0x70
 800987a:	ab1d      	add	r3, sp, #116	@ 0x74
 800987c:	9002      	str	r0, [sp, #8]
 800987e:	9006      	str	r0, [sp, #24]
 8009880:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009884:	4809      	ldr	r0, [pc, #36]	@ (80098ac <siprintf+0x38>)
 8009886:	9107      	str	r1, [sp, #28]
 8009888:	9104      	str	r1, [sp, #16]
 800988a:	4909      	ldr	r1, [pc, #36]	@ (80098b0 <siprintf+0x3c>)
 800988c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009890:	9105      	str	r1, [sp, #20]
 8009892:	6800      	ldr	r0, [r0, #0]
 8009894:	9301      	str	r3, [sp, #4]
 8009896:	a902      	add	r1, sp, #8
 8009898:	f002 faf2 	bl	800be80 <_svfiprintf_r>
 800989c:	9b02      	ldr	r3, [sp, #8]
 800989e:	2200      	movs	r2, #0
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	b01c      	add	sp, #112	@ 0x70
 80098a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80098a8:	b003      	add	sp, #12
 80098aa:	4770      	bx	lr
 80098ac:	2000004c 	.word	0x2000004c
 80098b0:	ffff0208 	.word	0xffff0208

080098b4 <__sread>:
 80098b4:	b510      	push	{r4, lr}
 80098b6:	460c      	mov	r4, r1
 80098b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098bc:	f000 f86c 	bl	8009998 <_read_r>
 80098c0:	2800      	cmp	r0, #0
 80098c2:	bfab      	itete	ge
 80098c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80098c6:	89a3      	ldrhlt	r3, [r4, #12]
 80098c8:	181b      	addge	r3, r3, r0
 80098ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80098ce:	bfac      	ite	ge
 80098d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80098d2:	81a3      	strhlt	r3, [r4, #12]
 80098d4:	bd10      	pop	{r4, pc}

080098d6 <__swrite>:
 80098d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098da:	461f      	mov	r7, r3
 80098dc:	898b      	ldrh	r3, [r1, #12]
 80098de:	05db      	lsls	r3, r3, #23
 80098e0:	4605      	mov	r5, r0
 80098e2:	460c      	mov	r4, r1
 80098e4:	4616      	mov	r6, r2
 80098e6:	d505      	bpl.n	80098f4 <__swrite+0x1e>
 80098e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098ec:	2302      	movs	r3, #2
 80098ee:	2200      	movs	r2, #0
 80098f0:	f000 f840 	bl	8009974 <_lseek_r>
 80098f4:	89a3      	ldrh	r3, [r4, #12]
 80098f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80098fe:	81a3      	strh	r3, [r4, #12]
 8009900:	4632      	mov	r2, r6
 8009902:	463b      	mov	r3, r7
 8009904:	4628      	mov	r0, r5
 8009906:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800990a:	f000 b857 	b.w	80099bc <_write_r>

0800990e <__sseek>:
 800990e:	b510      	push	{r4, lr}
 8009910:	460c      	mov	r4, r1
 8009912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009916:	f000 f82d 	bl	8009974 <_lseek_r>
 800991a:	1c43      	adds	r3, r0, #1
 800991c:	89a3      	ldrh	r3, [r4, #12]
 800991e:	bf15      	itete	ne
 8009920:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009922:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009926:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800992a:	81a3      	strheq	r3, [r4, #12]
 800992c:	bf18      	it	ne
 800992e:	81a3      	strhne	r3, [r4, #12]
 8009930:	bd10      	pop	{r4, pc}

08009932 <__sclose>:
 8009932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009936:	f000 b80d 	b.w	8009954 <_close_r>

0800993a <memset>:
 800993a:	4402      	add	r2, r0
 800993c:	4603      	mov	r3, r0
 800993e:	4293      	cmp	r3, r2
 8009940:	d100      	bne.n	8009944 <memset+0xa>
 8009942:	4770      	bx	lr
 8009944:	f803 1b01 	strb.w	r1, [r3], #1
 8009948:	e7f9      	b.n	800993e <memset+0x4>
	...

0800994c <_localeconv_r>:
 800994c:	4800      	ldr	r0, [pc, #0]	@ (8009950 <_localeconv_r+0x4>)
 800994e:	4770      	bx	lr
 8009950:	2000018c 	.word	0x2000018c

08009954 <_close_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4d06      	ldr	r5, [pc, #24]	@ (8009970 <_close_r+0x1c>)
 8009958:	2300      	movs	r3, #0
 800995a:	4604      	mov	r4, r0
 800995c:	4608      	mov	r0, r1
 800995e:	602b      	str	r3, [r5, #0]
 8009960:	f7f9 fb9a 	bl	8003098 <_close>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_close_r+0x1a>
 8009968:	682b      	ldr	r3, [r5, #0]
 800996a:	b103      	cbz	r3, 800996e <_close_r+0x1a>
 800996c:	6023      	str	r3, [r4, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	20031d7c 	.word	0x20031d7c

08009974 <_lseek_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4d07      	ldr	r5, [pc, #28]	@ (8009994 <_lseek_r+0x20>)
 8009978:	4604      	mov	r4, r0
 800997a:	4608      	mov	r0, r1
 800997c:	4611      	mov	r1, r2
 800997e:	2200      	movs	r2, #0
 8009980:	602a      	str	r2, [r5, #0]
 8009982:	461a      	mov	r2, r3
 8009984:	f7f9 fbaf 	bl	80030e6 <_lseek>
 8009988:	1c43      	adds	r3, r0, #1
 800998a:	d102      	bne.n	8009992 <_lseek_r+0x1e>
 800998c:	682b      	ldr	r3, [r5, #0]
 800998e:	b103      	cbz	r3, 8009992 <_lseek_r+0x1e>
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	bd38      	pop	{r3, r4, r5, pc}
 8009994:	20031d7c 	.word	0x20031d7c

08009998 <_read_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4d07      	ldr	r5, [pc, #28]	@ (80099b8 <_read_r+0x20>)
 800999c:	4604      	mov	r4, r0
 800999e:	4608      	mov	r0, r1
 80099a0:	4611      	mov	r1, r2
 80099a2:	2200      	movs	r2, #0
 80099a4:	602a      	str	r2, [r5, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	f7f9 fb3d 	bl	8003026 <_read>
 80099ac:	1c43      	adds	r3, r0, #1
 80099ae:	d102      	bne.n	80099b6 <_read_r+0x1e>
 80099b0:	682b      	ldr	r3, [r5, #0]
 80099b2:	b103      	cbz	r3, 80099b6 <_read_r+0x1e>
 80099b4:	6023      	str	r3, [r4, #0]
 80099b6:	bd38      	pop	{r3, r4, r5, pc}
 80099b8:	20031d7c 	.word	0x20031d7c

080099bc <_write_r>:
 80099bc:	b538      	push	{r3, r4, r5, lr}
 80099be:	4d07      	ldr	r5, [pc, #28]	@ (80099dc <_write_r+0x20>)
 80099c0:	4604      	mov	r4, r0
 80099c2:	4608      	mov	r0, r1
 80099c4:	4611      	mov	r1, r2
 80099c6:	2200      	movs	r2, #0
 80099c8:	602a      	str	r2, [r5, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	f7f9 fb48 	bl	8003060 <_write>
 80099d0:	1c43      	adds	r3, r0, #1
 80099d2:	d102      	bne.n	80099da <_write_r+0x1e>
 80099d4:	682b      	ldr	r3, [r5, #0]
 80099d6:	b103      	cbz	r3, 80099da <_write_r+0x1e>
 80099d8:	6023      	str	r3, [r4, #0]
 80099da:	bd38      	pop	{r3, r4, r5, pc}
 80099dc:	20031d7c 	.word	0x20031d7c

080099e0 <__errno>:
 80099e0:	4b01      	ldr	r3, [pc, #4]	@ (80099e8 <__errno+0x8>)
 80099e2:	6818      	ldr	r0, [r3, #0]
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	2000004c 	.word	0x2000004c

080099ec <__libc_init_array>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009a24 <__libc_init_array+0x38>)
 80099f0:	4c0d      	ldr	r4, [pc, #52]	@ (8009a28 <__libc_init_array+0x3c>)
 80099f2:	1b64      	subs	r4, r4, r5
 80099f4:	10a4      	asrs	r4, r4, #2
 80099f6:	2600      	movs	r6, #0
 80099f8:	42a6      	cmp	r6, r4
 80099fa:	d109      	bne.n	8009a10 <__libc_init_array+0x24>
 80099fc:	4d0b      	ldr	r5, [pc, #44]	@ (8009a2c <__libc_init_array+0x40>)
 80099fe:	4c0c      	ldr	r4, [pc, #48]	@ (8009a30 <__libc_init_array+0x44>)
 8009a00:	f003 fab0 	bl	800cf64 <_init>
 8009a04:	1b64      	subs	r4, r4, r5
 8009a06:	10a4      	asrs	r4, r4, #2
 8009a08:	2600      	movs	r6, #0
 8009a0a:	42a6      	cmp	r6, r4
 8009a0c:	d105      	bne.n	8009a1a <__libc_init_array+0x2e>
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a14:	4798      	blx	r3
 8009a16:	3601      	adds	r6, #1
 8009a18:	e7ee      	b.n	80099f8 <__libc_init_array+0xc>
 8009a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a1e:	4798      	blx	r3
 8009a20:	3601      	adds	r6, #1
 8009a22:	e7f2      	b.n	8009a0a <__libc_init_array+0x1e>
 8009a24:	0800d6b0 	.word	0x0800d6b0
 8009a28:	0800d6b0 	.word	0x0800d6b0
 8009a2c:	0800d6b0 	.word	0x0800d6b0
 8009a30:	0800d6b4 	.word	0x0800d6b4

08009a34 <__retarget_lock_init_recursive>:
 8009a34:	4770      	bx	lr

08009a36 <__retarget_lock_acquire_recursive>:
 8009a36:	4770      	bx	lr

08009a38 <__retarget_lock_release_recursive>:
 8009a38:	4770      	bx	lr
	...

08009a3c <nanf>:
 8009a3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009a44 <nanf+0x8>
 8009a40:	4770      	bx	lr
 8009a42:	bf00      	nop
 8009a44:	7fc00000 	.word	0x7fc00000

08009a48 <quorem>:
 8009a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	6903      	ldr	r3, [r0, #16]
 8009a4e:	690c      	ldr	r4, [r1, #16]
 8009a50:	42a3      	cmp	r3, r4
 8009a52:	4607      	mov	r7, r0
 8009a54:	db7e      	blt.n	8009b54 <quorem+0x10c>
 8009a56:	3c01      	subs	r4, #1
 8009a58:	f101 0814 	add.w	r8, r1, #20
 8009a5c:	00a3      	lsls	r3, r4, #2
 8009a5e:	f100 0514 	add.w	r5, r0, #20
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009a68:	9301      	str	r3, [sp, #4]
 8009a6a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009a6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009a72:	3301      	adds	r3, #1
 8009a74:	429a      	cmp	r2, r3
 8009a76:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009a7a:	fbb2 f6f3 	udiv	r6, r2, r3
 8009a7e:	d32e      	bcc.n	8009ade <quorem+0x96>
 8009a80:	f04f 0a00 	mov.w	sl, #0
 8009a84:	46c4      	mov	ip, r8
 8009a86:	46ae      	mov	lr, r5
 8009a88:	46d3      	mov	fp, sl
 8009a8a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009a8e:	b298      	uxth	r0, r3
 8009a90:	fb06 a000 	mla	r0, r6, r0, sl
 8009a94:	0c02      	lsrs	r2, r0, #16
 8009a96:	0c1b      	lsrs	r3, r3, #16
 8009a98:	fb06 2303 	mla	r3, r6, r3, r2
 8009a9c:	f8de 2000 	ldr.w	r2, [lr]
 8009aa0:	b280      	uxth	r0, r0
 8009aa2:	b292      	uxth	r2, r2
 8009aa4:	1a12      	subs	r2, r2, r0
 8009aa6:	445a      	add	r2, fp
 8009aa8:	f8de 0000 	ldr.w	r0, [lr]
 8009aac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009ab0:	b29b      	uxth	r3, r3
 8009ab2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009ab6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009aba:	b292      	uxth	r2, r2
 8009abc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009ac0:	45e1      	cmp	r9, ip
 8009ac2:	f84e 2b04 	str.w	r2, [lr], #4
 8009ac6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009aca:	d2de      	bcs.n	8009a8a <quorem+0x42>
 8009acc:	9b00      	ldr	r3, [sp, #0]
 8009ace:	58eb      	ldr	r3, [r5, r3]
 8009ad0:	b92b      	cbnz	r3, 8009ade <quorem+0x96>
 8009ad2:	9b01      	ldr	r3, [sp, #4]
 8009ad4:	3b04      	subs	r3, #4
 8009ad6:	429d      	cmp	r5, r3
 8009ad8:	461a      	mov	r2, r3
 8009ada:	d32f      	bcc.n	8009b3c <quorem+0xf4>
 8009adc:	613c      	str	r4, [r7, #16]
 8009ade:	4638      	mov	r0, r7
 8009ae0:	f001 f954 	bl	800ad8c <__mcmp>
 8009ae4:	2800      	cmp	r0, #0
 8009ae6:	db25      	blt.n	8009b34 <quorem+0xec>
 8009ae8:	4629      	mov	r1, r5
 8009aea:	2000      	movs	r0, #0
 8009aec:	f858 2b04 	ldr.w	r2, [r8], #4
 8009af0:	f8d1 c000 	ldr.w	ip, [r1]
 8009af4:	fa1f fe82 	uxth.w	lr, r2
 8009af8:	fa1f f38c 	uxth.w	r3, ip
 8009afc:	eba3 030e 	sub.w	r3, r3, lr
 8009b00:	4403      	add	r3, r0
 8009b02:	0c12      	lsrs	r2, r2, #16
 8009b04:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009b08:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b12:	45c1      	cmp	r9, r8
 8009b14:	f841 3b04 	str.w	r3, [r1], #4
 8009b18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009b1c:	d2e6      	bcs.n	8009aec <quorem+0xa4>
 8009b1e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b26:	b922      	cbnz	r2, 8009b32 <quorem+0xea>
 8009b28:	3b04      	subs	r3, #4
 8009b2a:	429d      	cmp	r5, r3
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	d30b      	bcc.n	8009b48 <quorem+0x100>
 8009b30:	613c      	str	r4, [r7, #16]
 8009b32:	3601      	adds	r6, #1
 8009b34:	4630      	mov	r0, r6
 8009b36:	b003      	add	sp, #12
 8009b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b3c:	6812      	ldr	r2, [r2, #0]
 8009b3e:	3b04      	subs	r3, #4
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	d1cb      	bne.n	8009adc <quorem+0x94>
 8009b44:	3c01      	subs	r4, #1
 8009b46:	e7c6      	b.n	8009ad6 <quorem+0x8e>
 8009b48:	6812      	ldr	r2, [r2, #0]
 8009b4a:	3b04      	subs	r3, #4
 8009b4c:	2a00      	cmp	r2, #0
 8009b4e:	d1ef      	bne.n	8009b30 <quorem+0xe8>
 8009b50:	3c01      	subs	r4, #1
 8009b52:	e7ea      	b.n	8009b2a <quorem+0xe2>
 8009b54:	2000      	movs	r0, #0
 8009b56:	e7ee      	b.n	8009b36 <quorem+0xee>

08009b58 <_dtoa_r>:
 8009b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b5c:	ed2d 8b02 	vpush	{d8}
 8009b60:	69c7      	ldr	r7, [r0, #28]
 8009b62:	b091      	sub	sp, #68	@ 0x44
 8009b64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009b68:	ec55 4b10 	vmov	r4, r5, d0
 8009b6c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8009b6e:	9107      	str	r1, [sp, #28]
 8009b70:	4681      	mov	r9, r0
 8009b72:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b74:	930d      	str	r3, [sp, #52]	@ 0x34
 8009b76:	b97f      	cbnz	r7, 8009b98 <_dtoa_r+0x40>
 8009b78:	2010      	movs	r0, #16
 8009b7a:	f000 fd8d 	bl	800a698 <malloc>
 8009b7e:	4602      	mov	r2, r0
 8009b80:	f8c9 001c 	str.w	r0, [r9, #28]
 8009b84:	b920      	cbnz	r0, 8009b90 <_dtoa_r+0x38>
 8009b86:	4ba0      	ldr	r3, [pc, #640]	@ (8009e08 <_dtoa_r+0x2b0>)
 8009b88:	21ef      	movs	r1, #239	@ 0xef
 8009b8a:	48a0      	ldr	r0, [pc, #640]	@ (8009e0c <_dtoa_r+0x2b4>)
 8009b8c:	f002 fb74 	bl	800c278 <__assert_func>
 8009b90:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009b94:	6007      	str	r7, [r0, #0]
 8009b96:	60c7      	str	r7, [r0, #12]
 8009b98:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009b9c:	6819      	ldr	r1, [r3, #0]
 8009b9e:	b159      	cbz	r1, 8009bb8 <_dtoa_r+0x60>
 8009ba0:	685a      	ldr	r2, [r3, #4]
 8009ba2:	604a      	str	r2, [r1, #4]
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	4093      	lsls	r3, r2
 8009ba8:	608b      	str	r3, [r1, #8]
 8009baa:	4648      	mov	r0, r9
 8009bac:	f000 fe6a 	bl	800a884 <_Bfree>
 8009bb0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	601a      	str	r2, [r3, #0]
 8009bb8:	1e2b      	subs	r3, r5, #0
 8009bba:	bfbb      	ittet	lt
 8009bbc:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009bc0:	9303      	strlt	r3, [sp, #12]
 8009bc2:	2300      	movge	r3, #0
 8009bc4:	2201      	movlt	r2, #1
 8009bc6:	bfac      	ite	ge
 8009bc8:	6033      	strge	r3, [r6, #0]
 8009bca:	6032      	strlt	r2, [r6, #0]
 8009bcc:	4b90      	ldr	r3, [pc, #576]	@ (8009e10 <_dtoa_r+0x2b8>)
 8009bce:	9e03      	ldr	r6, [sp, #12]
 8009bd0:	43b3      	bics	r3, r6
 8009bd2:	d110      	bne.n	8009bf6 <_dtoa_r+0x9e>
 8009bd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bd6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009bda:	6013      	str	r3, [r2, #0]
 8009bdc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8009be0:	4323      	orrs	r3, r4
 8009be2:	f000 84de 	beq.w	800a5a2 <_dtoa_r+0xa4a>
 8009be6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009be8:	4f8a      	ldr	r7, [pc, #552]	@ (8009e14 <_dtoa_r+0x2bc>)
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	f000 84e0 	beq.w	800a5b0 <_dtoa_r+0xa58>
 8009bf0:	1cfb      	adds	r3, r7, #3
 8009bf2:	f000 bcdb 	b.w	800a5ac <_dtoa_r+0xa54>
 8009bf6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009bfa:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c02:	d10a      	bne.n	8009c1a <_dtoa_r+0xc2>
 8009c04:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009c06:	2301      	movs	r3, #1
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009c0c:	b113      	cbz	r3, 8009c14 <_dtoa_r+0xbc>
 8009c0e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8009c10:	4b81      	ldr	r3, [pc, #516]	@ (8009e18 <_dtoa_r+0x2c0>)
 8009c12:	6013      	str	r3, [r2, #0]
 8009c14:	4f81      	ldr	r7, [pc, #516]	@ (8009e1c <_dtoa_r+0x2c4>)
 8009c16:	f000 bccb 	b.w	800a5b0 <_dtoa_r+0xa58>
 8009c1a:	aa0e      	add	r2, sp, #56	@ 0x38
 8009c1c:	a90f      	add	r1, sp, #60	@ 0x3c
 8009c1e:	4648      	mov	r0, r9
 8009c20:	eeb0 0b48 	vmov.f64	d0, d8
 8009c24:	f001 f9d2 	bl	800afcc <__d2b>
 8009c28:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8009c2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c2e:	9001      	str	r0, [sp, #4]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d045      	beq.n	8009cc0 <_dtoa_r+0x168>
 8009c34:	eeb0 7b48 	vmov.f64	d7, d8
 8009c38:	ee18 1a90 	vmov	r1, s17
 8009c3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009c40:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009c44:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009c48:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8009c4c:	2500      	movs	r5, #0
 8009c4e:	ee07 1a90 	vmov	s15, r1
 8009c52:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009c56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009df0 <_dtoa_r+0x298>
 8009c5a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009c5e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8009df8 <_dtoa_r+0x2a0>
 8009c62:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009c66:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8009e00 <_dtoa_r+0x2a8>
 8009c6a:	ee07 3a90 	vmov	s15, r3
 8009c6e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009c72:	eeb0 7b46 	vmov.f64	d7, d6
 8009c76:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009c7a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009c7e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c86:	ee16 8a90 	vmov	r8, s13
 8009c8a:	d508      	bpl.n	8009c9e <_dtoa_r+0x146>
 8009c8c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009c90:	eeb4 6b47 	vcmp.f64	d6, d7
 8009c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c98:	bf18      	it	ne
 8009c9a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8009c9e:	f1b8 0f16 	cmp.w	r8, #22
 8009ca2:	d82b      	bhi.n	8009cfc <_dtoa_r+0x1a4>
 8009ca4:	495e      	ldr	r1, [pc, #376]	@ (8009e20 <_dtoa_r+0x2c8>)
 8009ca6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8009caa:	ed91 7b00 	vldr	d7, [r1]
 8009cae:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cb6:	d501      	bpl.n	8009cbc <_dtoa_r+0x164>
 8009cb8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009cbc:	2100      	movs	r1, #0
 8009cbe:	e01e      	b.n	8009cfe <_dtoa_r+0x1a6>
 8009cc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009cc8:	2920      	cmp	r1, #32
 8009cca:	bfc1      	itttt	gt
 8009ccc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009cd0:	408e      	lslgt	r6, r1
 8009cd2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009cd6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8009cda:	bfd6      	itet	le
 8009cdc:	f1c1 0120 	rsble	r1, r1, #32
 8009ce0:	4331      	orrgt	r1, r6
 8009ce2:	fa04 f101 	lslle.w	r1, r4, r1
 8009ce6:	ee07 1a90 	vmov	s15, r1
 8009cea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009cee:	3b01      	subs	r3, #1
 8009cf0:	ee17 1a90 	vmov	r1, s15
 8009cf4:	2501      	movs	r5, #1
 8009cf6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8009cfa:	e7a8      	b.n	8009c4e <_dtoa_r+0xf6>
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	1e53      	subs	r3, r2, #1
 8009d02:	9306      	str	r3, [sp, #24]
 8009d04:	bf45      	ittet	mi
 8009d06:	f1c2 0301 	rsbmi	r3, r2, #1
 8009d0a:	9305      	strmi	r3, [sp, #20]
 8009d0c:	2300      	movpl	r3, #0
 8009d0e:	2300      	movmi	r3, #0
 8009d10:	bf4c      	ite	mi
 8009d12:	9306      	strmi	r3, [sp, #24]
 8009d14:	9305      	strpl	r3, [sp, #20]
 8009d16:	f1b8 0f00 	cmp.w	r8, #0
 8009d1a:	910c      	str	r1, [sp, #48]	@ 0x30
 8009d1c:	db18      	blt.n	8009d50 <_dtoa_r+0x1f8>
 8009d1e:	9b06      	ldr	r3, [sp, #24]
 8009d20:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009d24:	4443      	add	r3, r8
 8009d26:	9306      	str	r3, [sp, #24]
 8009d28:	2300      	movs	r3, #0
 8009d2a:	9a07      	ldr	r2, [sp, #28]
 8009d2c:	2a09      	cmp	r2, #9
 8009d2e:	d849      	bhi.n	8009dc4 <_dtoa_r+0x26c>
 8009d30:	2a05      	cmp	r2, #5
 8009d32:	bfc4      	itt	gt
 8009d34:	3a04      	subgt	r2, #4
 8009d36:	9207      	strgt	r2, [sp, #28]
 8009d38:	9a07      	ldr	r2, [sp, #28]
 8009d3a:	f1a2 0202 	sub.w	r2, r2, #2
 8009d3e:	bfcc      	ite	gt
 8009d40:	2400      	movgt	r4, #0
 8009d42:	2401      	movle	r4, #1
 8009d44:	2a03      	cmp	r2, #3
 8009d46:	d848      	bhi.n	8009dda <_dtoa_r+0x282>
 8009d48:	e8df f002 	tbb	[pc, r2]
 8009d4c:	3a2c2e0b 	.word	0x3a2c2e0b
 8009d50:	9b05      	ldr	r3, [sp, #20]
 8009d52:	2200      	movs	r2, #0
 8009d54:	eba3 0308 	sub.w	r3, r3, r8
 8009d58:	9305      	str	r3, [sp, #20]
 8009d5a:	920a      	str	r2, [sp, #40]	@ 0x28
 8009d5c:	f1c8 0300 	rsb	r3, r8, #0
 8009d60:	e7e3      	b.n	8009d2a <_dtoa_r+0x1d2>
 8009d62:	2200      	movs	r2, #0
 8009d64:	9208      	str	r2, [sp, #32]
 8009d66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d68:	2a00      	cmp	r2, #0
 8009d6a:	dc39      	bgt.n	8009de0 <_dtoa_r+0x288>
 8009d6c:	f04f 0b01 	mov.w	fp, #1
 8009d70:	46da      	mov	sl, fp
 8009d72:	465a      	mov	r2, fp
 8009d74:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8009d78:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8009d7c:	2100      	movs	r1, #0
 8009d7e:	2004      	movs	r0, #4
 8009d80:	f100 0614 	add.w	r6, r0, #20
 8009d84:	4296      	cmp	r6, r2
 8009d86:	d930      	bls.n	8009dea <_dtoa_r+0x292>
 8009d88:	6079      	str	r1, [r7, #4]
 8009d8a:	4648      	mov	r0, r9
 8009d8c:	9304      	str	r3, [sp, #16]
 8009d8e:	f000 fd39 	bl	800a804 <_Balloc>
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	4607      	mov	r7, r0
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d146      	bne.n	8009e28 <_dtoa_r+0x2d0>
 8009d9a:	4b22      	ldr	r3, [pc, #136]	@ (8009e24 <_dtoa_r+0x2cc>)
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009da2:	e6f2      	b.n	8009b8a <_dtoa_r+0x32>
 8009da4:	2201      	movs	r2, #1
 8009da6:	e7dd      	b.n	8009d64 <_dtoa_r+0x20c>
 8009da8:	2200      	movs	r2, #0
 8009daa:	9208      	str	r2, [sp, #32]
 8009dac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dae:	eb08 0b02 	add.w	fp, r8, r2
 8009db2:	f10b 0a01 	add.w	sl, fp, #1
 8009db6:	4652      	mov	r2, sl
 8009db8:	2a01      	cmp	r2, #1
 8009dba:	bfb8      	it	lt
 8009dbc:	2201      	movlt	r2, #1
 8009dbe:	e7db      	b.n	8009d78 <_dtoa_r+0x220>
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	e7f2      	b.n	8009daa <_dtoa_r+0x252>
 8009dc4:	2401      	movs	r4, #1
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009dcc:	f04f 3bff 	mov.w	fp, #4294967295
 8009dd0:	2100      	movs	r1, #0
 8009dd2:	46da      	mov	sl, fp
 8009dd4:	2212      	movs	r2, #18
 8009dd6:	9109      	str	r1, [sp, #36]	@ 0x24
 8009dd8:	e7ce      	b.n	8009d78 <_dtoa_r+0x220>
 8009dda:	2201      	movs	r2, #1
 8009ddc:	9208      	str	r2, [sp, #32]
 8009dde:	e7f5      	b.n	8009dcc <_dtoa_r+0x274>
 8009de0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8009de4:	46da      	mov	sl, fp
 8009de6:	465a      	mov	r2, fp
 8009de8:	e7c6      	b.n	8009d78 <_dtoa_r+0x220>
 8009dea:	3101      	adds	r1, #1
 8009dec:	0040      	lsls	r0, r0, #1
 8009dee:	e7c7      	b.n	8009d80 <_dtoa_r+0x228>
 8009df0:	636f4361 	.word	0x636f4361
 8009df4:	3fd287a7 	.word	0x3fd287a7
 8009df8:	8b60c8b3 	.word	0x8b60c8b3
 8009dfc:	3fc68a28 	.word	0x3fc68a28
 8009e00:	509f79fb 	.word	0x509f79fb
 8009e04:	3fd34413 	.word	0x3fd34413
 8009e08:	0800d2be 	.word	0x0800d2be
 8009e0c:	0800d2d5 	.word	0x0800d2d5
 8009e10:	7ff00000 	.word	0x7ff00000
 8009e14:	0800d2ba 	.word	0x0800d2ba
 8009e18:	0800d289 	.word	0x0800d289
 8009e1c:	0800d288 	.word	0x0800d288
 8009e20:	0800d3d0 	.word	0x0800d3d0
 8009e24:	0800d32d 	.word	0x0800d32d
 8009e28:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8009e2c:	f1ba 0f0e 	cmp.w	sl, #14
 8009e30:	6010      	str	r0, [r2, #0]
 8009e32:	d86f      	bhi.n	8009f14 <_dtoa_r+0x3bc>
 8009e34:	2c00      	cmp	r4, #0
 8009e36:	d06d      	beq.n	8009f14 <_dtoa_r+0x3bc>
 8009e38:	f1b8 0f00 	cmp.w	r8, #0
 8009e3c:	f340 80c2 	ble.w	8009fc4 <_dtoa_r+0x46c>
 8009e40:	4aca      	ldr	r2, [pc, #808]	@ (800a16c <_dtoa_r+0x614>)
 8009e42:	f008 010f 	and.w	r1, r8, #15
 8009e46:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009e4a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8009e4e:	ed92 7b00 	vldr	d7, [r2]
 8009e52:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009e56:	f000 80a9 	beq.w	8009fac <_dtoa_r+0x454>
 8009e5a:	4ac5      	ldr	r2, [pc, #788]	@ (800a170 <_dtoa_r+0x618>)
 8009e5c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009e60:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009e64:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009e68:	f001 010f 	and.w	r1, r1, #15
 8009e6c:	2203      	movs	r2, #3
 8009e6e:	48c0      	ldr	r0, [pc, #768]	@ (800a170 <_dtoa_r+0x618>)
 8009e70:	2900      	cmp	r1, #0
 8009e72:	f040 809d 	bne.w	8009fb0 <_dtoa_r+0x458>
 8009e76:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009e7a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009e7e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009e82:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009e84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e88:	2900      	cmp	r1, #0
 8009e8a:	f000 80c1 	beq.w	800a010 <_dtoa_r+0x4b8>
 8009e8e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009e92:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009e96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e9a:	f140 80b9 	bpl.w	800a010 <_dtoa_r+0x4b8>
 8009e9e:	f1ba 0f00 	cmp.w	sl, #0
 8009ea2:	f000 80b5 	beq.w	800a010 <_dtoa_r+0x4b8>
 8009ea6:	f1bb 0f00 	cmp.w	fp, #0
 8009eaa:	dd31      	ble.n	8009f10 <_dtoa_r+0x3b8>
 8009eac:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009eb0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009eb4:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009eb8:	f108 31ff 	add.w	r1, r8, #4294967295
 8009ebc:	9104      	str	r1, [sp, #16]
 8009ebe:	3201      	adds	r2, #1
 8009ec0:	465c      	mov	r4, fp
 8009ec2:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ec6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8009eca:	ee07 2a90 	vmov	s15, r2
 8009ece:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009ed2:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009ed6:	ee15 2a90 	vmov	r2, s11
 8009eda:	ec51 0b15 	vmov	r0, r1, d5
 8009ede:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8009ee2:	2c00      	cmp	r4, #0
 8009ee4:	f040 8098 	bne.w	800a018 <_dtoa_r+0x4c0>
 8009ee8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009eec:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009ef0:	ec41 0b17 	vmov	d7, r0, r1
 8009ef4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009efc:	f300 8261 	bgt.w	800a3c2 <_dtoa_r+0x86a>
 8009f00:	eeb1 7b47 	vneg.f64	d7, d7
 8009f04:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f0c:	f100 80f5 	bmi.w	800a0fa <_dtoa_r+0x5a2>
 8009f10:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009f14:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009f16:	2a00      	cmp	r2, #0
 8009f18:	f2c0 812c 	blt.w	800a174 <_dtoa_r+0x61c>
 8009f1c:	f1b8 0f0e 	cmp.w	r8, #14
 8009f20:	f300 8128 	bgt.w	800a174 <_dtoa_r+0x61c>
 8009f24:	4b91      	ldr	r3, [pc, #580]	@ (800a16c <_dtoa_r+0x614>)
 8009f26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009f2a:	ed93 6b00 	vldr	d6, [r3]
 8009f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	da03      	bge.n	8009f3c <_dtoa_r+0x3e4>
 8009f34:	f1ba 0f00 	cmp.w	sl, #0
 8009f38:	f340 80d2 	ble.w	800a0e0 <_dtoa_r+0x588>
 8009f3c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009f40:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009f44:	463e      	mov	r6, r7
 8009f46:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009f4a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009f4e:	ee15 3a10 	vmov	r3, s10
 8009f52:	3330      	adds	r3, #48	@ 0x30
 8009f54:	f806 3b01 	strb.w	r3, [r6], #1
 8009f58:	1bf3      	subs	r3, r6, r7
 8009f5a:	459a      	cmp	sl, r3
 8009f5c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009f60:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009f64:	f040 80f8 	bne.w	800a158 <_dtoa_r+0x600>
 8009f68:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009f6c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f74:	f300 80dd 	bgt.w	800a132 <_dtoa_r+0x5da>
 8009f78:	eeb4 7b46 	vcmp.f64	d7, d6
 8009f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f80:	d104      	bne.n	8009f8c <_dtoa_r+0x434>
 8009f82:	ee15 3a10 	vmov	r3, s10
 8009f86:	07db      	lsls	r3, r3, #31
 8009f88:	f100 80d3 	bmi.w	800a132 <_dtoa_r+0x5da>
 8009f8c:	9901      	ldr	r1, [sp, #4]
 8009f8e:	4648      	mov	r0, r9
 8009f90:	f000 fc78 	bl	800a884 <_Bfree>
 8009f94:	2300      	movs	r3, #0
 8009f96:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009f98:	7033      	strb	r3, [r6, #0]
 8009f9a:	f108 0301 	add.w	r3, r8, #1
 8009f9e:	6013      	str	r3, [r2, #0]
 8009fa0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 8304 	beq.w	800a5b0 <_dtoa_r+0xa58>
 8009fa8:	601e      	str	r6, [r3, #0]
 8009faa:	e301      	b.n	800a5b0 <_dtoa_r+0xa58>
 8009fac:	2202      	movs	r2, #2
 8009fae:	e75e      	b.n	8009e6e <_dtoa_r+0x316>
 8009fb0:	07cc      	lsls	r4, r1, #31
 8009fb2:	d504      	bpl.n	8009fbe <_dtoa_r+0x466>
 8009fb4:	ed90 6b00 	vldr	d6, [r0]
 8009fb8:	3201      	adds	r2, #1
 8009fba:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009fbe:	1049      	asrs	r1, r1, #1
 8009fc0:	3008      	adds	r0, #8
 8009fc2:	e755      	b.n	8009e70 <_dtoa_r+0x318>
 8009fc4:	d022      	beq.n	800a00c <_dtoa_r+0x4b4>
 8009fc6:	f1c8 0100 	rsb	r1, r8, #0
 8009fca:	4a68      	ldr	r2, [pc, #416]	@ (800a16c <_dtoa_r+0x614>)
 8009fcc:	f001 000f 	and.w	r0, r1, #15
 8009fd0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009fd4:	ed92 7b00 	vldr	d7, [r2]
 8009fd8:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009fdc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009fe0:	4863      	ldr	r0, [pc, #396]	@ (800a170 <_dtoa_r+0x618>)
 8009fe2:	1109      	asrs	r1, r1, #4
 8009fe4:	2400      	movs	r4, #0
 8009fe6:	2202      	movs	r2, #2
 8009fe8:	b929      	cbnz	r1, 8009ff6 <_dtoa_r+0x49e>
 8009fea:	2c00      	cmp	r4, #0
 8009fec:	f43f af49 	beq.w	8009e82 <_dtoa_r+0x32a>
 8009ff0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ff4:	e745      	b.n	8009e82 <_dtoa_r+0x32a>
 8009ff6:	07ce      	lsls	r6, r1, #31
 8009ff8:	d505      	bpl.n	800a006 <_dtoa_r+0x4ae>
 8009ffa:	ed90 6b00 	vldr	d6, [r0]
 8009ffe:	3201      	adds	r2, #1
 800a000:	2401      	movs	r4, #1
 800a002:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a006:	1049      	asrs	r1, r1, #1
 800a008:	3008      	adds	r0, #8
 800a00a:	e7ed      	b.n	8009fe8 <_dtoa_r+0x490>
 800a00c:	2202      	movs	r2, #2
 800a00e:	e738      	b.n	8009e82 <_dtoa_r+0x32a>
 800a010:	f8cd 8010 	str.w	r8, [sp, #16]
 800a014:	4654      	mov	r4, sl
 800a016:	e754      	b.n	8009ec2 <_dtoa_r+0x36a>
 800a018:	4a54      	ldr	r2, [pc, #336]	@ (800a16c <_dtoa_r+0x614>)
 800a01a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800a01e:	ed12 4b02 	vldr	d4, [r2, #-8]
 800a022:	9a08      	ldr	r2, [sp, #32]
 800a024:	ec41 0b17 	vmov	d7, r0, r1
 800a028:	443c      	add	r4, r7
 800a02a:	b34a      	cbz	r2, 800a080 <_dtoa_r+0x528>
 800a02c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800a030:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800a034:	463e      	mov	r6, r7
 800a036:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800a03a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a03e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a042:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a046:	ee14 2a90 	vmov	r2, s9
 800a04a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a04e:	3230      	adds	r2, #48	@ 0x30
 800a050:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a054:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a05c:	f806 2b01 	strb.w	r2, [r6], #1
 800a060:	d438      	bmi.n	800a0d4 <_dtoa_r+0x57c>
 800a062:	ee32 5b46 	vsub.f64	d5, d2, d6
 800a066:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a06e:	d462      	bmi.n	800a136 <_dtoa_r+0x5de>
 800a070:	42a6      	cmp	r6, r4
 800a072:	f43f af4d 	beq.w	8009f10 <_dtoa_r+0x3b8>
 800a076:	ee27 7b03 	vmul.f64	d7, d7, d3
 800a07a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a07e:	e7e0      	b.n	800a042 <_dtoa_r+0x4ea>
 800a080:	4621      	mov	r1, r4
 800a082:	463e      	mov	r6, r7
 800a084:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a088:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800a08c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800a090:	ee14 2a90 	vmov	r2, s9
 800a094:	3230      	adds	r2, #48	@ 0x30
 800a096:	f806 2b01 	strb.w	r2, [r6], #1
 800a09a:	42a6      	cmp	r6, r4
 800a09c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800a0a0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800a0a4:	d119      	bne.n	800a0da <_dtoa_r+0x582>
 800a0a6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800a0aa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800a0ae:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800a0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0b6:	dc3e      	bgt.n	800a136 <_dtoa_r+0x5de>
 800a0b8:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a0bc:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a0c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0c4:	f57f af24 	bpl.w	8009f10 <_dtoa_r+0x3b8>
 800a0c8:	460e      	mov	r6, r1
 800a0ca:	3901      	subs	r1, #1
 800a0cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a0d0:	2b30      	cmp	r3, #48	@ 0x30
 800a0d2:	d0f9      	beq.n	800a0c8 <_dtoa_r+0x570>
 800a0d4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a0d8:	e758      	b.n	8009f8c <_dtoa_r+0x434>
 800a0da:	ee26 6b03 	vmul.f64	d6, d6, d3
 800a0de:	e7d5      	b.n	800a08c <_dtoa_r+0x534>
 800a0e0:	d10b      	bne.n	800a0fa <_dtoa_r+0x5a2>
 800a0e2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800a0e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a0ea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0ee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a0f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0f6:	f2c0 8161 	blt.w	800a3bc <_dtoa_r+0x864>
 800a0fa:	2400      	movs	r4, #0
 800a0fc:	4625      	mov	r5, r4
 800a0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a100:	43db      	mvns	r3, r3
 800a102:	9304      	str	r3, [sp, #16]
 800a104:	463e      	mov	r6, r7
 800a106:	f04f 0800 	mov.w	r8, #0
 800a10a:	4621      	mov	r1, r4
 800a10c:	4648      	mov	r0, r9
 800a10e:	f000 fbb9 	bl	800a884 <_Bfree>
 800a112:	2d00      	cmp	r5, #0
 800a114:	d0de      	beq.n	800a0d4 <_dtoa_r+0x57c>
 800a116:	f1b8 0f00 	cmp.w	r8, #0
 800a11a:	d005      	beq.n	800a128 <_dtoa_r+0x5d0>
 800a11c:	45a8      	cmp	r8, r5
 800a11e:	d003      	beq.n	800a128 <_dtoa_r+0x5d0>
 800a120:	4641      	mov	r1, r8
 800a122:	4648      	mov	r0, r9
 800a124:	f000 fbae 	bl	800a884 <_Bfree>
 800a128:	4629      	mov	r1, r5
 800a12a:	4648      	mov	r0, r9
 800a12c:	f000 fbaa 	bl	800a884 <_Bfree>
 800a130:	e7d0      	b.n	800a0d4 <_dtoa_r+0x57c>
 800a132:	f8cd 8010 	str.w	r8, [sp, #16]
 800a136:	4633      	mov	r3, r6
 800a138:	461e      	mov	r6, r3
 800a13a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a13e:	2a39      	cmp	r2, #57	@ 0x39
 800a140:	d106      	bne.n	800a150 <_dtoa_r+0x5f8>
 800a142:	429f      	cmp	r7, r3
 800a144:	d1f8      	bne.n	800a138 <_dtoa_r+0x5e0>
 800a146:	9a04      	ldr	r2, [sp, #16]
 800a148:	3201      	adds	r2, #1
 800a14a:	9204      	str	r2, [sp, #16]
 800a14c:	2230      	movs	r2, #48	@ 0x30
 800a14e:	703a      	strb	r2, [r7, #0]
 800a150:	781a      	ldrb	r2, [r3, #0]
 800a152:	3201      	adds	r2, #1
 800a154:	701a      	strb	r2, [r3, #0]
 800a156:	e7bd      	b.n	800a0d4 <_dtoa_r+0x57c>
 800a158:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a15c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a164:	f47f aeef 	bne.w	8009f46 <_dtoa_r+0x3ee>
 800a168:	e710      	b.n	8009f8c <_dtoa_r+0x434>
 800a16a:	bf00      	nop
 800a16c:	0800d3d0 	.word	0x0800d3d0
 800a170:	0800d3a8 	.word	0x0800d3a8
 800a174:	9908      	ldr	r1, [sp, #32]
 800a176:	2900      	cmp	r1, #0
 800a178:	f000 80e3 	beq.w	800a342 <_dtoa_r+0x7ea>
 800a17c:	9907      	ldr	r1, [sp, #28]
 800a17e:	2901      	cmp	r1, #1
 800a180:	f300 80c8 	bgt.w	800a314 <_dtoa_r+0x7bc>
 800a184:	2d00      	cmp	r5, #0
 800a186:	f000 80c1 	beq.w	800a30c <_dtoa_r+0x7b4>
 800a18a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a18e:	9e05      	ldr	r6, [sp, #20]
 800a190:	461c      	mov	r4, r3
 800a192:	9304      	str	r3, [sp, #16]
 800a194:	9b05      	ldr	r3, [sp, #20]
 800a196:	4413      	add	r3, r2
 800a198:	9305      	str	r3, [sp, #20]
 800a19a:	9b06      	ldr	r3, [sp, #24]
 800a19c:	2101      	movs	r1, #1
 800a19e:	4413      	add	r3, r2
 800a1a0:	4648      	mov	r0, r9
 800a1a2:	9306      	str	r3, [sp, #24]
 800a1a4:	f000 fc6c 	bl	800aa80 <__i2b>
 800a1a8:	9b04      	ldr	r3, [sp, #16]
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	b166      	cbz	r6, 800a1c8 <_dtoa_r+0x670>
 800a1ae:	9a06      	ldr	r2, [sp, #24]
 800a1b0:	2a00      	cmp	r2, #0
 800a1b2:	dd09      	ble.n	800a1c8 <_dtoa_r+0x670>
 800a1b4:	42b2      	cmp	r2, r6
 800a1b6:	9905      	ldr	r1, [sp, #20]
 800a1b8:	bfa8      	it	ge
 800a1ba:	4632      	movge	r2, r6
 800a1bc:	1a89      	subs	r1, r1, r2
 800a1be:	9105      	str	r1, [sp, #20]
 800a1c0:	9906      	ldr	r1, [sp, #24]
 800a1c2:	1ab6      	subs	r6, r6, r2
 800a1c4:	1a8a      	subs	r2, r1, r2
 800a1c6:	9206      	str	r2, [sp, #24]
 800a1c8:	b1fb      	cbz	r3, 800a20a <_dtoa_r+0x6b2>
 800a1ca:	9a08      	ldr	r2, [sp, #32]
 800a1cc:	2a00      	cmp	r2, #0
 800a1ce:	f000 80bc 	beq.w	800a34a <_dtoa_r+0x7f2>
 800a1d2:	b19c      	cbz	r4, 800a1fc <_dtoa_r+0x6a4>
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	4622      	mov	r2, r4
 800a1d8:	4648      	mov	r0, r9
 800a1da:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1dc:	f000 fd10 	bl	800ac00 <__pow5mult>
 800a1e0:	9a01      	ldr	r2, [sp, #4]
 800a1e2:	4601      	mov	r1, r0
 800a1e4:	4605      	mov	r5, r0
 800a1e6:	4648      	mov	r0, r9
 800a1e8:	f000 fc60 	bl	800aaac <__multiply>
 800a1ec:	9901      	ldr	r1, [sp, #4]
 800a1ee:	9004      	str	r0, [sp, #16]
 800a1f0:	4648      	mov	r0, r9
 800a1f2:	f000 fb47 	bl	800a884 <_Bfree>
 800a1f6:	9a04      	ldr	r2, [sp, #16]
 800a1f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1fa:	9201      	str	r2, [sp, #4]
 800a1fc:	1b1a      	subs	r2, r3, r4
 800a1fe:	d004      	beq.n	800a20a <_dtoa_r+0x6b2>
 800a200:	9901      	ldr	r1, [sp, #4]
 800a202:	4648      	mov	r0, r9
 800a204:	f000 fcfc 	bl	800ac00 <__pow5mult>
 800a208:	9001      	str	r0, [sp, #4]
 800a20a:	2101      	movs	r1, #1
 800a20c:	4648      	mov	r0, r9
 800a20e:	f000 fc37 	bl	800aa80 <__i2b>
 800a212:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a214:	4604      	mov	r4, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	f000 81d0 	beq.w	800a5bc <_dtoa_r+0xa64>
 800a21c:	461a      	mov	r2, r3
 800a21e:	4601      	mov	r1, r0
 800a220:	4648      	mov	r0, r9
 800a222:	f000 fced 	bl	800ac00 <__pow5mult>
 800a226:	9b07      	ldr	r3, [sp, #28]
 800a228:	2b01      	cmp	r3, #1
 800a22a:	4604      	mov	r4, r0
 800a22c:	f300 8095 	bgt.w	800a35a <_dtoa_r+0x802>
 800a230:	9b02      	ldr	r3, [sp, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	f040 808b 	bne.w	800a34e <_dtoa_r+0x7f6>
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a23e:	2a00      	cmp	r2, #0
 800a240:	f040 8087 	bne.w	800a352 <_dtoa_r+0x7fa>
 800a244:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a248:	0d12      	lsrs	r2, r2, #20
 800a24a:	0512      	lsls	r2, r2, #20
 800a24c:	2a00      	cmp	r2, #0
 800a24e:	f000 8082 	beq.w	800a356 <_dtoa_r+0x7fe>
 800a252:	9b05      	ldr	r3, [sp, #20]
 800a254:	3301      	adds	r3, #1
 800a256:	9305      	str	r3, [sp, #20]
 800a258:	9b06      	ldr	r3, [sp, #24]
 800a25a:	3301      	adds	r3, #1
 800a25c:	9306      	str	r3, [sp, #24]
 800a25e:	2301      	movs	r3, #1
 800a260:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a264:	2b00      	cmp	r3, #0
 800a266:	f000 81af 	beq.w	800a5c8 <_dtoa_r+0xa70>
 800a26a:	6922      	ldr	r2, [r4, #16]
 800a26c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a270:	6910      	ldr	r0, [r2, #16]
 800a272:	f000 fbb9 	bl	800a9e8 <__hi0bits>
 800a276:	f1c0 0020 	rsb	r0, r0, #32
 800a27a:	9b06      	ldr	r3, [sp, #24]
 800a27c:	4418      	add	r0, r3
 800a27e:	f010 001f 	ands.w	r0, r0, #31
 800a282:	d076      	beq.n	800a372 <_dtoa_r+0x81a>
 800a284:	f1c0 0220 	rsb	r2, r0, #32
 800a288:	2a04      	cmp	r2, #4
 800a28a:	dd69      	ble.n	800a360 <_dtoa_r+0x808>
 800a28c:	9b05      	ldr	r3, [sp, #20]
 800a28e:	f1c0 001c 	rsb	r0, r0, #28
 800a292:	4403      	add	r3, r0
 800a294:	9305      	str	r3, [sp, #20]
 800a296:	9b06      	ldr	r3, [sp, #24]
 800a298:	4406      	add	r6, r0
 800a29a:	4403      	add	r3, r0
 800a29c:	9306      	str	r3, [sp, #24]
 800a29e:	9b05      	ldr	r3, [sp, #20]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	dd05      	ble.n	800a2b0 <_dtoa_r+0x758>
 800a2a4:	9901      	ldr	r1, [sp, #4]
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	4648      	mov	r0, r9
 800a2aa:	f000 fd03 	bl	800acb4 <__lshift>
 800a2ae:	9001      	str	r0, [sp, #4]
 800a2b0:	9b06      	ldr	r3, [sp, #24]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	dd05      	ble.n	800a2c2 <_dtoa_r+0x76a>
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4648      	mov	r0, r9
 800a2bc:	f000 fcfa 	bl	800acb4 <__lshift>
 800a2c0:	4604      	mov	r4, r0
 800a2c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d056      	beq.n	800a376 <_dtoa_r+0x81e>
 800a2c8:	9801      	ldr	r0, [sp, #4]
 800a2ca:	4621      	mov	r1, r4
 800a2cc:	f000 fd5e 	bl	800ad8c <__mcmp>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	da50      	bge.n	800a376 <_dtoa_r+0x81e>
 800a2d4:	f108 33ff 	add.w	r3, r8, #4294967295
 800a2d8:	9304      	str	r3, [sp, #16]
 800a2da:	9901      	ldr	r1, [sp, #4]
 800a2dc:	2300      	movs	r3, #0
 800a2de:	220a      	movs	r2, #10
 800a2e0:	4648      	mov	r0, r9
 800a2e2:	f000 faf1 	bl	800a8c8 <__multadd>
 800a2e6:	9b08      	ldr	r3, [sp, #32]
 800a2e8:	9001      	str	r0, [sp, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 816e 	beq.w	800a5cc <_dtoa_r+0xa74>
 800a2f0:	4629      	mov	r1, r5
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	220a      	movs	r2, #10
 800a2f6:	4648      	mov	r0, r9
 800a2f8:	f000 fae6 	bl	800a8c8 <__multadd>
 800a2fc:	f1bb 0f00 	cmp.w	fp, #0
 800a300:	4605      	mov	r5, r0
 800a302:	dc64      	bgt.n	800a3ce <_dtoa_r+0x876>
 800a304:	9b07      	ldr	r3, [sp, #28]
 800a306:	2b02      	cmp	r3, #2
 800a308:	dc3e      	bgt.n	800a388 <_dtoa_r+0x830>
 800a30a:	e060      	b.n	800a3ce <_dtoa_r+0x876>
 800a30c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a30e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a312:	e73c      	b.n	800a18e <_dtoa_r+0x636>
 800a314:	f10a 34ff 	add.w	r4, sl, #4294967295
 800a318:	42a3      	cmp	r3, r4
 800a31a:	bfbf      	itttt	lt
 800a31c:	1ae2      	sublt	r2, r4, r3
 800a31e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a320:	189b      	addlt	r3, r3, r2
 800a322:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800a324:	bfae      	itee	ge
 800a326:	1b1c      	subge	r4, r3, r4
 800a328:	4623      	movlt	r3, r4
 800a32a:	2400      	movlt	r4, #0
 800a32c:	f1ba 0f00 	cmp.w	sl, #0
 800a330:	bfb5      	itete	lt
 800a332:	9a05      	ldrlt	r2, [sp, #20]
 800a334:	9e05      	ldrge	r6, [sp, #20]
 800a336:	eba2 060a 	sublt.w	r6, r2, sl
 800a33a:	4652      	movge	r2, sl
 800a33c:	bfb8      	it	lt
 800a33e:	2200      	movlt	r2, #0
 800a340:	e727      	b.n	800a192 <_dtoa_r+0x63a>
 800a342:	9e05      	ldr	r6, [sp, #20]
 800a344:	9d08      	ldr	r5, [sp, #32]
 800a346:	461c      	mov	r4, r3
 800a348:	e730      	b.n	800a1ac <_dtoa_r+0x654>
 800a34a:	461a      	mov	r2, r3
 800a34c:	e758      	b.n	800a200 <_dtoa_r+0x6a8>
 800a34e:	2300      	movs	r3, #0
 800a350:	e786      	b.n	800a260 <_dtoa_r+0x708>
 800a352:	9b02      	ldr	r3, [sp, #8]
 800a354:	e784      	b.n	800a260 <_dtoa_r+0x708>
 800a356:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a358:	e783      	b.n	800a262 <_dtoa_r+0x70a>
 800a35a:	2300      	movs	r3, #0
 800a35c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a35e:	e784      	b.n	800a26a <_dtoa_r+0x712>
 800a360:	d09d      	beq.n	800a29e <_dtoa_r+0x746>
 800a362:	9b05      	ldr	r3, [sp, #20]
 800a364:	321c      	adds	r2, #28
 800a366:	4413      	add	r3, r2
 800a368:	9305      	str	r3, [sp, #20]
 800a36a:	9b06      	ldr	r3, [sp, #24]
 800a36c:	4416      	add	r6, r2
 800a36e:	4413      	add	r3, r2
 800a370:	e794      	b.n	800a29c <_dtoa_r+0x744>
 800a372:	4602      	mov	r2, r0
 800a374:	e7f5      	b.n	800a362 <_dtoa_r+0x80a>
 800a376:	f1ba 0f00 	cmp.w	sl, #0
 800a37a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a37e:	46d3      	mov	fp, sl
 800a380:	dc21      	bgt.n	800a3c6 <_dtoa_r+0x86e>
 800a382:	9b07      	ldr	r3, [sp, #28]
 800a384:	2b02      	cmp	r3, #2
 800a386:	dd1e      	ble.n	800a3c6 <_dtoa_r+0x86e>
 800a388:	f1bb 0f00 	cmp.w	fp, #0
 800a38c:	f47f aeb7 	bne.w	800a0fe <_dtoa_r+0x5a6>
 800a390:	4621      	mov	r1, r4
 800a392:	465b      	mov	r3, fp
 800a394:	2205      	movs	r2, #5
 800a396:	4648      	mov	r0, r9
 800a398:	f000 fa96 	bl	800a8c8 <__multadd>
 800a39c:	4601      	mov	r1, r0
 800a39e:	4604      	mov	r4, r0
 800a3a0:	9801      	ldr	r0, [sp, #4]
 800a3a2:	f000 fcf3 	bl	800ad8c <__mcmp>
 800a3a6:	2800      	cmp	r0, #0
 800a3a8:	f77f aea9 	ble.w	800a0fe <_dtoa_r+0x5a6>
 800a3ac:	463e      	mov	r6, r7
 800a3ae:	2331      	movs	r3, #49	@ 0x31
 800a3b0:	f806 3b01 	strb.w	r3, [r6], #1
 800a3b4:	9b04      	ldr	r3, [sp, #16]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	9304      	str	r3, [sp, #16]
 800a3ba:	e6a4      	b.n	800a106 <_dtoa_r+0x5ae>
 800a3bc:	f8cd 8010 	str.w	r8, [sp, #16]
 800a3c0:	4654      	mov	r4, sl
 800a3c2:	4625      	mov	r5, r4
 800a3c4:	e7f2      	b.n	800a3ac <_dtoa_r+0x854>
 800a3c6:	9b08      	ldr	r3, [sp, #32]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	f000 8103 	beq.w	800a5d4 <_dtoa_r+0xa7c>
 800a3ce:	2e00      	cmp	r6, #0
 800a3d0:	dd05      	ble.n	800a3de <_dtoa_r+0x886>
 800a3d2:	4629      	mov	r1, r5
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	4648      	mov	r0, r9
 800a3d8:	f000 fc6c 	bl	800acb4 <__lshift>
 800a3dc:	4605      	mov	r5, r0
 800a3de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d058      	beq.n	800a496 <_dtoa_r+0x93e>
 800a3e4:	6869      	ldr	r1, [r5, #4]
 800a3e6:	4648      	mov	r0, r9
 800a3e8:	f000 fa0c 	bl	800a804 <_Balloc>
 800a3ec:	4606      	mov	r6, r0
 800a3ee:	b928      	cbnz	r0, 800a3fc <_dtoa_r+0x8a4>
 800a3f0:	4b82      	ldr	r3, [pc, #520]	@ (800a5fc <_dtoa_r+0xaa4>)
 800a3f2:	4602      	mov	r2, r0
 800a3f4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a3f8:	f7ff bbc7 	b.w	8009b8a <_dtoa_r+0x32>
 800a3fc:	692a      	ldr	r2, [r5, #16]
 800a3fe:	3202      	adds	r2, #2
 800a400:	0092      	lsls	r2, r2, #2
 800a402:	f105 010c 	add.w	r1, r5, #12
 800a406:	300c      	adds	r0, #12
 800a408:	f001 ff1e 	bl	800c248 <memcpy>
 800a40c:	2201      	movs	r2, #1
 800a40e:	4631      	mov	r1, r6
 800a410:	4648      	mov	r0, r9
 800a412:	f000 fc4f 	bl	800acb4 <__lshift>
 800a416:	1c7b      	adds	r3, r7, #1
 800a418:	9305      	str	r3, [sp, #20]
 800a41a:	eb07 030b 	add.w	r3, r7, fp
 800a41e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a420:	9b02      	ldr	r3, [sp, #8]
 800a422:	f003 0301 	and.w	r3, r3, #1
 800a426:	46a8      	mov	r8, r5
 800a428:	9308      	str	r3, [sp, #32]
 800a42a:	4605      	mov	r5, r0
 800a42c:	9b05      	ldr	r3, [sp, #20]
 800a42e:	9801      	ldr	r0, [sp, #4]
 800a430:	4621      	mov	r1, r4
 800a432:	f103 3bff 	add.w	fp, r3, #4294967295
 800a436:	f7ff fb07 	bl	8009a48 <quorem>
 800a43a:	4641      	mov	r1, r8
 800a43c:	9002      	str	r0, [sp, #8]
 800a43e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a442:	9801      	ldr	r0, [sp, #4]
 800a444:	f000 fca2 	bl	800ad8c <__mcmp>
 800a448:	462a      	mov	r2, r5
 800a44a:	9006      	str	r0, [sp, #24]
 800a44c:	4621      	mov	r1, r4
 800a44e:	4648      	mov	r0, r9
 800a450:	f000 fcb8 	bl	800adc4 <__mdiff>
 800a454:	68c2      	ldr	r2, [r0, #12]
 800a456:	4606      	mov	r6, r0
 800a458:	b9fa      	cbnz	r2, 800a49a <_dtoa_r+0x942>
 800a45a:	4601      	mov	r1, r0
 800a45c:	9801      	ldr	r0, [sp, #4]
 800a45e:	f000 fc95 	bl	800ad8c <__mcmp>
 800a462:	4602      	mov	r2, r0
 800a464:	4631      	mov	r1, r6
 800a466:	4648      	mov	r0, r9
 800a468:	920a      	str	r2, [sp, #40]	@ 0x28
 800a46a:	f000 fa0b 	bl	800a884 <_Bfree>
 800a46e:	9b07      	ldr	r3, [sp, #28]
 800a470:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a472:	9e05      	ldr	r6, [sp, #20]
 800a474:	ea43 0102 	orr.w	r1, r3, r2
 800a478:	9b08      	ldr	r3, [sp, #32]
 800a47a:	4319      	orrs	r1, r3
 800a47c:	d10f      	bne.n	800a49e <_dtoa_r+0x946>
 800a47e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a482:	d028      	beq.n	800a4d6 <_dtoa_r+0x97e>
 800a484:	9b06      	ldr	r3, [sp, #24]
 800a486:	2b00      	cmp	r3, #0
 800a488:	dd02      	ble.n	800a490 <_dtoa_r+0x938>
 800a48a:	9b02      	ldr	r3, [sp, #8]
 800a48c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800a490:	f88b a000 	strb.w	sl, [fp]
 800a494:	e639      	b.n	800a10a <_dtoa_r+0x5b2>
 800a496:	4628      	mov	r0, r5
 800a498:	e7bd      	b.n	800a416 <_dtoa_r+0x8be>
 800a49a:	2201      	movs	r2, #1
 800a49c:	e7e2      	b.n	800a464 <_dtoa_r+0x90c>
 800a49e:	9b06      	ldr	r3, [sp, #24]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	db04      	blt.n	800a4ae <_dtoa_r+0x956>
 800a4a4:	9907      	ldr	r1, [sp, #28]
 800a4a6:	430b      	orrs	r3, r1
 800a4a8:	9908      	ldr	r1, [sp, #32]
 800a4aa:	430b      	orrs	r3, r1
 800a4ac:	d120      	bne.n	800a4f0 <_dtoa_r+0x998>
 800a4ae:	2a00      	cmp	r2, #0
 800a4b0:	ddee      	ble.n	800a490 <_dtoa_r+0x938>
 800a4b2:	9901      	ldr	r1, [sp, #4]
 800a4b4:	2201      	movs	r2, #1
 800a4b6:	4648      	mov	r0, r9
 800a4b8:	f000 fbfc 	bl	800acb4 <__lshift>
 800a4bc:	4621      	mov	r1, r4
 800a4be:	9001      	str	r0, [sp, #4]
 800a4c0:	f000 fc64 	bl	800ad8c <__mcmp>
 800a4c4:	2800      	cmp	r0, #0
 800a4c6:	dc03      	bgt.n	800a4d0 <_dtoa_r+0x978>
 800a4c8:	d1e2      	bne.n	800a490 <_dtoa_r+0x938>
 800a4ca:	f01a 0f01 	tst.w	sl, #1
 800a4ce:	d0df      	beq.n	800a490 <_dtoa_r+0x938>
 800a4d0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a4d4:	d1d9      	bne.n	800a48a <_dtoa_r+0x932>
 800a4d6:	2339      	movs	r3, #57	@ 0x39
 800a4d8:	f88b 3000 	strb.w	r3, [fp]
 800a4dc:	4633      	mov	r3, r6
 800a4de:	461e      	mov	r6, r3
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a4e6:	2a39      	cmp	r2, #57	@ 0x39
 800a4e8:	d053      	beq.n	800a592 <_dtoa_r+0xa3a>
 800a4ea:	3201      	adds	r2, #1
 800a4ec:	701a      	strb	r2, [r3, #0]
 800a4ee:	e60c      	b.n	800a10a <_dtoa_r+0x5b2>
 800a4f0:	2a00      	cmp	r2, #0
 800a4f2:	dd07      	ble.n	800a504 <_dtoa_r+0x9ac>
 800a4f4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800a4f8:	d0ed      	beq.n	800a4d6 <_dtoa_r+0x97e>
 800a4fa:	f10a 0301 	add.w	r3, sl, #1
 800a4fe:	f88b 3000 	strb.w	r3, [fp]
 800a502:	e602      	b.n	800a10a <_dtoa_r+0x5b2>
 800a504:	9b05      	ldr	r3, [sp, #20]
 800a506:	9a05      	ldr	r2, [sp, #20]
 800a508:	f803 ac01 	strb.w	sl, [r3, #-1]
 800a50c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a50e:	4293      	cmp	r3, r2
 800a510:	d029      	beq.n	800a566 <_dtoa_r+0xa0e>
 800a512:	9901      	ldr	r1, [sp, #4]
 800a514:	2300      	movs	r3, #0
 800a516:	220a      	movs	r2, #10
 800a518:	4648      	mov	r0, r9
 800a51a:	f000 f9d5 	bl	800a8c8 <__multadd>
 800a51e:	45a8      	cmp	r8, r5
 800a520:	9001      	str	r0, [sp, #4]
 800a522:	f04f 0300 	mov.w	r3, #0
 800a526:	f04f 020a 	mov.w	r2, #10
 800a52a:	4641      	mov	r1, r8
 800a52c:	4648      	mov	r0, r9
 800a52e:	d107      	bne.n	800a540 <_dtoa_r+0x9e8>
 800a530:	f000 f9ca 	bl	800a8c8 <__multadd>
 800a534:	4680      	mov	r8, r0
 800a536:	4605      	mov	r5, r0
 800a538:	9b05      	ldr	r3, [sp, #20]
 800a53a:	3301      	adds	r3, #1
 800a53c:	9305      	str	r3, [sp, #20]
 800a53e:	e775      	b.n	800a42c <_dtoa_r+0x8d4>
 800a540:	f000 f9c2 	bl	800a8c8 <__multadd>
 800a544:	4629      	mov	r1, r5
 800a546:	4680      	mov	r8, r0
 800a548:	2300      	movs	r3, #0
 800a54a:	220a      	movs	r2, #10
 800a54c:	4648      	mov	r0, r9
 800a54e:	f000 f9bb 	bl	800a8c8 <__multadd>
 800a552:	4605      	mov	r5, r0
 800a554:	e7f0      	b.n	800a538 <_dtoa_r+0x9e0>
 800a556:	f1bb 0f00 	cmp.w	fp, #0
 800a55a:	bfcc      	ite	gt
 800a55c:	465e      	movgt	r6, fp
 800a55e:	2601      	movle	r6, #1
 800a560:	443e      	add	r6, r7
 800a562:	f04f 0800 	mov.w	r8, #0
 800a566:	9901      	ldr	r1, [sp, #4]
 800a568:	2201      	movs	r2, #1
 800a56a:	4648      	mov	r0, r9
 800a56c:	f000 fba2 	bl	800acb4 <__lshift>
 800a570:	4621      	mov	r1, r4
 800a572:	9001      	str	r0, [sp, #4]
 800a574:	f000 fc0a 	bl	800ad8c <__mcmp>
 800a578:	2800      	cmp	r0, #0
 800a57a:	dcaf      	bgt.n	800a4dc <_dtoa_r+0x984>
 800a57c:	d102      	bne.n	800a584 <_dtoa_r+0xa2c>
 800a57e:	f01a 0f01 	tst.w	sl, #1
 800a582:	d1ab      	bne.n	800a4dc <_dtoa_r+0x984>
 800a584:	4633      	mov	r3, r6
 800a586:	461e      	mov	r6, r3
 800a588:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a58c:	2a30      	cmp	r2, #48	@ 0x30
 800a58e:	d0fa      	beq.n	800a586 <_dtoa_r+0xa2e>
 800a590:	e5bb      	b.n	800a10a <_dtoa_r+0x5b2>
 800a592:	429f      	cmp	r7, r3
 800a594:	d1a3      	bne.n	800a4de <_dtoa_r+0x986>
 800a596:	9b04      	ldr	r3, [sp, #16]
 800a598:	3301      	adds	r3, #1
 800a59a:	9304      	str	r3, [sp, #16]
 800a59c:	2331      	movs	r3, #49	@ 0x31
 800a59e:	703b      	strb	r3, [r7, #0]
 800a5a0:	e5b3      	b.n	800a10a <_dtoa_r+0x5b2>
 800a5a2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a5a4:	4f16      	ldr	r7, [pc, #88]	@ (800a600 <_dtoa_r+0xaa8>)
 800a5a6:	b11b      	cbz	r3, 800a5b0 <_dtoa_r+0xa58>
 800a5a8:	f107 0308 	add.w	r3, r7, #8
 800a5ac:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a5ae:	6013      	str	r3, [r2, #0]
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	b011      	add	sp, #68	@ 0x44
 800a5b4:	ecbd 8b02 	vpop	{d8}
 800a5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5bc:	9b07      	ldr	r3, [sp, #28]
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	f77f ae36 	ble.w	800a230 <_dtoa_r+0x6d8>
 800a5c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a5c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a5c8:	2001      	movs	r0, #1
 800a5ca:	e656      	b.n	800a27a <_dtoa_r+0x722>
 800a5cc:	f1bb 0f00 	cmp.w	fp, #0
 800a5d0:	f77f aed7 	ble.w	800a382 <_dtoa_r+0x82a>
 800a5d4:	463e      	mov	r6, r7
 800a5d6:	9801      	ldr	r0, [sp, #4]
 800a5d8:	4621      	mov	r1, r4
 800a5da:	f7ff fa35 	bl	8009a48 <quorem>
 800a5de:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a5e2:	f806 ab01 	strb.w	sl, [r6], #1
 800a5e6:	1bf2      	subs	r2, r6, r7
 800a5e8:	4593      	cmp	fp, r2
 800a5ea:	ddb4      	ble.n	800a556 <_dtoa_r+0x9fe>
 800a5ec:	9901      	ldr	r1, [sp, #4]
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	220a      	movs	r2, #10
 800a5f2:	4648      	mov	r0, r9
 800a5f4:	f000 f968 	bl	800a8c8 <__multadd>
 800a5f8:	9001      	str	r0, [sp, #4]
 800a5fa:	e7ec      	b.n	800a5d6 <_dtoa_r+0xa7e>
 800a5fc:	0800d32d 	.word	0x0800d32d
 800a600:	0800d2b1 	.word	0x0800d2b1

0800a604 <_free_r>:
 800a604:	b538      	push	{r3, r4, r5, lr}
 800a606:	4605      	mov	r5, r0
 800a608:	2900      	cmp	r1, #0
 800a60a:	d041      	beq.n	800a690 <_free_r+0x8c>
 800a60c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a610:	1f0c      	subs	r4, r1, #4
 800a612:	2b00      	cmp	r3, #0
 800a614:	bfb8      	it	lt
 800a616:	18e4      	addlt	r4, r4, r3
 800a618:	f000 f8e8 	bl	800a7ec <__malloc_lock>
 800a61c:	4a1d      	ldr	r2, [pc, #116]	@ (800a694 <_free_r+0x90>)
 800a61e:	6813      	ldr	r3, [r2, #0]
 800a620:	b933      	cbnz	r3, 800a630 <_free_r+0x2c>
 800a622:	6063      	str	r3, [r4, #4]
 800a624:	6014      	str	r4, [r2, #0]
 800a626:	4628      	mov	r0, r5
 800a628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a62c:	f000 b8e4 	b.w	800a7f8 <__malloc_unlock>
 800a630:	42a3      	cmp	r3, r4
 800a632:	d908      	bls.n	800a646 <_free_r+0x42>
 800a634:	6820      	ldr	r0, [r4, #0]
 800a636:	1821      	adds	r1, r4, r0
 800a638:	428b      	cmp	r3, r1
 800a63a:	bf01      	itttt	eq
 800a63c:	6819      	ldreq	r1, [r3, #0]
 800a63e:	685b      	ldreq	r3, [r3, #4]
 800a640:	1809      	addeq	r1, r1, r0
 800a642:	6021      	streq	r1, [r4, #0]
 800a644:	e7ed      	b.n	800a622 <_free_r+0x1e>
 800a646:	461a      	mov	r2, r3
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	b10b      	cbz	r3, 800a650 <_free_r+0x4c>
 800a64c:	42a3      	cmp	r3, r4
 800a64e:	d9fa      	bls.n	800a646 <_free_r+0x42>
 800a650:	6811      	ldr	r1, [r2, #0]
 800a652:	1850      	adds	r0, r2, r1
 800a654:	42a0      	cmp	r0, r4
 800a656:	d10b      	bne.n	800a670 <_free_r+0x6c>
 800a658:	6820      	ldr	r0, [r4, #0]
 800a65a:	4401      	add	r1, r0
 800a65c:	1850      	adds	r0, r2, r1
 800a65e:	4283      	cmp	r3, r0
 800a660:	6011      	str	r1, [r2, #0]
 800a662:	d1e0      	bne.n	800a626 <_free_r+0x22>
 800a664:	6818      	ldr	r0, [r3, #0]
 800a666:	685b      	ldr	r3, [r3, #4]
 800a668:	6053      	str	r3, [r2, #4]
 800a66a:	4408      	add	r0, r1
 800a66c:	6010      	str	r0, [r2, #0]
 800a66e:	e7da      	b.n	800a626 <_free_r+0x22>
 800a670:	d902      	bls.n	800a678 <_free_r+0x74>
 800a672:	230c      	movs	r3, #12
 800a674:	602b      	str	r3, [r5, #0]
 800a676:	e7d6      	b.n	800a626 <_free_r+0x22>
 800a678:	6820      	ldr	r0, [r4, #0]
 800a67a:	1821      	adds	r1, r4, r0
 800a67c:	428b      	cmp	r3, r1
 800a67e:	bf04      	itt	eq
 800a680:	6819      	ldreq	r1, [r3, #0]
 800a682:	685b      	ldreq	r3, [r3, #4]
 800a684:	6063      	str	r3, [r4, #4]
 800a686:	bf04      	itt	eq
 800a688:	1809      	addeq	r1, r1, r0
 800a68a:	6021      	streq	r1, [r4, #0]
 800a68c:	6054      	str	r4, [r2, #4]
 800a68e:	e7ca      	b.n	800a626 <_free_r+0x22>
 800a690:	bd38      	pop	{r3, r4, r5, pc}
 800a692:	bf00      	nop
 800a694:	20031d88 	.word	0x20031d88

0800a698 <malloc>:
 800a698:	4b02      	ldr	r3, [pc, #8]	@ (800a6a4 <malloc+0xc>)
 800a69a:	4601      	mov	r1, r0
 800a69c:	6818      	ldr	r0, [r3, #0]
 800a69e:	f000 b825 	b.w	800a6ec <_malloc_r>
 800a6a2:	bf00      	nop
 800a6a4:	2000004c 	.word	0x2000004c

0800a6a8 <sbrk_aligned>:
 800a6a8:	b570      	push	{r4, r5, r6, lr}
 800a6aa:	4e0f      	ldr	r6, [pc, #60]	@ (800a6e8 <sbrk_aligned+0x40>)
 800a6ac:	460c      	mov	r4, r1
 800a6ae:	6831      	ldr	r1, [r6, #0]
 800a6b0:	4605      	mov	r5, r0
 800a6b2:	b911      	cbnz	r1, 800a6ba <sbrk_aligned+0x12>
 800a6b4:	f001 fdb8 	bl	800c228 <_sbrk_r>
 800a6b8:	6030      	str	r0, [r6, #0]
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f001 fdb3 	bl	800c228 <_sbrk_r>
 800a6c2:	1c43      	adds	r3, r0, #1
 800a6c4:	d103      	bne.n	800a6ce <sbrk_aligned+0x26>
 800a6c6:	f04f 34ff 	mov.w	r4, #4294967295
 800a6ca:	4620      	mov	r0, r4
 800a6cc:	bd70      	pop	{r4, r5, r6, pc}
 800a6ce:	1cc4      	adds	r4, r0, #3
 800a6d0:	f024 0403 	bic.w	r4, r4, #3
 800a6d4:	42a0      	cmp	r0, r4
 800a6d6:	d0f8      	beq.n	800a6ca <sbrk_aligned+0x22>
 800a6d8:	1a21      	subs	r1, r4, r0
 800a6da:	4628      	mov	r0, r5
 800a6dc:	f001 fda4 	bl	800c228 <_sbrk_r>
 800a6e0:	3001      	adds	r0, #1
 800a6e2:	d1f2      	bne.n	800a6ca <sbrk_aligned+0x22>
 800a6e4:	e7ef      	b.n	800a6c6 <sbrk_aligned+0x1e>
 800a6e6:	bf00      	nop
 800a6e8:	20031d84 	.word	0x20031d84

0800a6ec <_malloc_r>:
 800a6ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f0:	1ccd      	adds	r5, r1, #3
 800a6f2:	f025 0503 	bic.w	r5, r5, #3
 800a6f6:	3508      	adds	r5, #8
 800a6f8:	2d0c      	cmp	r5, #12
 800a6fa:	bf38      	it	cc
 800a6fc:	250c      	movcc	r5, #12
 800a6fe:	2d00      	cmp	r5, #0
 800a700:	4606      	mov	r6, r0
 800a702:	db01      	blt.n	800a708 <_malloc_r+0x1c>
 800a704:	42a9      	cmp	r1, r5
 800a706:	d904      	bls.n	800a712 <_malloc_r+0x26>
 800a708:	230c      	movs	r3, #12
 800a70a:	6033      	str	r3, [r6, #0]
 800a70c:	2000      	movs	r0, #0
 800a70e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a712:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a7e8 <_malloc_r+0xfc>
 800a716:	f000 f869 	bl	800a7ec <__malloc_lock>
 800a71a:	f8d8 3000 	ldr.w	r3, [r8]
 800a71e:	461c      	mov	r4, r3
 800a720:	bb44      	cbnz	r4, 800a774 <_malloc_r+0x88>
 800a722:	4629      	mov	r1, r5
 800a724:	4630      	mov	r0, r6
 800a726:	f7ff ffbf 	bl	800a6a8 <sbrk_aligned>
 800a72a:	1c43      	adds	r3, r0, #1
 800a72c:	4604      	mov	r4, r0
 800a72e:	d158      	bne.n	800a7e2 <_malloc_r+0xf6>
 800a730:	f8d8 4000 	ldr.w	r4, [r8]
 800a734:	4627      	mov	r7, r4
 800a736:	2f00      	cmp	r7, #0
 800a738:	d143      	bne.n	800a7c2 <_malloc_r+0xd6>
 800a73a:	2c00      	cmp	r4, #0
 800a73c:	d04b      	beq.n	800a7d6 <_malloc_r+0xea>
 800a73e:	6823      	ldr	r3, [r4, #0]
 800a740:	4639      	mov	r1, r7
 800a742:	4630      	mov	r0, r6
 800a744:	eb04 0903 	add.w	r9, r4, r3
 800a748:	f001 fd6e 	bl	800c228 <_sbrk_r>
 800a74c:	4581      	cmp	r9, r0
 800a74e:	d142      	bne.n	800a7d6 <_malloc_r+0xea>
 800a750:	6821      	ldr	r1, [r4, #0]
 800a752:	1a6d      	subs	r5, r5, r1
 800a754:	4629      	mov	r1, r5
 800a756:	4630      	mov	r0, r6
 800a758:	f7ff ffa6 	bl	800a6a8 <sbrk_aligned>
 800a75c:	3001      	adds	r0, #1
 800a75e:	d03a      	beq.n	800a7d6 <_malloc_r+0xea>
 800a760:	6823      	ldr	r3, [r4, #0]
 800a762:	442b      	add	r3, r5
 800a764:	6023      	str	r3, [r4, #0]
 800a766:	f8d8 3000 	ldr.w	r3, [r8]
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	bb62      	cbnz	r2, 800a7c8 <_malloc_r+0xdc>
 800a76e:	f8c8 7000 	str.w	r7, [r8]
 800a772:	e00f      	b.n	800a794 <_malloc_r+0xa8>
 800a774:	6822      	ldr	r2, [r4, #0]
 800a776:	1b52      	subs	r2, r2, r5
 800a778:	d420      	bmi.n	800a7bc <_malloc_r+0xd0>
 800a77a:	2a0b      	cmp	r2, #11
 800a77c:	d917      	bls.n	800a7ae <_malloc_r+0xc2>
 800a77e:	1961      	adds	r1, r4, r5
 800a780:	42a3      	cmp	r3, r4
 800a782:	6025      	str	r5, [r4, #0]
 800a784:	bf18      	it	ne
 800a786:	6059      	strne	r1, [r3, #4]
 800a788:	6863      	ldr	r3, [r4, #4]
 800a78a:	bf08      	it	eq
 800a78c:	f8c8 1000 	streq.w	r1, [r8]
 800a790:	5162      	str	r2, [r4, r5]
 800a792:	604b      	str	r3, [r1, #4]
 800a794:	4630      	mov	r0, r6
 800a796:	f000 f82f 	bl	800a7f8 <__malloc_unlock>
 800a79a:	f104 000b 	add.w	r0, r4, #11
 800a79e:	1d23      	adds	r3, r4, #4
 800a7a0:	f020 0007 	bic.w	r0, r0, #7
 800a7a4:	1ac2      	subs	r2, r0, r3
 800a7a6:	bf1c      	itt	ne
 800a7a8:	1a1b      	subne	r3, r3, r0
 800a7aa:	50a3      	strne	r3, [r4, r2]
 800a7ac:	e7af      	b.n	800a70e <_malloc_r+0x22>
 800a7ae:	6862      	ldr	r2, [r4, #4]
 800a7b0:	42a3      	cmp	r3, r4
 800a7b2:	bf0c      	ite	eq
 800a7b4:	f8c8 2000 	streq.w	r2, [r8]
 800a7b8:	605a      	strne	r2, [r3, #4]
 800a7ba:	e7eb      	b.n	800a794 <_malloc_r+0xa8>
 800a7bc:	4623      	mov	r3, r4
 800a7be:	6864      	ldr	r4, [r4, #4]
 800a7c0:	e7ae      	b.n	800a720 <_malloc_r+0x34>
 800a7c2:	463c      	mov	r4, r7
 800a7c4:	687f      	ldr	r7, [r7, #4]
 800a7c6:	e7b6      	b.n	800a736 <_malloc_r+0x4a>
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	42a3      	cmp	r3, r4
 800a7ce:	d1fb      	bne.n	800a7c8 <_malloc_r+0xdc>
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	6053      	str	r3, [r2, #4]
 800a7d4:	e7de      	b.n	800a794 <_malloc_r+0xa8>
 800a7d6:	230c      	movs	r3, #12
 800a7d8:	6033      	str	r3, [r6, #0]
 800a7da:	4630      	mov	r0, r6
 800a7dc:	f000 f80c 	bl	800a7f8 <__malloc_unlock>
 800a7e0:	e794      	b.n	800a70c <_malloc_r+0x20>
 800a7e2:	6005      	str	r5, [r0, #0]
 800a7e4:	e7d6      	b.n	800a794 <_malloc_r+0xa8>
 800a7e6:	bf00      	nop
 800a7e8:	20031d88 	.word	0x20031d88

0800a7ec <__malloc_lock>:
 800a7ec:	4801      	ldr	r0, [pc, #4]	@ (800a7f4 <__malloc_lock+0x8>)
 800a7ee:	f7ff b922 	b.w	8009a36 <__retarget_lock_acquire_recursive>
 800a7f2:	bf00      	nop
 800a7f4:	20031d80 	.word	0x20031d80

0800a7f8 <__malloc_unlock>:
 800a7f8:	4801      	ldr	r0, [pc, #4]	@ (800a800 <__malloc_unlock+0x8>)
 800a7fa:	f7ff b91d 	b.w	8009a38 <__retarget_lock_release_recursive>
 800a7fe:	bf00      	nop
 800a800:	20031d80 	.word	0x20031d80

0800a804 <_Balloc>:
 800a804:	b570      	push	{r4, r5, r6, lr}
 800a806:	69c6      	ldr	r6, [r0, #28]
 800a808:	4604      	mov	r4, r0
 800a80a:	460d      	mov	r5, r1
 800a80c:	b976      	cbnz	r6, 800a82c <_Balloc+0x28>
 800a80e:	2010      	movs	r0, #16
 800a810:	f7ff ff42 	bl	800a698 <malloc>
 800a814:	4602      	mov	r2, r0
 800a816:	61e0      	str	r0, [r4, #28]
 800a818:	b920      	cbnz	r0, 800a824 <_Balloc+0x20>
 800a81a:	4b18      	ldr	r3, [pc, #96]	@ (800a87c <_Balloc+0x78>)
 800a81c:	4818      	ldr	r0, [pc, #96]	@ (800a880 <_Balloc+0x7c>)
 800a81e:	216b      	movs	r1, #107	@ 0x6b
 800a820:	f001 fd2a 	bl	800c278 <__assert_func>
 800a824:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a828:	6006      	str	r6, [r0, #0]
 800a82a:	60c6      	str	r6, [r0, #12]
 800a82c:	69e6      	ldr	r6, [r4, #28]
 800a82e:	68f3      	ldr	r3, [r6, #12]
 800a830:	b183      	cbz	r3, 800a854 <_Balloc+0x50>
 800a832:	69e3      	ldr	r3, [r4, #28]
 800a834:	68db      	ldr	r3, [r3, #12]
 800a836:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a83a:	b9b8      	cbnz	r0, 800a86c <_Balloc+0x68>
 800a83c:	2101      	movs	r1, #1
 800a83e:	fa01 f605 	lsl.w	r6, r1, r5
 800a842:	1d72      	adds	r2, r6, #5
 800a844:	0092      	lsls	r2, r2, #2
 800a846:	4620      	mov	r0, r4
 800a848:	f001 fd34 	bl	800c2b4 <_calloc_r>
 800a84c:	b160      	cbz	r0, 800a868 <_Balloc+0x64>
 800a84e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a852:	e00e      	b.n	800a872 <_Balloc+0x6e>
 800a854:	2221      	movs	r2, #33	@ 0x21
 800a856:	2104      	movs	r1, #4
 800a858:	4620      	mov	r0, r4
 800a85a:	f001 fd2b 	bl	800c2b4 <_calloc_r>
 800a85e:	69e3      	ldr	r3, [r4, #28]
 800a860:	60f0      	str	r0, [r6, #12]
 800a862:	68db      	ldr	r3, [r3, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d1e4      	bne.n	800a832 <_Balloc+0x2e>
 800a868:	2000      	movs	r0, #0
 800a86a:	bd70      	pop	{r4, r5, r6, pc}
 800a86c:	6802      	ldr	r2, [r0, #0]
 800a86e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a872:	2300      	movs	r3, #0
 800a874:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a878:	e7f7      	b.n	800a86a <_Balloc+0x66>
 800a87a:	bf00      	nop
 800a87c:	0800d2be 	.word	0x0800d2be
 800a880:	0800d33e 	.word	0x0800d33e

0800a884 <_Bfree>:
 800a884:	b570      	push	{r4, r5, r6, lr}
 800a886:	69c6      	ldr	r6, [r0, #28]
 800a888:	4605      	mov	r5, r0
 800a88a:	460c      	mov	r4, r1
 800a88c:	b976      	cbnz	r6, 800a8ac <_Bfree+0x28>
 800a88e:	2010      	movs	r0, #16
 800a890:	f7ff ff02 	bl	800a698 <malloc>
 800a894:	4602      	mov	r2, r0
 800a896:	61e8      	str	r0, [r5, #28]
 800a898:	b920      	cbnz	r0, 800a8a4 <_Bfree+0x20>
 800a89a:	4b09      	ldr	r3, [pc, #36]	@ (800a8c0 <_Bfree+0x3c>)
 800a89c:	4809      	ldr	r0, [pc, #36]	@ (800a8c4 <_Bfree+0x40>)
 800a89e:	218f      	movs	r1, #143	@ 0x8f
 800a8a0:	f001 fcea 	bl	800c278 <__assert_func>
 800a8a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8a8:	6006      	str	r6, [r0, #0]
 800a8aa:	60c6      	str	r6, [r0, #12]
 800a8ac:	b13c      	cbz	r4, 800a8be <_Bfree+0x3a>
 800a8ae:	69eb      	ldr	r3, [r5, #28]
 800a8b0:	6862      	ldr	r2, [r4, #4]
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8b8:	6021      	str	r1, [r4, #0]
 800a8ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	0800d2be 	.word	0x0800d2be
 800a8c4:	0800d33e 	.word	0x0800d33e

0800a8c8 <__multadd>:
 800a8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8cc:	690d      	ldr	r5, [r1, #16]
 800a8ce:	4607      	mov	r7, r0
 800a8d0:	460c      	mov	r4, r1
 800a8d2:	461e      	mov	r6, r3
 800a8d4:	f101 0c14 	add.w	ip, r1, #20
 800a8d8:	2000      	movs	r0, #0
 800a8da:	f8dc 3000 	ldr.w	r3, [ip]
 800a8de:	b299      	uxth	r1, r3
 800a8e0:	fb02 6101 	mla	r1, r2, r1, r6
 800a8e4:	0c1e      	lsrs	r6, r3, #16
 800a8e6:	0c0b      	lsrs	r3, r1, #16
 800a8e8:	fb02 3306 	mla	r3, r2, r6, r3
 800a8ec:	b289      	uxth	r1, r1
 800a8ee:	3001      	adds	r0, #1
 800a8f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8f4:	4285      	cmp	r5, r0
 800a8f6:	f84c 1b04 	str.w	r1, [ip], #4
 800a8fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8fe:	dcec      	bgt.n	800a8da <__multadd+0x12>
 800a900:	b30e      	cbz	r6, 800a946 <__multadd+0x7e>
 800a902:	68a3      	ldr	r3, [r4, #8]
 800a904:	42ab      	cmp	r3, r5
 800a906:	dc19      	bgt.n	800a93c <__multadd+0x74>
 800a908:	6861      	ldr	r1, [r4, #4]
 800a90a:	4638      	mov	r0, r7
 800a90c:	3101      	adds	r1, #1
 800a90e:	f7ff ff79 	bl	800a804 <_Balloc>
 800a912:	4680      	mov	r8, r0
 800a914:	b928      	cbnz	r0, 800a922 <__multadd+0x5a>
 800a916:	4602      	mov	r2, r0
 800a918:	4b0c      	ldr	r3, [pc, #48]	@ (800a94c <__multadd+0x84>)
 800a91a:	480d      	ldr	r0, [pc, #52]	@ (800a950 <__multadd+0x88>)
 800a91c:	21ba      	movs	r1, #186	@ 0xba
 800a91e:	f001 fcab 	bl	800c278 <__assert_func>
 800a922:	6922      	ldr	r2, [r4, #16]
 800a924:	3202      	adds	r2, #2
 800a926:	f104 010c 	add.w	r1, r4, #12
 800a92a:	0092      	lsls	r2, r2, #2
 800a92c:	300c      	adds	r0, #12
 800a92e:	f001 fc8b 	bl	800c248 <memcpy>
 800a932:	4621      	mov	r1, r4
 800a934:	4638      	mov	r0, r7
 800a936:	f7ff ffa5 	bl	800a884 <_Bfree>
 800a93a:	4644      	mov	r4, r8
 800a93c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a940:	3501      	adds	r5, #1
 800a942:	615e      	str	r6, [r3, #20]
 800a944:	6125      	str	r5, [r4, #16]
 800a946:	4620      	mov	r0, r4
 800a948:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a94c:	0800d32d 	.word	0x0800d32d
 800a950:	0800d33e 	.word	0x0800d33e

0800a954 <__s2b>:
 800a954:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a958:	460c      	mov	r4, r1
 800a95a:	4615      	mov	r5, r2
 800a95c:	461f      	mov	r7, r3
 800a95e:	2209      	movs	r2, #9
 800a960:	3308      	adds	r3, #8
 800a962:	4606      	mov	r6, r0
 800a964:	fb93 f3f2 	sdiv	r3, r3, r2
 800a968:	2100      	movs	r1, #0
 800a96a:	2201      	movs	r2, #1
 800a96c:	429a      	cmp	r2, r3
 800a96e:	db09      	blt.n	800a984 <__s2b+0x30>
 800a970:	4630      	mov	r0, r6
 800a972:	f7ff ff47 	bl	800a804 <_Balloc>
 800a976:	b940      	cbnz	r0, 800a98a <__s2b+0x36>
 800a978:	4602      	mov	r2, r0
 800a97a:	4b19      	ldr	r3, [pc, #100]	@ (800a9e0 <__s2b+0x8c>)
 800a97c:	4819      	ldr	r0, [pc, #100]	@ (800a9e4 <__s2b+0x90>)
 800a97e:	21d3      	movs	r1, #211	@ 0xd3
 800a980:	f001 fc7a 	bl	800c278 <__assert_func>
 800a984:	0052      	lsls	r2, r2, #1
 800a986:	3101      	adds	r1, #1
 800a988:	e7f0      	b.n	800a96c <__s2b+0x18>
 800a98a:	9b08      	ldr	r3, [sp, #32]
 800a98c:	6143      	str	r3, [r0, #20]
 800a98e:	2d09      	cmp	r5, #9
 800a990:	f04f 0301 	mov.w	r3, #1
 800a994:	6103      	str	r3, [r0, #16]
 800a996:	dd16      	ble.n	800a9c6 <__s2b+0x72>
 800a998:	f104 0909 	add.w	r9, r4, #9
 800a99c:	46c8      	mov	r8, r9
 800a99e:	442c      	add	r4, r5
 800a9a0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a9a4:	4601      	mov	r1, r0
 800a9a6:	3b30      	subs	r3, #48	@ 0x30
 800a9a8:	220a      	movs	r2, #10
 800a9aa:	4630      	mov	r0, r6
 800a9ac:	f7ff ff8c 	bl	800a8c8 <__multadd>
 800a9b0:	45a0      	cmp	r8, r4
 800a9b2:	d1f5      	bne.n	800a9a0 <__s2b+0x4c>
 800a9b4:	f1a5 0408 	sub.w	r4, r5, #8
 800a9b8:	444c      	add	r4, r9
 800a9ba:	1b2d      	subs	r5, r5, r4
 800a9bc:	1963      	adds	r3, r4, r5
 800a9be:	42bb      	cmp	r3, r7
 800a9c0:	db04      	blt.n	800a9cc <__s2b+0x78>
 800a9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9c6:	340a      	adds	r4, #10
 800a9c8:	2509      	movs	r5, #9
 800a9ca:	e7f6      	b.n	800a9ba <__s2b+0x66>
 800a9cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a9d0:	4601      	mov	r1, r0
 800a9d2:	3b30      	subs	r3, #48	@ 0x30
 800a9d4:	220a      	movs	r2, #10
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	f7ff ff76 	bl	800a8c8 <__multadd>
 800a9dc:	e7ee      	b.n	800a9bc <__s2b+0x68>
 800a9de:	bf00      	nop
 800a9e0:	0800d32d 	.word	0x0800d32d
 800a9e4:	0800d33e 	.word	0x0800d33e

0800a9e8 <__hi0bits>:
 800a9e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	bf36      	itet	cc
 800a9f0:	0403      	lslcc	r3, r0, #16
 800a9f2:	2000      	movcs	r0, #0
 800a9f4:	2010      	movcc	r0, #16
 800a9f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a9fa:	bf3c      	itt	cc
 800a9fc:	021b      	lslcc	r3, r3, #8
 800a9fe:	3008      	addcc	r0, #8
 800aa00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aa04:	bf3c      	itt	cc
 800aa06:	011b      	lslcc	r3, r3, #4
 800aa08:	3004      	addcc	r0, #4
 800aa0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa0e:	bf3c      	itt	cc
 800aa10:	009b      	lslcc	r3, r3, #2
 800aa12:	3002      	addcc	r0, #2
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	db05      	blt.n	800aa24 <__hi0bits+0x3c>
 800aa18:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800aa1c:	f100 0001 	add.w	r0, r0, #1
 800aa20:	bf08      	it	eq
 800aa22:	2020      	moveq	r0, #32
 800aa24:	4770      	bx	lr

0800aa26 <__lo0bits>:
 800aa26:	6803      	ldr	r3, [r0, #0]
 800aa28:	4602      	mov	r2, r0
 800aa2a:	f013 0007 	ands.w	r0, r3, #7
 800aa2e:	d00b      	beq.n	800aa48 <__lo0bits+0x22>
 800aa30:	07d9      	lsls	r1, r3, #31
 800aa32:	d421      	bmi.n	800aa78 <__lo0bits+0x52>
 800aa34:	0798      	lsls	r0, r3, #30
 800aa36:	bf49      	itett	mi
 800aa38:	085b      	lsrmi	r3, r3, #1
 800aa3a:	089b      	lsrpl	r3, r3, #2
 800aa3c:	2001      	movmi	r0, #1
 800aa3e:	6013      	strmi	r3, [r2, #0]
 800aa40:	bf5c      	itt	pl
 800aa42:	6013      	strpl	r3, [r2, #0]
 800aa44:	2002      	movpl	r0, #2
 800aa46:	4770      	bx	lr
 800aa48:	b299      	uxth	r1, r3
 800aa4a:	b909      	cbnz	r1, 800aa50 <__lo0bits+0x2a>
 800aa4c:	0c1b      	lsrs	r3, r3, #16
 800aa4e:	2010      	movs	r0, #16
 800aa50:	b2d9      	uxtb	r1, r3
 800aa52:	b909      	cbnz	r1, 800aa58 <__lo0bits+0x32>
 800aa54:	3008      	adds	r0, #8
 800aa56:	0a1b      	lsrs	r3, r3, #8
 800aa58:	0719      	lsls	r1, r3, #28
 800aa5a:	bf04      	itt	eq
 800aa5c:	091b      	lsreq	r3, r3, #4
 800aa5e:	3004      	addeq	r0, #4
 800aa60:	0799      	lsls	r1, r3, #30
 800aa62:	bf04      	itt	eq
 800aa64:	089b      	lsreq	r3, r3, #2
 800aa66:	3002      	addeq	r0, #2
 800aa68:	07d9      	lsls	r1, r3, #31
 800aa6a:	d403      	bmi.n	800aa74 <__lo0bits+0x4e>
 800aa6c:	085b      	lsrs	r3, r3, #1
 800aa6e:	f100 0001 	add.w	r0, r0, #1
 800aa72:	d003      	beq.n	800aa7c <__lo0bits+0x56>
 800aa74:	6013      	str	r3, [r2, #0]
 800aa76:	4770      	bx	lr
 800aa78:	2000      	movs	r0, #0
 800aa7a:	4770      	bx	lr
 800aa7c:	2020      	movs	r0, #32
 800aa7e:	4770      	bx	lr

0800aa80 <__i2b>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	460c      	mov	r4, r1
 800aa84:	2101      	movs	r1, #1
 800aa86:	f7ff febd 	bl	800a804 <_Balloc>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	b928      	cbnz	r0, 800aa9a <__i2b+0x1a>
 800aa8e:	4b05      	ldr	r3, [pc, #20]	@ (800aaa4 <__i2b+0x24>)
 800aa90:	4805      	ldr	r0, [pc, #20]	@ (800aaa8 <__i2b+0x28>)
 800aa92:	f240 1145 	movw	r1, #325	@ 0x145
 800aa96:	f001 fbef 	bl	800c278 <__assert_func>
 800aa9a:	2301      	movs	r3, #1
 800aa9c:	6144      	str	r4, [r0, #20]
 800aa9e:	6103      	str	r3, [r0, #16]
 800aaa0:	bd10      	pop	{r4, pc}
 800aaa2:	bf00      	nop
 800aaa4:	0800d32d 	.word	0x0800d32d
 800aaa8:	0800d33e 	.word	0x0800d33e

0800aaac <__multiply>:
 800aaac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab0:	4614      	mov	r4, r2
 800aab2:	690a      	ldr	r2, [r1, #16]
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	429a      	cmp	r2, r3
 800aab8:	bfa8      	it	ge
 800aaba:	4623      	movge	r3, r4
 800aabc:	460f      	mov	r7, r1
 800aabe:	bfa4      	itt	ge
 800aac0:	460c      	movge	r4, r1
 800aac2:	461f      	movge	r7, r3
 800aac4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aac8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aacc:	68a3      	ldr	r3, [r4, #8]
 800aace:	6861      	ldr	r1, [r4, #4]
 800aad0:	eb0a 0609 	add.w	r6, sl, r9
 800aad4:	42b3      	cmp	r3, r6
 800aad6:	b085      	sub	sp, #20
 800aad8:	bfb8      	it	lt
 800aada:	3101      	addlt	r1, #1
 800aadc:	f7ff fe92 	bl	800a804 <_Balloc>
 800aae0:	b930      	cbnz	r0, 800aaf0 <__multiply+0x44>
 800aae2:	4602      	mov	r2, r0
 800aae4:	4b44      	ldr	r3, [pc, #272]	@ (800abf8 <__multiply+0x14c>)
 800aae6:	4845      	ldr	r0, [pc, #276]	@ (800abfc <__multiply+0x150>)
 800aae8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aaec:	f001 fbc4 	bl	800c278 <__assert_func>
 800aaf0:	f100 0514 	add.w	r5, r0, #20
 800aaf4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aaf8:	462b      	mov	r3, r5
 800aafa:	2200      	movs	r2, #0
 800aafc:	4543      	cmp	r3, r8
 800aafe:	d321      	bcc.n	800ab44 <__multiply+0x98>
 800ab00:	f107 0114 	add.w	r1, r7, #20
 800ab04:	f104 0214 	add.w	r2, r4, #20
 800ab08:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ab0c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ab10:	9302      	str	r3, [sp, #8]
 800ab12:	1b13      	subs	r3, r2, r4
 800ab14:	3b15      	subs	r3, #21
 800ab16:	f023 0303 	bic.w	r3, r3, #3
 800ab1a:	3304      	adds	r3, #4
 800ab1c:	f104 0715 	add.w	r7, r4, #21
 800ab20:	42ba      	cmp	r2, r7
 800ab22:	bf38      	it	cc
 800ab24:	2304      	movcc	r3, #4
 800ab26:	9301      	str	r3, [sp, #4]
 800ab28:	9b02      	ldr	r3, [sp, #8]
 800ab2a:	9103      	str	r1, [sp, #12]
 800ab2c:	428b      	cmp	r3, r1
 800ab2e:	d80c      	bhi.n	800ab4a <__multiply+0x9e>
 800ab30:	2e00      	cmp	r6, #0
 800ab32:	dd03      	ble.n	800ab3c <__multiply+0x90>
 800ab34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d05b      	beq.n	800abf4 <__multiply+0x148>
 800ab3c:	6106      	str	r6, [r0, #16]
 800ab3e:	b005      	add	sp, #20
 800ab40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab44:	f843 2b04 	str.w	r2, [r3], #4
 800ab48:	e7d8      	b.n	800aafc <__multiply+0x50>
 800ab4a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ab4e:	f1ba 0f00 	cmp.w	sl, #0
 800ab52:	d024      	beq.n	800ab9e <__multiply+0xf2>
 800ab54:	f104 0e14 	add.w	lr, r4, #20
 800ab58:	46a9      	mov	r9, r5
 800ab5a:	f04f 0c00 	mov.w	ip, #0
 800ab5e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab62:	f8d9 3000 	ldr.w	r3, [r9]
 800ab66:	fa1f fb87 	uxth.w	fp, r7
 800ab6a:	b29b      	uxth	r3, r3
 800ab6c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ab70:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ab74:	f8d9 7000 	ldr.w	r7, [r9]
 800ab78:	4463      	add	r3, ip
 800ab7a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ab7e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ab82:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ab86:	b29b      	uxth	r3, r3
 800ab88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ab8c:	4572      	cmp	r2, lr
 800ab8e:	f849 3b04 	str.w	r3, [r9], #4
 800ab92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ab96:	d8e2      	bhi.n	800ab5e <__multiply+0xb2>
 800ab98:	9b01      	ldr	r3, [sp, #4]
 800ab9a:	f845 c003 	str.w	ip, [r5, r3]
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aba4:	3104      	adds	r1, #4
 800aba6:	f1b9 0f00 	cmp.w	r9, #0
 800abaa:	d021      	beq.n	800abf0 <__multiply+0x144>
 800abac:	682b      	ldr	r3, [r5, #0]
 800abae:	f104 0c14 	add.w	ip, r4, #20
 800abb2:	46ae      	mov	lr, r5
 800abb4:	f04f 0a00 	mov.w	sl, #0
 800abb8:	f8bc b000 	ldrh.w	fp, [ip]
 800abbc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800abc0:	fb09 770b 	mla	r7, r9, fp, r7
 800abc4:	4457      	add	r7, sl
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800abcc:	f84e 3b04 	str.w	r3, [lr], #4
 800abd0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800abd4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abd8:	f8be 3000 	ldrh.w	r3, [lr]
 800abdc:	fb09 330a 	mla	r3, r9, sl, r3
 800abe0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800abe4:	4562      	cmp	r2, ip
 800abe6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800abea:	d8e5      	bhi.n	800abb8 <__multiply+0x10c>
 800abec:	9f01      	ldr	r7, [sp, #4]
 800abee:	51eb      	str	r3, [r5, r7]
 800abf0:	3504      	adds	r5, #4
 800abf2:	e799      	b.n	800ab28 <__multiply+0x7c>
 800abf4:	3e01      	subs	r6, #1
 800abf6:	e79b      	b.n	800ab30 <__multiply+0x84>
 800abf8:	0800d32d 	.word	0x0800d32d
 800abfc:	0800d33e 	.word	0x0800d33e

0800ac00 <__pow5mult>:
 800ac00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac04:	4615      	mov	r5, r2
 800ac06:	f012 0203 	ands.w	r2, r2, #3
 800ac0a:	4607      	mov	r7, r0
 800ac0c:	460e      	mov	r6, r1
 800ac0e:	d007      	beq.n	800ac20 <__pow5mult+0x20>
 800ac10:	4c25      	ldr	r4, [pc, #148]	@ (800aca8 <__pow5mult+0xa8>)
 800ac12:	3a01      	subs	r2, #1
 800ac14:	2300      	movs	r3, #0
 800ac16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ac1a:	f7ff fe55 	bl	800a8c8 <__multadd>
 800ac1e:	4606      	mov	r6, r0
 800ac20:	10ad      	asrs	r5, r5, #2
 800ac22:	d03d      	beq.n	800aca0 <__pow5mult+0xa0>
 800ac24:	69fc      	ldr	r4, [r7, #28]
 800ac26:	b97c      	cbnz	r4, 800ac48 <__pow5mult+0x48>
 800ac28:	2010      	movs	r0, #16
 800ac2a:	f7ff fd35 	bl	800a698 <malloc>
 800ac2e:	4602      	mov	r2, r0
 800ac30:	61f8      	str	r0, [r7, #28]
 800ac32:	b928      	cbnz	r0, 800ac40 <__pow5mult+0x40>
 800ac34:	4b1d      	ldr	r3, [pc, #116]	@ (800acac <__pow5mult+0xac>)
 800ac36:	481e      	ldr	r0, [pc, #120]	@ (800acb0 <__pow5mult+0xb0>)
 800ac38:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ac3c:	f001 fb1c 	bl	800c278 <__assert_func>
 800ac40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ac44:	6004      	str	r4, [r0, #0]
 800ac46:	60c4      	str	r4, [r0, #12]
 800ac48:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ac4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ac50:	b94c      	cbnz	r4, 800ac66 <__pow5mult+0x66>
 800ac52:	f240 2171 	movw	r1, #625	@ 0x271
 800ac56:	4638      	mov	r0, r7
 800ac58:	f7ff ff12 	bl	800aa80 <__i2b>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ac62:	4604      	mov	r4, r0
 800ac64:	6003      	str	r3, [r0, #0]
 800ac66:	f04f 0900 	mov.w	r9, #0
 800ac6a:	07eb      	lsls	r3, r5, #31
 800ac6c:	d50a      	bpl.n	800ac84 <__pow5mult+0x84>
 800ac6e:	4631      	mov	r1, r6
 800ac70:	4622      	mov	r2, r4
 800ac72:	4638      	mov	r0, r7
 800ac74:	f7ff ff1a 	bl	800aaac <__multiply>
 800ac78:	4631      	mov	r1, r6
 800ac7a:	4680      	mov	r8, r0
 800ac7c:	4638      	mov	r0, r7
 800ac7e:	f7ff fe01 	bl	800a884 <_Bfree>
 800ac82:	4646      	mov	r6, r8
 800ac84:	106d      	asrs	r5, r5, #1
 800ac86:	d00b      	beq.n	800aca0 <__pow5mult+0xa0>
 800ac88:	6820      	ldr	r0, [r4, #0]
 800ac8a:	b938      	cbnz	r0, 800ac9c <__pow5mult+0x9c>
 800ac8c:	4622      	mov	r2, r4
 800ac8e:	4621      	mov	r1, r4
 800ac90:	4638      	mov	r0, r7
 800ac92:	f7ff ff0b 	bl	800aaac <__multiply>
 800ac96:	6020      	str	r0, [r4, #0]
 800ac98:	f8c0 9000 	str.w	r9, [r0]
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	e7e4      	b.n	800ac6a <__pow5mult+0x6a>
 800aca0:	4630      	mov	r0, r6
 800aca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aca6:	bf00      	nop
 800aca8:	0800d398 	.word	0x0800d398
 800acac:	0800d2be 	.word	0x0800d2be
 800acb0:	0800d33e 	.word	0x0800d33e

0800acb4 <__lshift>:
 800acb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb8:	460c      	mov	r4, r1
 800acba:	6849      	ldr	r1, [r1, #4]
 800acbc:	6923      	ldr	r3, [r4, #16]
 800acbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800acc2:	68a3      	ldr	r3, [r4, #8]
 800acc4:	4607      	mov	r7, r0
 800acc6:	4691      	mov	r9, r2
 800acc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800accc:	f108 0601 	add.w	r6, r8, #1
 800acd0:	42b3      	cmp	r3, r6
 800acd2:	db0b      	blt.n	800acec <__lshift+0x38>
 800acd4:	4638      	mov	r0, r7
 800acd6:	f7ff fd95 	bl	800a804 <_Balloc>
 800acda:	4605      	mov	r5, r0
 800acdc:	b948      	cbnz	r0, 800acf2 <__lshift+0x3e>
 800acde:	4602      	mov	r2, r0
 800ace0:	4b28      	ldr	r3, [pc, #160]	@ (800ad84 <__lshift+0xd0>)
 800ace2:	4829      	ldr	r0, [pc, #164]	@ (800ad88 <__lshift+0xd4>)
 800ace4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ace8:	f001 fac6 	bl	800c278 <__assert_func>
 800acec:	3101      	adds	r1, #1
 800acee:	005b      	lsls	r3, r3, #1
 800acf0:	e7ee      	b.n	800acd0 <__lshift+0x1c>
 800acf2:	2300      	movs	r3, #0
 800acf4:	f100 0114 	add.w	r1, r0, #20
 800acf8:	f100 0210 	add.w	r2, r0, #16
 800acfc:	4618      	mov	r0, r3
 800acfe:	4553      	cmp	r3, sl
 800ad00:	db33      	blt.n	800ad6a <__lshift+0xb6>
 800ad02:	6920      	ldr	r0, [r4, #16]
 800ad04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ad08:	f104 0314 	add.w	r3, r4, #20
 800ad0c:	f019 091f 	ands.w	r9, r9, #31
 800ad10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ad14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ad18:	d02b      	beq.n	800ad72 <__lshift+0xbe>
 800ad1a:	f1c9 0e20 	rsb	lr, r9, #32
 800ad1e:	468a      	mov	sl, r1
 800ad20:	2200      	movs	r2, #0
 800ad22:	6818      	ldr	r0, [r3, #0]
 800ad24:	fa00 f009 	lsl.w	r0, r0, r9
 800ad28:	4310      	orrs	r0, r2
 800ad2a:	f84a 0b04 	str.w	r0, [sl], #4
 800ad2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad32:	459c      	cmp	ip, r3
 800ad34:	fa22 f20e 	lsr.w	r2, r2, lr
 800ad38:	d8f3      	bhi.n	800ad22 <__lshift+0x6e>
 800ad3a:	ebac 0304 	sub.w	r3, ip, r4
 800ad3e:	3b15      	subs	r3, #21
 800ad40:	f023 0303 	bic.w	r3, r3, #3
 800ad44:	3304      	adds	r3, #4
 800ad46:	f104 0015 	add.w	r0, r4, #21
 800ad4a:	4584      	cmp	ip, r0
 800ad4c:	bf38      	it	cc
 800ad4e:	2304      	movcc	r3, #4
 800ad50:	50ca      	str	r2, [r1, r3]
 800ad52:	b10a      	cbz	r2, 800ad58 <__lshift+0xa4>
 800ad54:	f108 0602 	add.w	r6, r8, #2
 800ad58:	3e01      	subs	r6, #1
 800ad5a:	4638      	mov	r0, r7
 800ad5c:	612e      	str	r6, [r5, #16]
 800ad5e:	4621      	mov	r1, r4
 800ad60:	f7ff fd90 	bl	800a884 <_Bfree>
 800ad64:	4628      	mov	r0, r5
 800ad66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad6e:	3301      	adds	r3, #1
 800ad70:	e7c5      	b.n	800acfe <__lshift+0x4a>
 800ad72:	3904      	subs	r1, #4
 800ad74:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad78:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad7c:	459c      	cmp	ip, r3
 800ad7e:	d8f9      	bhi.n	800ad74 <__lshift+0xc0>
 800ad80:	e7ea      	b.n	800ad58 <__lshift+0xa4>
 800ad82:	bf00      	nop
 800ad84:	0800d32d 	.word	0x0800d32d
 800ad88:	0800d33e 	.word	0x0800d33e

0800ad8c <__mcmp>:
 800ad8c:	690a      	ldr	r2, [r1, #16]
 800ad8e:	4603      	mov	r3, r0
 800ad90:	6900      	ldr	r0, [r0, #16]
 800ad92:	1a80      	subs	r0, r0, r2
 800ad94:	b530      	push	{r4, r5, lr}
 800ad96:	d10e      	bne.n	800adb6 <__mcmp+0x2a>
 800ad98:	3314      	adds	r3, #20
 800ad9a:	3114      	adds	r1, #20
 800ad9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ada0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ada4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ada8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800adac:	4295      	cmp	r5, r2
 800adae:	d003      	beq.n	800adb8 <__mcmp+0x2c>
 800adb0:	d205      	bcs.n	800adbe <__mcmp+0x32>
 800adb2:	f04f 30ff 	mov.w	r0, #4294967295
 800adb6:	bd30      	pop	{r4, r5, pc}
 800adb8:	42a3      	cmp	r3, r4
 800adba:	d3f3      	bcc.n	800ada4 <__mcmp+0x18>
 800adbc:	e7fb      	b.n	800adb6 <__mcmp+0x2a>
 800adbe:	2001      	movs	r0, #1
 800adc0:	e7f9      	b.n	800adb6 <__mcmp+0x2a>
	...

0800adc4 <__mdiff>:
 800adc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc8:	4689      	mov	r9, r1
 800adca:	4606      	mov	r6, r0
 800adcc:	4611      	mov	r1, r2
 800adce:	4648      	mov	r0, r9
 800add0:	4614      	mov	r4, r2
 800add2:	f7ff ffdb 	bl	800ad8c <__mcmp>
 800add6:	1e05      	subs	r5, r0, #0
 800add8:	d112      	bne.n	800ae00 <__mdiff+0x3c>
 800adda:	4629      	mov	r1, r5
 800addc:	4630      	mov	r0, r6
 800adde:	f7ff fd11 	bl	800a804 <_Balloc>
 800ade2:	4602      	mov	r2, r0
 800ade4:	b928      	cbnz	r0, 800adf2 <__mdiff+0x2e>
 800ade6:	4b3f      	ldr	r3, [pc, #252]	@ (800aee4 <__mdiff+0x120>)
 800ade8:	f240 2137 	movw	r1, #567	@ 0x237
 800adec:	483e      	ldr	r0, [pc, #248]	@ (800aee8 <__mdiff+0x124>)
 800adee:	f001 fa43 	bl	800c278 <__assert_func>
 800adf2:	2301      	movs	r3, #1
 800adf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800adf8:	4610      	mov	r0, r2
 800adfa:	b003      	add	sp, #12
 800adfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae00:	bfbc      	itt	lt
 800ae02:	464b      	movlt	r3, r9
 800ae04:	46a1      	movlt	r9, r4
 800ae06:	4630      	mov	r0, r6
 800ae08:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ae0c:	bfba      	itte	lt
 800ae0e:	461c      	movlt	r4, r3
 800ae10:	2501      	movlt	r5, #1
 800ae12:	2500      	movge	r5, #0
 800ae14:	f7ff fcf6 	bl	800a804 <_Balloc>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	b918      	cbnz	r0, 800ae24 <__mdiff+0x60>
 800ae1c:	4b31      	ldr	r3, [pc, #196]	@ (800aee4 <__mdiff+0x120>)
 800ae1e:	f240 2145 	movw	r1, #581	@ 0x245
 800ae22:	e7e3      	b.n	800adec <__mdiff+0x28>
 800ae24:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ae28:	6926      	ldr	r6, [r4, #16]
 800ae2a:	60c5      	str	r5, [r0, #12]
 800ae2c:	f109 0310 	add.w	r3, r9, #16
 800ae30:	f109 0514 	add.w	r5, r9, #20
 800ae34:	f104 0e14 	add.w	lr, r4, #20
 800ae38:	f100 0b14 	add.w	fp, r0, #20
 800ae3c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ae40:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ae44:	9301      	str	r3, [sp, #4]
 800ae46:	46d9      	mov	r9, fp
 800ae48:	f04f 0c00 	mov.w	ip, #0
 800ae4c:	9b01      	ldr	r3, [sp, #4]
 800ae4e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ae52:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ae56:	9301      	str	r3, [sp, #4]
 800ae58:	fa1f f38a 	uxth.w	r3, sl
 800ae5c:	4619      	mov	r1, r3
 800ae5e:	b283      	uxth	r3, r0
 800ae60:	1acb      	subs	r3, r1, r3
 800ae62:	0c00      	lsrs	r0, r0, #16
 800ae64:	4463      	add	r3, ip
 800ae66:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ae6a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ae74:	4576      	cmp	r6, lr
 800ae76:	f849 3b04 	str.w	r3, [r9], #4
 800ae7a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae7e:	d8e5      	bhi.n	800ae4c <__mdiff+0x88>
 800ae80:	1b33      	subs	r3, r6, r4
 800ae82:	3b15      	subs	r3, #21
 800ae84:	f023 0303 	bic.w	r3, r3, #3
 800ae88:	3415      	adds	r4, #21
 800ae8a:	3304      	adds	r3, #4
 800ae8c:	42a6      	cmp	r6, r4
 800ae8e:	bf38      	it	cc
 800ae90:	2304      	movcc	r3, #4
 800ae92:	441d      	add	r5, r3
 800ae94:	445b      	add	r3, fp
 800ae96:	461e      	mov	r6, r3
 800ae98:	462c      	mov	r4, r5
 800ae9a:	4544      	cmp	r4, r8
 800ae9c:	d30e      	bcc.n	800aebc <__mdiff+0xf8>
 800ae9e:	f108 0103 	add.w	r1, r8, #3
 800aea2:	1b49      	subs	r1, r1, r5
 800aea4:	f021 0103 	bic.w	r1, r1, #3
 800aea8:	3d03      	subs	r5, #3
 800aeaa:	45a8      	cmp	r8, r5
 800aeac:	bf38      	it	cc
 800aeae:	2100      	movcc	r1, #0
 800aeb0:	440b      	add	r3, r1
 800aeb2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aeb6:	b191      	cbz	r1, 800aede <__mdiff+0x11a>
 800aeb8:	6117      	str	r7, [r2, #16]
 800aeba:	e79d      	b.n	800adf8 <__mdiff+0x34>
 800aebc:	f854 1b04 	ldr.w	r1, [r4], #4
 800aec0:	46e6      	mov	lr, ip
 800aec2:	0c08      	lsrs	r0, r1, #16
 800aec4:	fa1c fc81 	uxtah	ip, ip, r1
 800aec8:	4471      	add	r1, lr
 800aeca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aece:	b289      	uxth	r1, r1
 800aed0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aed4:	f846 1b04 	str.w	r1, [r6], #4
 800aed8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aedc:	e7dd      	b.n	800ae9a <__mdiff+0xd6>
 800aede:	3f01      	subs	r7, #1
 800aee0:	e7e7      	b.n	800aeb2 <__mdiff+0xee>
 800aee2:	bf00      	nop
 800aee4:	0800d32d 	.word	0x0800d32d
 800aee8:	0800d33e 	.word	0x0800d33e

0800aeec <__ulp>:
 800aeec:	b082      	sub	sp, #8
 800aeee:	ed8d 0b00 	vstr	d0, [sp]
 800aef2:	9a01      	ldr	r2, [sp, #4]
 800aef4:	4b0f      	ldr	r3, [pc, #60]	@ (800af34 <__ulp+0x48>)
 800aef6:	4013      	ands	r3, r2
 800aef8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	dc08      	bgt.n	800af12 <__ulp+0x26>
 800af00:	425b      	negs	r3, r3
 800af02:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800af06:	ea4f 5223 	mov.w	r2, r3, asr #20
 800af0a:	da04      	bge.n	800af16 <__ulp+0x2a>
 800af0c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800af10:	4113      	asrs	r3, r2
 800af12:	2200      	movs	r2, #0
 800af14:	e008      	b.n	800af28 <__ulp+0x3c>
 800af16:	f1a2 0314 	sub.w	r3, r2, #20
 800af1a:	2b1e      	cmp	r3, #30
 800af1c:	bfda      	itte	le
 800af1e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800af22:	40da      	lsrle	r2, r3
 800af24:	2201      	movgt	r2, #1
 800af26:	2300      	movs	r3, #0
 800af28:	4619      	mov	r1, r3
 800af2a:	4610      	mov	r0, r2
 800af2c:	ec41 0b10 	vmov	d0, r0, r1
 800af30:	b002      	add	sp, #8
 800af32:	4770      	bx	lr
 800af34:	7ff00000 	.word	0x7ff00000

0800af38 <__b2d>:
 800af38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3c:	6906      	ldr	r6, [r0, #16]
 800af3e:	f100 0814 	add.w	r8, r0, #20
 800af42:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800af46:	1f37      	subs	r7, r6, #4
 800af48:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800af4c:	4610      	mov	r0, r2
 800af4e:	f7ff fd4b 	bl	800a9e8 <__hi0bits>
 800af52:	f1c0 0320 	rsb	r3, r0, #32
 800af56:	280a      	cmp	r0, #10
 800af58:	600b      	str	r3, [r1, #0]
 800af5a:	491b      	ldr	r1, [pc, #108]	@ (800afc8 <__b2d+0x90>)
 800af5c:	dc15      	bgt.n	800af8a <__b2d+0x52>
 800af5e:	f1c0 0c0b 	rsb	ip, r0, #11
 800af62:	fa22 f30c 	lsr.w	r3, r2, ip
 800af66:	45b8      	cmp	r8, r7
 800af68:	ea43 0501 	orr.w	r5, r3, r1
 800af6c:	bf34      	ite	cc
 800af6e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af72:	2300      	movcs	r3, #0
 800af74:	3015      	adds	r0, #21
 800af76:	fa02 f000 	lsl.w	r0, r2, r0
 800af7a:	fa23 f30c 	lsr.w	r3, r3, ip
 800af7e:	4303      	orrs	r3, r0
 800af80:	461c      	mov	r4, r3
 800af82:	ec45 4b10 	vmov	d0, r4, r5
 800af86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af8a:	45b8      	cmp	r8, r7
 800af8c:	bf3a      	itte	cc
 800af8e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800af92:	f1a6 0708 	subcc.w	r7, r6, #8
 800af96:	2300      	movcs	r3, #0
 800af98:	380b      	subs	r0, #11
 800af9a:	d012      	beq.n	800afc2 <__b2d+0x8a>
 800af9c:	f1c0 0120 	rsb	r1, r0, #32
 800afa0:	fa23 f401 	lsr.w	r4, r3, r1
 800afa4:	4082      	lsls	r2, r0
 800afa6:	4322      	orrs	r2, r4
 800afa8:	4547      	cmp	r7, r8
 800afaa:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800afae:	bf8c      	ite	hi
 800afb0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800afb4:	2200      	movls	r2, #0
 800afb6:	4083      	lsls	r3, r0
 800afb8:	40ca      	lsrs	r2, r1
 800afba:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800afbe:	4313      	orrs	r3, r2
 800afc0:	e7de      	b.n	800af80 <__b2d+0x48>
 800afc2:	ea42 0501 	orr.w	r5, r2, r1
 800afc6:	e7db      	b.n	800af80 <__b2d+0x48>
 800afc8:	3ff00000 	.word	0x3ff00000

0800afcc <__d2b>:
 800afcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800afd0:	460f      	mov	r7, r1
 800afd2:	2101      	movs	r1, #1
 800afd4:	ec59 8b10 	vmov	r8, r9, d0
 800afd8:	4616      	mov	r6, r2
 800afda:	f7ff fc13 	bl	800a804 <_Balloc>
 800afde:	4604      	mov	r4, r0
 800afe0:	b930      	cbnz	r0, 800aff0 <__d2b+0x24>
 800afe2:	4602      	mov	r2, r0
 800afe4:	4b23      	ldr	r3, [pc, #140]	@ (800b074 <__d2b+0xa8>)
 800afe6:	4824      	ldr	r0, [pc, #144]	@ (800b078 <__d2b+0xac>)
 800afe8:	f240 310f 	movw	r1, #783	@ 0x30f
 800afec:	f001 f944 	bl	800c278 <__assert_func>
 800aff0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aff4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aff8:	b10d      	cbz	r5, 800affe <__d2b+0x32>
 800affa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800affe:	9301      	str	r3, [sp, #4]
 800b000:	f1b8 0300 	subs.w	r3, r8, #0
 800b004:	d023      	beq.n	800b04e <__d2b+0x82>
 800b006:	4668      	mov	r0, sp
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	f7ff fd0c 	bl	800aa26 <__lo0bits>
 800b00e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b012:	b1d0      	cbz	r0, 800b04a <__d2b+0x7e>
 800b014:	f1c0 0320 	rsb	r3, r0, #32
 800b018:	fa02 f303 	lsl.w	r3, r2, r3
 800b01c:	430b      	orrs	r3, r1
 800b01e:	40c2      	lsrs	r2, r0
 800b020:	6163      	str	r3, [r4, #20]
 800b022:	9201      	str	r2, [sp, #4]
 800b024:	9b01      	ldr	r3, [sp, #4]
 800b026:	61a3      	str	r3, [r4, #24]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	bf0c      	ite	eq
 800b02c:	2201      	moveq	r2, #1
 800b02e:	2202      	movne	r2, #2
 800b030:	6122      	str	r2, [r4, #16]
 800b032:	b1a5      	cbz	r5, 800b05e <__d2b+0x92>
 800b034:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b038:	4405      	add	r5, r0
 800b03a:	603d      	str	r5, [r7, #0]
 800b03c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b040:	6030      	str	r0, [r6, #0]
 800b042:	4620      	mov	r0, r4
 800b044:	b003      	add	sp, #12
 800b046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b04a:	6161      	str	r1, [r4, #20]
 800b04c:	e7ea      	b.n	800b024 <__d2b+0x58>
 800b04e:	a801      	add	r0, sp, #4
 800b050:	f7ff fce9 	bl	800aa26 <__lo0bits>
 800b054:	9b01      	ldr	r3, [sp, #4]
 800b056:	6163      	str	r3, [r4, #20]
 800b058:	3020      	adds	r0, #32
 800b05a:	2201      	movs	r2, #1
 800b05c:	e7e8      	b.n	800b030 <__d2b+0x64>
 800b05e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b062:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b066:	6038      	str	r0, [r7, #0]
 800b068:	6918      	ldr	r0, [r3, #16]
 800b06a:	f7ff fcbd 	bl	800a9e8 <__hi0bits>
 800b06e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b072:	e7e5      	b.n	800b040 <__d2b+0x74>
 800b074:	0800d32d 	.word	0x0800d32d
 800b078:	0800d33e 	.word	0x0800d33e

0800b07c <__ratio>:
 800b07c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b080:	4688      	mov	r8, r1
 800b082:	4669      	mov	r1, sp
 800b084:	4681      	mov	r9, r0
 800b086:	f7ff ff57 	bl	800af38 <__b2d>
 800b08a:	a901      	add	r1, sp, #4
 800b08c:	4640      	mov	r0, r8
 800b08e:	ec55 4b10 	vmov	r4, r5, d0
 800b092:	f7ff ff51 	bl	800af38 <__b2d>
 800b096:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800b09a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800b09e:	1ad2      	subs	r2, r2, r3
 800b0a0:	e9dd 3100 	ldrd	r3, r1, [sp]
 800b0a4:	1a5b      	subs	r3, r3, r1
 800b0a6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800b0aa:	ec57 6b10 	vmov	r6, r7, d0
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bfd6      	itet	le
 800b0b2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b0b6:	462a      	movgt	r2, r5
 800b0b8:	463a      	movle	r2, r7
 800b0ba:	46ab      	mov	fp, r5
 800b0bc:	46a2      	mov	sl, r4
 800b0be:	bfce      	itee	gt
 800b0c0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b0c4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b0c8:	ee00 3a90 	vmovle	s1, r3
 800b0cc:	ec4b ab17 	vmov	d7, sl, fp
 800b0d0:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b0d4:	b003      	add	sp, #12
 800b0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b0da <__copybits>:
 800b0da:	3901      	subs	r1, #1
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	1149      	asrs	r1, r1, #5
 800b0e0:	6914      	ldr	r4, [r2, #16]
 800b0e2:	3101      	adds	r1, #1
 800b0e4:	f102 0314 	add.w	r3, r2, #20
 800b0e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b0ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b0f0:	1f05      	subs	r5, r0, #4
 800b0f2:	42a3      	cmp	r3, r4
 800b0f4:	d30c      	bcc.n	800b110 <__copybits+0x36>
 800b0f6:	1aa3      	subs	r3, r4, r2
 800b0f8:	3b11      	subs	r3, #17
 800b0fa:	f023 0303 	bic.w	r3, r3, #3
 800b0fe:	3211      	adds	r2, #17
 800b100:	42a2      	cmp	r2, r4
 800b102:	bf88      	it	hi
 800b104:	2300      	movhi	r3, #0
 800b106:	4418      	add	r0, r3
 800b108:	2300      	movs	r3, #0
 800b10a:	4288      	cmp	r0, r1
 800b10c:	d305      	bcc.n	800b11a <__copybits+0x40>
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
 800b110:	f853 6b04 	ldr.w	r6, [r3], #4
 800b114:	f845 6f04 	str.w	r6, [r5, #4]!
 800b118:	e7eb      	b.n	800b0f2 <__copybits+0x18>
 800b11a:	f840 3b04 	str.w	r3, [r0], #4
 800b11e:	e7f4      	b.n	800b10a <__copybits+0x30>

0800b120 <__any_on>:
 800b120:	f100 0214 	add.w	r2, r0, #20
 800b124:	6900      	ldr	r0, [r0, #16]
 800b126:	114b      	asrs	r3, r1, #5
 800b128:	4298      	cmp	r0, r3
 800b12a:	b510      	push	{r4, lr}
 800b12c:	db11      	blt.n	800b152 <__any_on+0x32>
 800b12e:	dd0a      	ble.n	800b146 <__any_on+0x26>
 800b130:	f011 011f 	ands.w	r1, r1, #31
 800b134:	d007      	beq.n	800b146 <__any_on+0x26>
 800b136:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b13a:	fa24 f001 	lsr.w	r0, r4, r1
 800b13e:	fa00 f101 	lsl.w	r1, r0, r1
 800b142:	428c      	cmp	r4, r1
 800b144:	d10b      	bne.n	800b15e <__any_on+0x3e>
 800b146:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d803      	bhi.n	800b156 <__any_on+0x36>
 800b14e:	2000      	movs	r0, #0
 800b150:	bd10      	pop	{r4, pc}
 800b152:	4603      	mov	r3, r0
 800b154:	e7f7      	b.n	800b146 <__any_on+0x26>
 800b156:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b15a:	2900      	cmp	r1, #0
 800b15c:	d0f5      	beq.n	800b14a <__any_on+0x2a>
 800b15e:	2001      	movs	r0, #1
 800b160:	e7f6      	b.n	800b150 <__any_on+0x30>

0800b162 <sulp>:
 800b162:	b570      	push	{r4, r5, r6, lr}
 800b164:	4604      	mov	r4, r0
 800b166:	460d      	mov	r5, r1
 800b168:	4616      	mov	r6, r2
 800b16a:	ec45 4b10 	vmov	d0, r4, r5
 800b16e:	f7ff febd 	bl	800aeec <__ulp>
 800b172:	b17e      	cbz	r6, 800b194 <sulp+0x32>
 800b174:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b178:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	dd09      	ble.n	800b194 <sulp+0x32>
 800b180:	051b      	lsls	r3, r3, #20
 800b182:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800b186:	2000      	movs	r0, #0
 800b188:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800b18c:	ec41 0b17 	vmov	d7, r0, r1
 800b190:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b194:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b198 <_strtod_l>:
 800b198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19c:	ed2d 8b0a 	vpush	{d8-d12}
 800b1a0:	b097      	sub	sp, #92	@ 0x5c
 800b1a2:	4688      	mov	r8, r1
 800b1a4:	920e      	str	r2, [sp, #56]	@ 0x38
 800b1a6:	2200      	movs	r2, #0
 800b1a8:	9212      	str	r2, [sp, #72]	@ 0x48
 800b1aa:	9005      	str	r0, [sp, #20]
 800b1ac:	f04f 0a00 	mov.w	sl, #0
 800b1b0:	f04f 0b00 	mov.w	fp, #0
 800b1b4:	460a      	mov	r2, r1
 800b1b6:	9211      	str	r2, [sp, #68]	@ 0x44
 800b1b8:	7811      	ldrb	r1, [r2, #0]
 800b1ba:	292b      	cmp	r1, #43	@ 0x2b
 800b1bc:	d04c      	beq.n	800b258 <_strtod_l+0xc0>
 800b1be:	d839      	bhi.n	800b234 <_strtod_l+0x9c>
 800b1c0:	290d      	cmp	r1, #13
 800b1c2:	d833      	bhi.n	800b22c <_strtod_l+0x94>
 800b1c4:	2908      	cmp	r1, #8
 800b1c6:	d833      	bhi.n	800b230 <_strtod_l+0x98>
 800b1c8:	2900      	cmp	r1, #0
 800b1ca:	d03c      	beq.n	800b246 <_strtod_l+0xae>
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	9208      	str	r2, [sp, #32]
 800b1d0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b1d2:	782a      	ldrb	r2, [r5, #0]
 800b1d4:	2a30      	cmp	r2, #48	@ 0x30
 800b1d6:	f040 80b5 	bne.w	800b344 <_strtod_l+0x1ac>
 800b1da:	786a      	ldrb	r2, [r5, #1]
 800b1dc:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b1e0:	2a58      	cmp	r2, #88	@ 0x58
 800b1e2:	d170      	bne.n	800b2c6 <_strtod_l+0x12e>
 800b1e4:	9302      	str	r3, [sp, #8]
 800b1e6:	9b08      	ldr	r3, [sp, #32]
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	ab12      	add	r3, sp, #72	@ 0x48
 800b1ec:	9300      	str	r3, [sp, #0]
 800b1ee:	4a8b      	ldr	r2, [pc, #556]	@ (800b41c <_strtod_l+0x284>)
 800b1f0:	9805      	ldr	r0, [sp, #20]
 800b1f2:	ab13      	add	r3, sp, #76	@ 0x4c
 800b1f4:	a911      	add	r1, sp, #68	@ 0x44
 800b1f6:	f001 f8d9 	bl	800c3ac <__gethex>
 800b1fa:	f010 060f 	ands.w	r6, r0, #15
 800b1fe:	4604      	mov	r4, r0
 800b200:	d005      	beq.n	800b20e <_strtod_l+0x76>
 800b202:	2e06      	cmp	r6, #6
 800b204:	d12a      	bne.n	800b25c <_strtod_l+0xc4>
 800b206:	3501      	adds	r5, #1
 800b208:	2300      	movs	r3, #0
 800b20a:	9511      	str	r5, [sp, #68]	@ 0x44
 800b20c:	9308      	str	r3, [sp, #32]
 800b20e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b210:	2b00      	cmp	r3, #0
 800b212:	f040 852f 	bne.w	800bc74 <_strtod_l+0xadc>
 800b216:	9b08      	ldr	r3, [sp, #32]
 800b218:	ec4b ab10 	vmov	d0, sl, fp
 800b21c:	b1cb      	cbz	r3, 800b252 <_strtod_l+0xba>
 800b21e:	eeb1 0b40 	vneg.f64	d0, d0
 800b222:	b017      	add	sp, #92	@ 0x5c
 800b224:	ecbd 8b0a 	vpop	{d8-d12}
 800b228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b22c:	2920      	cmp	r1, #32
 800b22e:	d1cd      	bne.n	800b1cc <_strtod_l+0x34>
 800b230:	3201      	adds	r2, #1
 800b232:	e7c0      	b.n	800b1b6 <_strtod_l+0x1e>
 800b234:	292d      	cmp	r1, #45	@ 0x2d
 800b236:	d1c9      	bne.n	800b1cc <_strtod_l+0x34>
 800b238:	2101      	movs	r1, #1
 800b23a:	9108      	str	r1, [sp, #32]
 800b23c:	1c51      	adds	r1, r2, #1
 800b23e:	9111      	str	r1, [sp, #68]	@ 0x44
 800b240:	7852      	ldrb	r2, [r2, #1]
 800b242:	2a00      	cmp	r2, #0
 800b244:	d1c4      	bne.n	800b1d0 <_strtod_l+0x38>
 800b246:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b248:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f040 850f 	bne.w	800bc70 <_strtod_l+0xad8>
 800b252:	ec4b ab10 	vmov	d0, sl, fp
 800b256:	e7e4      	b.n	800b222 <_strtod_l+0x8a>
 800b258:	2100      	movs	r1, #0
 800b25a:	e7ee      	b.n	800b23a <_strtod_l+0xa2>
 800b25c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b25e:	b13a      	cbz	r2, 800b270 <_strtod_l+0xd8>
 800b260:	2135      	movs	r1, #53	@ 0x35
 800b262:	a814      	add	r0, sp, #80	@ 0x50
 800b264:	f7ff ff39 	bl	800b0da <__copybits>
 800b268:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b26a:	9805      	ldr	r0, [sp, #20]
 800b26c:	f7ff fb0a 	bl	800a884 <_Bfree>
 800b270:	1e73      	subs	r3, r6, #1
 800b272:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b274:	2b04      	cmp	r3, #4
 800b276:	d806      	bhi.n	800b286 <_strtod_l+0xee>
 800b278:	e8df f003 	tbb	[pc, r3]
 800b27c:	201d0314 	.word	0x201d0314
 800b280:	14          	.byte	0x14
 800b281:	00          	.byte	0x00
 800b282:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800b286:	05e3      	lsls	r3, r4, #23
 800b288:	bf48      	it	mi
 800b28a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800b28e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b292:	0d1b      	lsrs	r3, r3, #20
 800b294:	051b      	lsls	r3, r3, #20
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1b9      	bne.n	800b20e <_strtod_l+0x76>
 800b29a:	f7fe fba1 	bl	80099e0 <__errno>
 800b29e:	2322      	movs	r3, #34	@ 0x22
 800b2a0:	6003      	str	r3, [r0, #0]
 800b2a2:	e7b4      	b.n	800b20e <_strtod_l+0x76>
 800b2a4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800b2a8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800b2ac:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800b2b0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b2b4:	e7e7      	b.n	800b286 <_strtod_l+0xee>
 800b2b6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800b424 <_strtod_l+0x28c>
 800b2ba:	e7e4      	b.n	800b286 <_strtod_l+0xee>
 800b2bc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800b2c0:	f04f 3aff 	mov.w	sl, #4294967295
 800b2c4:	e7df      	b.n	800b286 <_strtod_l+0xee>
 800b2c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b2c8:	1c5a      	adds	r2, r3, #1
 800b2ca:	9211      	str	r2, [sp, #68]	@ 0x44
 800b2cc:	785b      	ldrb	r3, [r3, #1]
 800b2ce:	2b30      	cmp	r3, #48	@ 0x30
 800b2d0:	d0f9      	beq.n	800b2c6 <_strtod_l+0x12e>
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d09b      	beq.n	800b20e <_strtod_l+0x76>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	2600      	movs	r6, #0
 800b2da:	9307      	str	r3, [sp, #28]
 800b2dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b2de:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2e0:	46b1      	mov	r9, r6
 800b2e2:	4635      	mov	r5, r6
 800b2e4:	220a      	movs	r2, #10
 800b2e6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800b2e8:	7804      	ldrb	r4, [r0, #0]
 800b2ea:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800b2ee:	b2d9      	uxtb	r1, r3
 800b2f0:	2909      	cmp	r1, #9
 800b2f2:	d929      	bls.n	800b348 <_strtod_l+0x1b0>
 800b2f4:	494a      	ldr	r1, [pc, #296]	@ (800b420 <_strtod_l+0x288>)
 800b2f6:	2201      	movs	r2, #1
 800b2f8:	f000 ff84 	bl	800c204 <strncmp>
 800b2fc:	b378      	cbz	r0, 800b35e <_strtod_l+0x1c6>
 800b2fe:	2000      	movs	r0, #0
 800b300:	4622      	mov	r2, r4
 800b302:	462b      	mov	r3, r5
 800b304:	4607      	mov	r7, r0
 800b306:	9006      	str	r0, [sp, #24]
 800b308:	2a65      	cmp	r2, #101	@ 0x65
 800b30a:	d001      	beq.n	800b310 <_strtod_l+0x178>
 800b30c:	2a45      	cmp	r2, #69	@ 0x45
 800b30e:	d117      	bne.n	800b340 <_strtod_l+0x1a8>
 800b310:	b91b      	cbnz	r3, 800b31a <_strtod_l+0x182>
 800b312:	9b07      	ldr	r3, [sp, #28]
 800b314:	4303      	orrs	r3, r0
 800b316:	d096      	beq.n	800b246 <_strtod_l+0xae>
 800b318:	2300      	movs	r3, #0
 800b31a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800b31e:	f108 0201 	add.w	r2, r8, #1
 800b322:	9211      	str	r2, [sp, #68]	@ 0x44
 800b324:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b328:	2a2b      	cmp	r2, #43	@ 0x2b
 800b32a:	d06b      	beq.n	800b404 <_strtod_l+0x26c>
 800b32c:	2a2d      	cmp	r2, #45	@ 0x2d
 800b32e:	d071      	beq.n	800b414 <_strtod_l+0x27c>
 800b330:	f04f 0e00 	mov.w	lr, #0
 800b334:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b338:	2c09      	cmp	r4, #9
 800b33a:	d979      	bls.n	800b430 <_strtod_l+0x298>
 800b33c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800b340:	2400      	movs	r4, #0
 800b342:	e094      	b.n	800b46e <_strtod_l+0x2d6>
 800b344:	2300      	movs	r3, #0
 800b346:	e7c7      	b.n	800b2d8 <_strtod_l+0x140>
 800b348:	2d08      	cmp	r5, #8
 800b34a:	f100 0001 	add.w	r0, r0, #1
 800b34e:	bfd4      	ite	le
 800b350:	fb02 3909 	mlale	r9, r2, r9, r3
 800b354:	fb02 3606 	mlagt	r6, r2, r6, r3
 800b358:	3501      	adds	r5, #1
 800b35a:	9011      	str	r0, [sp, #68]	@ 0x44
 800b35c:	e7c3      	b.n	800b2e6 <_strtod_l+0x14e>
 800b35e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b360:	1c5a      	adds	r2, r3, #1
 800b362:	9211      	str	r2, [sp, #68]	@ 0x44
 800b364:	785a      	ldrb	r2, [r3, #1]
 800b366:	b375      	cbz	r5, 800b3c6 <_strtod_l+0x22e>
 800b368:	4607      	mov	r7, r0
 800b36a:	462b      	mov	r3, r5
 800b36c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800b370:	2909      	cmp	r1, #9
 800b372:	d913      	bls.n	800b39c <_strtod_l+0x204>
 800b374:	2101      	movs	r1, #1
 800b376:	9106      	str	r1, [sp, #24]
 800b378:	e7c6      	b.n	800b308 <_strtod_l+0x170>
 800b37a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	9211      	str	r2, [sp, #68]	@ 0x44
 800b380:	785a      	ldrb	r2, [r3, #1]
 800b382:	3001      	adds	r0, #1
 800b384:	2a30      	cmp	r2, #48	@ 0x30
 800b386:	d0f8      	beq.n	800b37a <_strtod_l+0x1e2>
 800b388:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800b38c:	2b08      	cmp	r3, #8
 800b38e:	f200 8476 	bhi.w	800bc7e <_strtod_l+0xae6>
 800b392:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b394:	930a      	str	r3, [sp, #40]	@ 0x28
 800b396:	4607      	mov	r7, r0
 800b398:	2000      	movs	r0, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	3a30      	subs	r2, #48	@ 0x30
 800b39e:	f100 0101 	add.w	r1, r0, #1
 800b3a2:	d023      	beq.n	800b3ec <_strtod_l+0x254>
 800b3a4:	440f      	add	r7, r1
 800b3a6:	eb00 0c03 	add.w	ip, r0, r3
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	240a      	movs	r4, #10
 800b3ae:	4561      	cmp	r1, ip
 800b3b0:	d10b      	bne.n	800b3ca <_strtod_l+0x232>
 800b3b2:	1c5c      	adds	r4, r3, #1
 800b3b4:	4403      	add	r3, r0
 800b3b6:	2b08      	cmp	r3, #8
 800b3b8:	4404      	add	r4, r0
 800b3ba:	dc11      	bgt.n	800b3e0 <_strtod_l+0x248>
 800b3bc:	230a      	movs	r3, #10
 800b3be:	fb03 2909 	mla	r9, r3, r9, r2
 800b3c2:	2100      	movs	r1, #0
 800b3c4:	e013      	b.n	800b3ee <_strtod_l+0x256>
 800b3c6:	4628      	mov	r0, r5
 800b3c8:	e7dc      	b.n	800b384 <_strtod_l+0x1ec>
 800b3ca:	2908      	cmp	r1, #8
 800b3cc:	f101 0101 	add.w	r1, r1, #1
 800b3d0:	dc02      	bgt.n	800b3d8 <_strtod_l+0x240>
 800b3d2:	fb04 f909 	mul.w	r9, r4, r9
 800b3d6:	e7ea      	b.n	800b3ae <_strtod_l+0x216>
 800b3d8:	2910      	cmp	r1, #16
 800b3da:	bfd8      	it	le
 800b3dc:	4366      	mulle	r6, r4
 800b3de:	e7e6      	b.n	800b3ae <_strtod_l+0x216>
 800b3e0:	2b0f      	cmp	r3, #15
 800b3e2:	dcee      	bgt.n	800b3c2 <_strtod_l+0x22a>
 800b3e4:	230a      	movs	r3, #10
 800b3e6:	fb03 2606 	mla	r6, r3, r6, r2
 800b3ea:	e7ea      	b.n	800b3c2 <_strtod_l+0x22a>
 800b3ec:	461c      	mov	r4, r3
 800b3ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b3f0:	1c5a      	adds	r2, r3, #1
 800b3f2:	9211      	str	r2, [sp, #68]	@ 0x44
 800b3f4:	785a      	ldrb	r2, [r3, #1]
 800b3f6:	4608      	mov	r0, r1
 800b3f8:	4623      	mov	r3, r4
 800b3fa:	e7b7      	b.n	800b36c <_strtod_l+0x1d4>
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	2700      	movs	r7, #0
 800b400:	9306      	str	r3, [sp, #24]
 800b402:	e786      	b.n	800b312 <_strtod_l+0x17a>
 800b404:	f04f 0e00 	mov.w	lr, #0
 800b408:	f108 0202 	add.w	r2, r8, #2
 800b40c:	9211      	str	r2, [sp, #68]	@ 0x44
 800b40e:	f898 2002 	ldrb.w	r2, [r8, #2]
 800b412:	e78f      	b.n	800b334 <_strtod_l+0x19c>
 800b414:	f04f 0e01 	mov.w	lr, #1
 800b418:	e7f6      	b.n	800b408 <_strtod_l+0x270>
 800b41a:	bf00      	nop
 800b41c:	0800d4b0 	.word	0x0800d4b0
 800b420:	0800d498 	.word	0x0800d498
 800b424:	7ff00000 	.word	0x7ff00000
 800b428:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b42a:	1c54      	adds	r4, r2, #1
 800b42c:	9411      	str	r4, [sp, #68]	@ 0x44
 800b42e:	7852      	ldrb	r2, [r2, #1]
 800b430:	2a30      	cmp	r2, #48	@ 0x30
 800b432:	d0f9      	beq.n	800b428 <_strtod_l+0x290>
 800b434:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800b438:	2c08      	cmp	r4, #8
 800b43a:	d881      	bhi.n	800b340 <_strtod_l+0x1a8>
 800b43c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800b440:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b442:	9209      	str	r2, [sp, #36]	@ 0x24
 800b444:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800b446:	1c51      	adds	r1, r2, #1
 800b448:	9111      	str	r1, [sp, #68]	@ 0x44
 800b44a:	7852      	ldrb	r2, [r2, #1]
 800b44c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800b450:	2c09      	cmp	r4, #9
 800b452:	d938      	bls.n	800b4c6 <_strtod_l+0x32e>
 800b454:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800b456:	1b0c      	subs	r4, r1, r4
 800b458:	2c08      	cmp	r4, #8
 800b45a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800b45e:	dc02      	bgt.n	800b466 <_strtod_l+0x2ce>
 800b460:	4564      	cmp	r4, ip
 800b462:	bfa8      	it	ge
 800b464:	4664      	movge	r4, ip
 800b466:	f1be 0f00 	cmp.w	lr, #0
 800b46a:	d000      	beq.n	800b46e <_strtod_l+0x2d6>
 800b46c:	4264      	negs	r4, r4
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d14e      	bne.n	800b510 <_strtod_l+0x378>
 800b472:	9b07      	ldr	r3, [sp, #28]
 800b474:	4318      	orrs	r0, r3
 800b476:	f47f aeca 	bne.w	800b20e <_strtod_l+0x76>
 800b47a:	9b06      	ldr	r3, [sp, #24]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f47f aee2 	bne.w	800b246 <_strtod_l+0xae>
 800b482:	2a69      	cmp	r2, #105	@ 0x69
 800b484:	d027      	beq.n	800b4d6 <_strtod_l+0x33e>
 800b486:	dc24      	bgt.n	800b4d2 <_strtod_l+0x33a>
 800b488:	2a49      	cmp	r2, #73	@ 0x49
 800b48a:	d024      	beq.n	800b4d6 <_strtod_l+0x33e>
 800b48c:	2a4e      	cmp	r2, #78	@ 0x4e
 800b48e:	f47f aeda 	bne.w	800b246 <_strtod_l+0xae>
 800b492:	4997      	ldr	r1, [pc, #604]	@ (800b6f0 <_strtod_l+0x558>)
 800b494:	a811      	add	r0, sp, #68	@ 0x44
 800b496:	f001 f9ab 	bl	800c7f0 <__match>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	f43f aed3 	beq.w	800b246 <_strtod_l+0xae>
 800b4a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4a2:	781b      	ldrb	r3, [r3, #0]
 800b4a4:	2b28      	cmp	r3, #40	@ 0x28
 800b4a6:	d12d      	bne.n	800b504 <_strtod_l+0x36c>
 800b4a8:	4992      	ldr	r1, [pc, #584]	@ (800b6f4 <_strtod_l+0x55c>)
 800b4aa:	aa14      	add	r2, sp, #80	@ 0x50
 800b4ac:	a811      	add	r0, sp, #68	@ 0x44
 800b4ae:	f001 f9b3 	bl	800c818 <__hexnan>
 800b4b2:	2805      	cmp	r0, #5
 800b4b4:	d126      	bne.n	800b504 <_strtod_l+0x36c>
 800b4b6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800b4b8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800b4bc:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b4c0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b4c4:	e6a3      	b.n	800b20e <_strtod_l+0x76>
 800b4c6:	240a      	movs	r4, #10
 800b4c8:	fb04 2c0c 	mla	ip, r4, ip, r2
 800b4cc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800b4d0:	e7b8      	b.n	800b444 <_strtod_l+0x2ac>
 800b4d2:	2a6e      	cmp	r2, #110	@ 0x6e
 800b4d4:	e7db      	b.n	800b48e <_strtod_l+0x2f6>
 800b4d6:	4988      	ldr	r1, [pc, #544]	@ (800b6f8 <_strtod_l+0x560>)
 800b4d8:	a811      	add	r0, sp, #68	@ 0x44
 800b4da:	f001 f989 	bl	800c7f0 <__match>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	f43f aeb1 	beq.w	800b246 <_strtod_l+0xae>
 800b4e4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4e6:	4985      	ldr	r1, [pc, #532]	@ (800b6fc <_strtod_l+0x564>)
 800b4e8:	3b01      	subs	r3, #1
 800b4ea:	a811      	add	r0, sp, #68	@ 0x44
 800b4ec:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4ee:	f001 f97f 	bl	800c7f0 <__match>
 800b4f2:	b910      	cbnz	r0, 800b4fa <_strtod_l+0x362>
 800b4f4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b4f6:	3301      	adds	r3, #1
 800b4f8:	9311      	str	r3, [sp, #68]	@ 0x44
 800b4fa:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800b710 <_strtod_l+0x578>
 800b4fe:	f04f 0a00 	mov.w	sl, #0
 800b502:	e684      	b.n	800b20e <_strtod_l+0x76>
 800b504:	487e      	ldr	r0, [pc, #504]	@ (800b700 <_strtod_l+0x568>)
 800b506:	f000 feaf 	bl	800c268 <nan>
 800b50a:	ec5b ab10 	vmov	sl, fp, d0
 800b50e:	e67e      	b.n	800b20e <_strtod_l+0x76>
 800b510:	ee07 9a90 	vmov	s15, r9
 800b514:	1be2      	subs	r2, r4, r7
 800b516:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b51a:	2d00      	cmp	r5, #0
 800b51c:	bf08      	it	eq
 800b51e:	461d      	moveq	r5, r3
 800b520:	2b10      	cmp	r3, #16
 800b522:	9209      	str	r2, [sp, #36]	@ 0x24
 800b524:	461a      	mov	r2, r3
 800b526:	bfa8      	it	ge
 800b528:	2210      	movge	r2, #16
 800b52a:	2b09      	cmp	r3, #9
 800b52c:	ec5b ab17 	vmov	sl, fp, d7
 800b530:	dc15      	bgt.n	800b55e <_strtod_l+0x3c6>
 800b532:	1be1      	subs	r1, r4, r7
 800b534:	2900      	cmp	r1, #0
 800b536:	f43f ae6a 	beq.w	800b20e <_strtod_l+0x76>
 800b53a:	eba4 0107 	sub.w	r1, r4, r7
 800b53e:	dd72      	ble.n	800b626 <_strtod_l+0x48e>
 800b540:	2916      	cmp	r1, #22
 800b542:	dc59      	bgt.n	800b5f8 <_strtod_l+0x460>
 800b544:	4b6f      	ldr	r3, [pc, #444]	@ (800b704 <_strtod_l+0x56c>)
 800b546:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b548:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b54c:	ed93 7b00 	vldr	d7, [r3]
 800b550:	ec4b ab16 	vmov	d6, sl, fp
 800b554:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b558:	ec5b ab17 	vmov	sl, fp, d7
 800b55c:	e657      	b.n	800b20e <_strtod_l+0x76>
 800b55e:	4969      	ldr	r1, [pc, #420]	@ (800b704 <_strtod_l+0x56c>)
 800b560:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b564:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800b568:	ee06 6a90 	vmov	s13, r6
 800b56c:	2b0f      	cmp	r3, #15
 800b56e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800b572:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b576:	ec5b ab16 	vmov	sl, fp, d6
 800b57a:	ddda      	ble.n	800b532 <_strtod_l+0x39a>
 800b57c:	1a9a      	subs	r2, r3, r2
 800b57e:	1be1      	subs	r1, r4, r7
 800b580:	440a      	add	r2, r1
 800b582:	2a00      	cmp	r2, #0
 800b584:	f340 8094 	ble.w	800b6b0 <_strtod_l+0x518>
 800b588:	f012 000f 	ands.w	r0, r2, #15
 800b58c:	d00a      	beq.n	800b5a4 <_strtod_l+0x40c>
 800b58e:	495d      	ldr	r1, [pc, #372]	@ (800b704 <_strtod_l+0x56c>)
 800b590:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b594:	ed91 7b00 	vldr	d7, [r1]
 800b598:	ec4b ab16 	vmov	d6, sl, fp
 800b59c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b5a0:	ec5b ab17 	vmov	sl, fp, d7
 800b5a4:	f032 020f 	bics.w	r2, r2, #15
 800b5a8:	d073      	beq.n	800b692 <_strtod_l+0x4fa>
 800b5aa:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800b5ae:	dd47      	ble.n	800b640 <_strtod_l+0x4a8>
 800b5b0:	2400      	movs	r4, #0
 800b5b2:	4625      	mov	r5, r4
 800b5b4:	9407      	str	r4, [sp, #28]
 800b5b6:	4626      	mov	r6, r4
 800b5b8:	9a05      	ldr	r2, [sp, #20]
 800b5ba:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b710 <_strtod_l+0x578>
 800b5be:	2322      	movs	r3, #34	@ 0x22
 800b5c0:	6013      	str	r3, [r2, #0]
 800b5c2:	f04f 0a00 	mov.w	sl, #0
 800b5c6:	9b07      	ldr	r3, [sp, #28]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	f43f ae20 	beq.w	800b20e <_strtod_l+0x76>
 800b5ce:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b5d0:	9805      	ldr	r0, [sp, #20]
 800b5d2:	f7ff f957 	bl	800a884 <_Bfree>
 800b5d6:	9805      	ldr	r0, [sp, #20]
 800b5d8:	4631      	mov	r1, r6
 800b5da:	f7ff f953 	bl	800a884 <_Bfree>
 800b5de:	9805      	ldr	r0, [sp, #20]
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	f7ff f94f 	bl	800a884 <_Bfree>
 800b5e6:	9907      	ldr	r1, [sp, #28]
 800b5e8:	9805      	ldr	r0, [sp, #20]
 800b5ea:	f7ff f94b 	bl	800a884 <_Bfree>
 800b5ee:	9805      	ldr	r0, [sp, #20]
 800b5f0:	4621      	mov	r1, r4
 800b5f2:	f7ff f947 	bl	800a884 <_Bfree>
 800b5f6:	e60a      	b.n	800b20e <_strtod_l+0x76>
 800b5f8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800b5fc:	1be0      	subs	r0, r4, r7
 800b5fe:	4281      	cmp	r1, r0
 800b600:	dbbc      	blt.n	800b57c <_strtod_l+0x3e4>
 800b602:	4a40      	ldr	r2, [pc, #256]	@ (800b704 <_strtod_l+0x56c>)
 800b604:	f1c3 030f 	rsb	r3, r3, #15
 800b608:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800b60c:	ed91 7b00 	vldr	d7, [r1]
 800b610:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b612:	ec4b ab16 	vmov	d6, sl, fp
 800b616:	1acb      	subs	r3, r1, r3
 800b618:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800b61c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b620:	ed92 6b00 	vldr	d6, [r2]
 800b624:	e796      	b.n	800b554 <_strtod_l+0x3bc>
 800b626:	3116      	adds	r1, #22
 800b628:	dba8      	blt.n	800b57c <_strtod_l+0x3e4>
 800b62a:	4b36      	ldr	r3, [pc, #216]	@ (800b704 <_strtod_l+0x56c>)
 800b62c:	1b3c      	subs	r4, r7, r4
 800b62e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b632:	ed94 7b00 	vldr	d7, [r4]
 800b636:	ec4b ab16 	vmov	d6, sl, fp
 800b63a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b63e:	e78b      	b.n	800b558 <_strtod_l+0x3c0>
 800b640:	2000      	movs	r0, #0
 800b642:	ec4b ab17 	vmov	d7, sl, fp
 800b646:	4e30      	ldr	r6, [pc, #192]	@ (800b708 <_strtod_l+0x570>)
 800b648:	1112      	asrs	r2, r2, #4
 800b64a:	4601      	mov	r1, r0
 800b64c:	2a01      	cmp	r2, #1
 800b64e:	dc23      	bgt.n	800b698 <_strtod_l+0x500>
 800b650:	b108      	cbz	r0, 800b656 <_strtod_l+0x4be>
 800b652:	ec5b ab17 	vmov	sl, fp, d7
 800b656:	4a2c      	ldr	r2, [pc, #176]	@ (800b708 <_strtod_l+0x570>)
 800b658:	482c      	ldr	r0, [pc, #176]	@ (800b70c <_strtod_l+0x574>)
 800b65a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b65e:	ed92 7b00 	vldr	d7, [r2]
 800b662:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b666:	ec4b ab16 	vmov	d6, sl, fp
 800b66a:	4a29      	ldr	r2, [pc, #164]	@ (800b710 <_strtod_l+0x578>)
 800b66c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b670:	ee17 1a90 	vmov	r1, s15
 800b674:	400a      	ands	r2, r1
 800b676:	4282      	cmp	r2, r0
 800b678:	ec5b ab17 	vmov	sl, fp, d7
 800b67c:	d898      	bhi.n	800b5b0 <_strtod_l+0x418>
 800b67e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800b682:	4282      	cmp	r2, r0
 800b684:	bf86      	itte	hi
 800b686:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800b714 <_strtod_l+0x57c>
 800b68a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b68e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800b692:	2200      	movs	r2, #0
 800b694:	9206      	str	r2, [sp, #24]
 800b696:	e076      	b.n	800b786 <_strtod_l+0x5ee>
 800b698:	f012 0f01 	tst.w	r2, #1
 800b69c:	d004      	beq.n	800b6a8 <_strtod_l+0x510>
 800b69e:	ed96 6b00 	vldr	d6, [r6]
 800b6a2:	2001      	movs	r0, #1
 800b6a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b6a8:	3101      	adds	r1, #1
 800b6aa:	1052      	asrs	r2, r2, #1
 800b6ac:	3608      	adds	r6, #8
 800b6ae:	e7cd      	b.n	800b64c <_strtod_l+0x4b4>
 800b6b0:	d0ef      	beq.n	800b692 <_strtod_l+0x4fa>
 800b6b2:	4252      	negs	r2, r2
 800b6b4:	f012 000f 	ands.w	r0, r2, #15
 800b6b8:	d00a      	beq.n	800b6d0 <_strtod_l+0x538>
 800b6ba:	4912      	ldr	r1, [pc, #72]	@ (800b704 <_strtod_l+0x56c>)
 800b6bc:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b6c0:	ed91 7b00 	vldr	d7, [r1]
 800b6c4:	ec4b ab16 	vmov	d6, sl, fp
 800b6c8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b6cc:	ec5b ab17 	vmov	sl, fp, d7
 800b6d0:	1112      	asrs	r2, r2, #4
 800b6d2:	d0de      	beq.n	800b692 <_strtod_l+0x4fa>
 800b6d4:	2a1f      	cmp	r2, #31
 800b6d6:	dd1f      	ble.n	800b718 <_strtod_l+0x580>
 800b6d8:	2400      	movs	r4, #0
 800b6da:	4625      	mov	r5, r4
 800b6dc:	9407      	str	r4, [sp, #28]
 800b6de:	4626      	mov	r6, r4
 800b6e0:	9a05      	ldr	r2, [sp, #20]
 800b6e2:	2322      	movs	r3, #34	@ 0x22
 800b6e4:	f04f 0a00 	mov.w	sl, #0
 800b6e8:	f04f 0b00 	mov.w	fp, #0
 800b6ec:	6013      	str	r3, [r2, #0]
 800b6ee:	e76a      	b.n	800b5c6 <_strtod_l+0x42e>
 800b6f0:	0800d285 	.word	0x0800d285
 800b6f4:	0800d49c 	.word	0x0800d49c
 800b6f8:	0800d27d 	.word	0x0800d27d
 800b6fc:	0800d2b4 	.word	0x0800d2b4
 800b700:	0800d645 	.word	0x0800d645
 800b704:	0800d3d0 	.word	0x0800d3d0
 800b708:	0800d3a8 	.word	0x0800d3a8
 800b70c:	7ca00000 	.word	0x7ca00000
 800b710:	7ff00000 	.word	0x7ff00000
 800b714:	7fefffff 	.word	0x7fefffff
 800b718:	f012 0110 	ands.w	r1, r2, #16
 800b71c:	bf18      	it	ne
 800b71e:	216a      	movne	r1, #106	@ 0x6a
 800b720:	9106      	str	r1, [sp, #24]
 800b722:	ec4b ab17 	vmov	d7, sl, fp
 800b726:	49b0      	ldr	r1, [pc, #704]	@ (800b9e8 <_strtod_l+0x850>)
 800b728:	2000      	movs	r0, #0
 800b72a:	07d6      	lsls	r6, r2, #31
 800b72c:	d504      	bpl.n	800b738 <_strtod_l+0x5a0>
 800b72e:	ed91 6b00 	vldr	d6, [r1]
 800b732:	2001      	movs	r0, #1
 800b734:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b738:	1052      	asrs	r2, r2, #1
 800b73a:	f101 0108 	add.w	r1, r1, #8
 800b73e:	d1f4      	bne.n	800b72a <_strtod_l+0x592>
 800b740:	b108      	cbz	r0, 800b746 <_strtod_l+0x5ae>
 800b742:	ec5b ab17 	vmov	sl, fp, d7
 800b746:	9a06      	ldr	r2, [sp, #24]
 800b748:	b1b2      	cbz	r2, 800b778 <_strtod_l+0x5e0>
 800b74a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800b74e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800b752:	2a00      	cmp	r2, #0
 800b754:	4658      	mov	r0, fp
 800b756:	dd0f      	ble.n	800b778 <_strtod_l+0x5e0>
 800b758:	2a1f      	cmp	r2, #31
 800b75a:	dd55      	ble.n	800b808 <_strtod_l+0x670>
 800b75c:	2a34      	cmp	r2, #52	@ 0x34
 800b75e:	bfde      	ittt	le
 800b760:	f04f 32ff 	movle.w	r2, #4294967295
 800b764:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800b768:	408a      	lslle	r2, r1
 800b76a:	f04f 0a00 	mov.w	sl, #0
 800b76e:	bfcc      	ite	gt
 800b770:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b774:	ea02 0b00 	andle.w	fp, r2, r0
 800b778:	ec4b ab17 	vmov	d7, sl, fp
 800b77c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b784:	d0a8      	beq.n	800b6d8 <_strtod_l+0x540>
 800b786:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b788:	9805      	ldr	r0, [sp, #20]
 800b78a:	f8cd 9000 	str.w	r9, [sp]
 800b78e:	462a      	mov	r2, r5
 800b790:	f7ff f8e0 	bl	800a954 <__s2b>
 800b794:	9007      	str	r0, [sp, #28]
 800b796:	2800      	cmp	r0, #0
 800b798:	f43f af0a 	beq.w	800b5b0 <_strtod_l+0x418>
 800b79c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b79e:	1b3f      	subs	r7, r7, r4
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	bfb4      	ite	lt
 800b7a4:	463b      	movlt	r3, r7
 800b7a6:	2300      	movge	r3, #0
 800b7a8:	930a      	str	r3, [sp, #40]	@ 0x28
 800b7aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b7ac:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800b9d8 <_strtod_l+0x840>
 800b7b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b7b4:	2400      	movs	r4, #0
 800b7b6:	930d      	str	r3, [sp, #52]	@ 0x34
 800b7b8:	4625      	mov	r5, r4
 800b7ba:	9b07      	ldr	r3, [sp, #28]
 800b7bc:	9805      	ldr	r0, [sp, #20]
 800b7be:	6859      	ldr	r1, [r3, #4]
 800b7c0:	f7ff f820 	bl	800a804 <_Balloc>
 800b7c4:	4606      	mov	r6, r0
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	f43f aef6 	beq.w	800b5b8 <_strtod_l+0x420>
 800b7cc:	9b07      	ldr	r3, [sp, #28]
 800b7ce:	691a      	ldr	r2, [r3, #16]
 800b7d0:	ec4b ab19 	vmov	d9, sl, fp
 800b7d4:	3202      	adds	r2, #2
 800b7d6:	f103 010c 	add.w	r1, r3, #12
 800b7da:	0092      	lsls	r2, r2, #2
 800b7dc:	300c      	adds	r0, #12
 800b7de:	f000 fd33 	bl	800c248 <memcpy>
 800b7e2:	eeb0 0b49 	vmov.f64	d0, d9
 800b7e6:	9805      	ldr	r0, [sp, #20]
 800b7e8:	aa14      	add	r2, sp, #80	@ 0x50
 800b7ea:	a913      	add	r1, sp, #76	@ 0x4c
 800b7ec:	f7ff fbee 	bl	800afcc <__d2b>
 800b7f0:	9012      	str	r0, [sp, #72]	@ 0x48
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	f43f aee0 	beq.w	800b5b8 <_strtod_l+0x420>
 800b7f8:	9805      	ldr	r0, [sp, #20]
 800b7fa:	2101      	movs	r1, #1
 800b7fc:	f7ff f940 	bl	800aa80 <__i2b>
 800b800:	4605      	mov	r5, r0
 800b802:	b940      	cbnz	r0, 800b816 <_strtod_l+0x67e>
 800b804:	2500      	movs	r5, #0
 800b806:	e6d7      	b.n	800b5b8 <_strtod_l+0x420>
 800b808:	f04f 31ff 	mov.w	r1, #4294967295
 800b80c:	fa01 f202 	lsl.w	r2, r1, r2
 800b810:	ea02 0a0a 	and.w	sl, r2, sl
 800b814:	e7b0      	b.n	800b778 <_strtod_l+0x5e0>
 800b816:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800b818:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b81a:	2f00      	cmp	r7, #0
 800b81c:	bfab      	itete	ge
 800b81e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800b820:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800b822:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800b826:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800b82a:	bfac      	ite	ge
 800b82c:	eb07 0903 	addge.w	r9, r7, r3
 800b830:	eba3 0807 	sublt.w	r8, r3, r7
 800b834:	9b06      	ldr	r3, [sp, #24]
 800b836:	1aff      	subs	r7, r7, r3
 800b838:	4417      	add	r7, r2
 800b83a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800b83e:	4a6b      	ldr	r2, [pc, #428]	@ (800b9ec <_strtod_l+0x854>)
 800b840:	3f01      	subs	r7, #1
 800b842:	4297      	cmp	r7, r2
 800b844:	da51      	bge.n	800b8ea <_strtod_l+0x752>
 800b846:	1bd1      	subs	r1, r2, r7
 800b848:	291f      	cmp	r1, #31
 800b84a:	eba3 0301 	sub.w	r3, r3, r1
 800b84e:	f04f 0201 	mov.w	r2, #1
 800b852:	dc3e      	bgt.n	800b8d2 <_strtod_l+0x73a>
 800b854:	408a      	lsls	r2, r1
 800b856:	920c      	str	r2, [sp, #48]	@ 0x30
 800b858:	2200      	movs	r2, #0
 800b85a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b85c:	eb09 0703 	add.w	r7, r9, r3
 800b860:	4498      	add	r8, r3
 800b862:	9b06      	ldr	r3, [sp, #24]
 800b864:	45b9      	cmp	r9, r7
 800b866:	4498      	add	r8, r3
 800b868:	464b      	mov	r3, r9
 800b86a:	bfa8      	it	ge
 800b86c:	463b      	movge	r3, r7
 800b86e:	4543      	cmp	r3, r8
 800b870:	bfa8      	it	ge
 800b872:	4643      	movge	r3, r8
 800b874:	2b00      	cmp	r3, #0
 800b876:	bfc2      	ittt	gt
 800b878:	1aff      	subgt	r7, r7, r3
 800b87a:	eba8 0803 	subgt.w	r8, r8, r3
 800b87e:	eba9 0903 	subgt.w	r9, r9, r3
 800b882:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b884:	2b00      	cmp	r3, #0
 800b886:	dd16      	ble.n	800b8b6 <_strtod_l+0x71e>
 800b888:	4629      	mov	r1, r5
 800b88a:	9805      	ldr	r0, [sp, #20]
 800b88c:	461a      	mov	r2, r3
 800b88e:	f7ff f9b7 	bl	800ac00 <__pow5mult>
 800b892:	4605      	mov	r5, r0
 800b894:	2800      	cmp	r0, #0
 800b896:	d0b5      	beq.n	800b804 <_strtod_l+0x66c>
 800b898:	4601      	mov	r1, r0
 800b89a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b89c:	9805      	ldr	r0, [sp, #20]
 800b89e:	f7ff f905 	bl	800aaac <__multiply>
 800b8a2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800b8a4:	2800      	cmp	r0, #0
 800b8a6:	f43f ae87 	beq.w	800b5b8 <_strtod_l+0x420>
 800b8aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b8ac:	9805      	ldr	r0, [sp, #20]
 800b8ae:	f7fe ffe9 	bl	800a884 <_Bfree>
 800b8b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8b4:	9312      	str	r3, [sp, #72]	@ 0x48
 800b8b6:	2f00      	cmp	r7, #0
 800b8b8:	dc1b      	bgt.n	800b8f2 <_strtod_l+0x75a>
 800b8ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	dd21      	ble.n	800b904 <_strtod_l+0x76c>
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b8c4:	9805      	ldr	r0, [sp, #20]
 800b8c6:	f7ff f99b 	bl	800ac00 <__pow5mult>
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	b9d0      	cbnz	r0, 800b904 <_strtod_l+0x76c>
 800b8ce:	2600      	movs	r6, #0
 800b8d0:	e672      	b.n	800b5b8 <_strtod_l+0x420>
 800b8d2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800b8d6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800b8da:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800b8de:	37e2      	adds	r7, #226	@ 0xe2
 800b8e0:	fa02 f107 	lsl.w	r1, r2, r7
 800b8e4:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b8e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800b8e8:	e7b8      	b.n	800b85c <_strtod_l+0x6c4>
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	e7f9      	b.n	800b8e6 <_strtod_l+0x74e>
 800b8f2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b8f4:	9805      	ldr	r0, [sp, #20]
 800b8f6:	463a      	mov	r2, r7
 800b8f8:	f7ff f9dc 	bl	800acb4 <__lshift>
 800b8fc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b8fe:	2800      	cmp	r0, #0
 800b900:	d1db      	bne.n	800b8ba <_strtod_l+0x722>
 800b902:	e659      	b.n	800b5b8 <_strtod_l+0x420>
 800b904:	f1b8 0f00 	cmp.w	r8, #0
 800b908:	dd07      	ble.n	800b91a <_strtod_l+0x782>
 800b90a:	4631      	mov	r1, r6
 800b90c:	9805      	ldr	r0, [sp, #20]
 800b90e:	4642      	mov	r2, r8
 800b910:	f7ff f9d0 	bl	800acb4 <__lshift>
 800b914:	4606      	mov	r6, r0
 800b916:	2800      	cmp	r0, #0
 800b918:	d0d9      	beq.n	800b8ce <_strtod_l+0x736>
 800b91a:	f1b9 0f00 	cmp.w	r9, #0
 800b91e:	dd08      	ble.n	800b932 <_strtod_l+0x79a>
 800b920:	4629      	mov	r1, r5
 800b922:	9805      	ldr	r0, [sp, #20]
 800b924:	464a      	mov	r2, r9
 800b926:	f7ff f9c5 	bl	800acb4 <__lshift>
 800b92a:	4605      	mov	r5, r0
 800b92c:	2800      	cmp	r0, #0
 800b92e:	f43f ae43 	beq.w	800b5b8 <_strtod_l+0x420>
 800b932:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800b934:	9805      	ldr	r0, [sp, #20]
 800b936:	4632      	mov	r2, r6
 800b938:	f7ff fa44 	bl	800adc4 <__mdiff>
 800b93c:	4604      	mov	r4, r0
 800b93e:	2800      	cmp	r0, #0
 800b940:	f43f ae3a 	beq.w	800b5b8 <_strtod_l+0x420>
 800b944:	2300      	movs	r3, #0
 800b946:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800b94a:	60c3      	str	r3, [r0, #12]
 800b94c:	4629      	mov	r1, r5
 800b94e:	f7ff fa1d 	bl	800ad8c <__mcmp>
 800b952:	2800      	cmp	r0, #0
 800b954:	da4e      	bge.n	800b9f4 <_strtod_l+0x85c>
 800b956:	ea58 080a 	orrs.w	r8, r8, sl
 800b95a:	d174      	bne.n	800ba46 <_strtod_l+0x8ae>
 800b95c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b960:	2b00      	cmp	r3, #0
 800b962:	d170      	bne.n	800ba46 <_strtod_l+0x8ae>
 800b964:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b968:	0d1b      	lsrs	r3, r3, #20
 800b96a:	051b      	lsls	r3, r3, #20
 800b96c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b970:	d969      	bls.n	800ba46 <_strtod_l+0x8ae>
 800b972:	6963      	ldr	r3, [r4, #20]
 800b974:	b913      	cbnz	r3, 800b97c <_strtod_l+0x7e4>
 800b976:	6923      	ldr	r3, [r4, #16]
 800b978:	2b01      	cmp	r3, #1
 800b97a:	dd64      	ble.n	800ba46 <_strtod_l+0x8ae>
 800b97c:	4621      	mov	r1, r4
 800b97e:	2201      	movs	r2, #1
 800b980:	9805      	ldr	r0, [sp, #20]
 800b982:	f7ff f997 	bl	800acb4 <__lshift>
 800b986:	4629      	mov	r1, r5
 800b988:	4604      	mov	r4, r0
 800b98a:	f7ff f9ff 	bl	800ad8c <__mcmp>
 800b98e:	2800      	cmp	r0, #0
 800b990:	dd59      	ble.n	800ba46 <_strtod_l+0x8ae>
 800b992:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b996:	9a06      	ldr	r2, [sp, #24]
 800b998:	0d1b      	lsrs	r3, r3, #20
 800b99a:	051b      	lsls	r3, r3, #20
 800b99c:	2a00      	cmp	r2, #0
 800b99e:	d070      	beq.n	800ba82 <_strtod_l+0x8ea>
 800b9a0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b9a4:	d86d      	bhi.n	800ba82 <_strtod_l+0x8ea>
 800b9a6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b9aa:	f67f ae99 	bls.w	800b6e0 <_strtod_l+0x548>
 800b9ae:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800b9e0 <_strtod_l+0x848>
 800b9b2:	ec4b ab16 	vmov	d6, sl, fp
 800b9b6:	4b0e      	ldr	r3, [pc, #56]	@ (800b9f0 <_strtod_l+0x858>)
 800b9b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b9bc:	ee17 2a90 	vmov	r2, s15
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	ec5b ab17 	vmov	sl, fp, d7
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f47f ae01 	bne.w	800b5ce <_strtod_l+0x436>
 800b9cc:	9a05      	ldr	r2, [sp, #20]
 800b9ce:	2322      	movs	r3, #34	@ 0x22
 800b9d0:	6013      	str	r3, [r2, #0]
 800b9d2:	e5fc      	b.n	800b5ce <_strtod_l+0x436>
 800b9d4:	f3af 8000 	nop.w
 800b9d8:	ffc00000 	.word	0xffc00000
 800b9dc:	41dfffff 	.word	0x41dfffff
 800b9e0:	00000000 	.word	0x00000000
 800b9e4:	39500000 	.word	0x39500000
 800b9e8:	0800d4c8 	.word	0x0800d4c8
 800b9ec:	fffffc02 	.word	0xfffffc02
 800b9f0:	7ff00000 	.word	0x7ff00000
 800b9f4:	46d9      	mov	r9, fp
 800b9f6:	d15d      	bne.n	800bab4 <_strtod_l+0x91c>
 800b9f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b9fc:	f1b8 0f00 	cmp.w	r8, #0
 800ba00:	d02a      	beq.n	800ba58 <_strtod_l+0x8c0>
 800ba02:	4aab      	ldr	r2, [pc, #684]	@ (800bcb0 <_strtod_l+0xb18>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d12a      	bne.n	800ba5e <_strtod_l+0x8c6>
 800ba08:	9b06      	ldr	r3, [sp, #24]
 800ba0a:	4652      	mov	r2, sl
 800ba0c:	b1fb      	cbz	r3, 800ba4e <_strtod_l+0x8b6>
 800ba0e:	4ba9      	ldr	r3, [pc, #676]	@ (800bcb4 <_strtod_l+0xb1c>)
 800ba10:	ea0b 0303 	and.w	r3, fp, r3
 800ba14:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ba18:	f04f 31ff 	mov.w	r1, #4294967295
 800ba1c:	d81a      	bhi.n	800ba54 <_strtod_l+0x8bc>
 800ba1e:	0d1b      	lsrs	r3, r3, #20
 800ba20:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ba24:	fa01 f303 	lsl.w	r3, r1, r3
 800ba28:	429a      	cmp	r2, r3
 800ba2a:	d118      	bne.n	800ba5e <_strtod_l+0x8c6>
 800ba2c:	4ba2      	ldr	r3, [pc, #648]	@ (800bcb8 <_strtod_l+0xb20>)
 800ba2e:	4599      	cmp	r9, r3
 800ba30:	d102      	bne.n	800ba38 <_strtod_l+0x8a0>
 800ba32:	3201      	adds	r2, #1
 800ba34:	f43f adc0 	beq.w	800b5b8 <_strtod_l+0x420>
 800ba38:	4b9e      	ldr	r3, [pc, #632]	@ (800bcb4 <_strtod_l+0xb1c>)
 800ba3a:	ea09 0303 	and.w	r3, r9, r3
 800ba3e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800ba42:	f04f 0a00 	mov.w	sl, #0
 800ba46:	9b06      	ldr	r3, [sp, #24]
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1b0      	bne.n	800b9ae <_strtod_l+0x816>
 800ba4c:	e5bf      	b.n	800b5ce <_strtod_l+0x436>
 800ba4e:	f04f 33ff 	mov.w	r3, #4294967295
 800ba52:	e7e9      	b.n	800ba28 <_strtod_l+0x890>
 800ba54:	460b      	mov	r3, r1
 800ba56:	e7e7      	b.n	800ba28 <_strtod_l+0x890>
 800ba58:	ea53 030a 	orrs.w	r3, r3, sl
 800ba5c:	d099      	beq.n	800b992 <_strtod_l+0x7fa>
 800ba5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ba60:	b1c3      	cbz	r3, 800ba94 <_strtod_l+0x8fc>
 800ba62:	ea13 0f09 	tst.w	r3, r9
 800ba66:	d0ee      	beq.n	800ba46 <_strtod_l+0x8ae>
 800ba68:	9a06      	ldr	r2, [sp, #24]
 800ba6a:	4650      	mov	r0, sl
 800ba6c:	4659      	mov	r1, fp
 800ba6e:	f1b8 0f00 	cmp.w	r8, #0
 800ba72:	d013      	beq.n	800ba9c <_strtod_l+0x904>
 800ba74:	f7ff fb75 	bl	800b162 <sulp>
 800ba78:	ee39 7b00 	vadd.f64	d7, d9, d0
 800ba7c:	ec5b ab17 	vmov	sl, fp, d7
 800ba80:	e7e1      	b.n	800ba46 <_strtod_l+0x8ae>
 800ba82:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800ba86:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ba8a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ba8e:	f04f 3aff 	mov.w	sl, #4294967295
 800ba92:	e7d8      	b.n	800ba46 <_strtod_l+0x8ae>
 800ba94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ba96:	ea13 0f0a 	tst.w	r3, sl
 800ba9a:	e7e4      	b.n	800ba66 <_strtod_l+0x8ce>
 800ba9c:	f7ff fb61 	bl	800b162 <sulp>
 800baa0:	ee39 0b40 	vsub.f64	d0, d9, d0
 800baa4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800baa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baac:	ec5b ab10 	vmov	sl, fp, d0
 800bab0:	d1c9      	bne.n	800ba46 <_strtod_l+0x8ae>
 800bab2:	e615      	b.n	800b6e0 <_strtod_l+0x548>
 800bab4:	4629      	mov	r1, r5
 800bab6:	4620      	mov	r0, r4
 800bab8:	f7ff fae0 	bl	800b07c <__ratio>
 800babc:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800bac0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800bac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac8:	d85d      	bhi.n	800bb86 <_strtod_l+0x9ee>
 800baca:	f1b8 0f00 	cmp.w	r8, #0
 800bace:	d164      	bne.n	800bb9a <_strtod_l+0xa02>
 800bad0:	f1ba 0f00 	cmp.w	sl, #0
 800bad4:	d14b      	bne.n	800bb6e <_strtod_l+0x9d6>
 800bad6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bada:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d160      	bne.n	800bba4 <_strtod_l+0xa0c>
 800bae2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800bae6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800baea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baee:	d401      	bmi.n	800baf4 <_strtod_l+0x95c>
 800baf0:	ee20 8b08 	vmul.f64	d8, d0, d8
 800baf4:	eeb1 ab48 	vneg.f64	d10, d8
 800baf8:	486e      	ldr	r0, [pc, #440]	@ (800bcb4 <_strtod_l+0xb1c>)
 800bafa:	4970      	ldr	r1, [pc, #448]	@ (800bcbc <_strtod_l+0xb24>)
 800bafc:	ea09 0700 	and.w	r7, r9, r0
 800bb00:	428f      	cmp	r7, r1
 800bb02:	ec53 2b1a 	vmov	r2, r3, d10
 800bb06:	d17d      	bne.n	800bc04 <_strtod_l+0xa6c>
 800bb08:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800bb0c:	ec4b ab1c 	vmov	d12, sl, fp
 800bb10:	eeb0 0b4c 	vmov.f64	d0, d12
 800bb14:	f7ff f9ea 	bl	800aeec <__ulp>
 800bb18:	4866      	ldr	r0, [pc, #408]	@ (800bcb4 <_strtod_l+0xb1c>)
 800bb1a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800bb1e:	ee1c 3a90 	vmov	r3, s25
 800bb22:	4a67      	ldr	r2, [pc, #412]	@ (800bcc0 <_strtod_l+0xb28>)
 800bb24:	ea03 0100 	and.w	r1, r3, r0
 800bb28:	4291      	cmp	r1, r2
 800bb2a:	ec5b ab1c 	vmov	sl, fp, d12
 800bb2e:	d93c      	bls.n	800bbaa <_strtod_l+0xa12>
 800bb30:	ee19 2a90 	vmov	r2, s19
 800bb34:	4b60      	ldr	r3, [pc, #384]	@ (800bcb8 <_strtod_l+0xb20>)
 800bb36:	429a      	cmp	r2, r3
 800bb38:	d104      	bne.n	800bb44 <_strtod_l+0x9ac>
 800bb3a:	ee19 3a10 	vmov	r3, s18
 800bb3e:	3301      	adds	r3, #1
 800bb40:	f43f ad3a 	beq.w	800b5b8 <_strtod_l+0x420>
 800bb44:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800bcb8 <_strtod_l+0xb20>
 800bb48:	f04f 3aff 	mov.w	sl, #4294967295
 800bb4c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800bb4e:	9805      	ldr	r0, [sp, #20]
 800bb50:	f7fe fe98 	bl	800a884 <_Bfree>
 800bb54:	9805      	ldr	r0, [sp, #20]
 800bb56:	4631      	mov	r1, r6
 800bb58:	f7fe fe94 	bl	800a884 <_Bfree>
 800bb5c:	9805      	ldr	r0, [sp, #20]
 800bb5e:	4629      	mov	r1, r5
 800bb60:	f7fe fe90 	bl	800a884 <_Bfree>
 800bb64:	9805      	ldr	r0, [sp, #20]
 800bb66:	4621      	mov	r1, r4
 800bb68:	f7fe fe8c 	bl	800a884 <_Bfree>
 800bb6c:	e625      	b.n	800b7ba <_strtod_l+0x622>
 800bb6e:	f1ba 0f01 	cmp.w	sl, #1
 800bb72:	d103      	bne.n	800bb7c <_strtod_l+0x9e4>
 800bb74:	f1bb 0f00 	cmp.w	fp, #0
 800bb78:	f43f adb2 	beq.w	800b6e0 <_strtod_l+0x548>
 800bb7c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800bb80:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800bb84:	e7b8      	b.n	800baf8 <_strtod_l+0x960>
 800bb86:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800bb8a:	ee20 8b08 	vmul.f64	d8, d0, d8
 800bb8e:	f1b8 0f00 	cmp.w	r8, #0
 800bb92:	d0af      	beq.n	800baf4 <_strtod_l+0x95c>
 800bb94:	eeb0 ab48 	vmov.f64	d10, d8
 800bb98:	e7ae      	b.n	800baf8 <_strtod_l+0x960>
 800bb9a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800bb9e:	eeb0 8b4a 	vmov.f64	d8, d10
 800bba2:	e7a9      	b.n	800baf8 <_strtod_l+0x960>
 800bba4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800bba8:	e7a6      	b.n	800baf8 <_strtod_l+0x960>
 800bbaa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800bbae:	9b06      	ldr	r3, [sp, #24]
 800bbb0:	46d9      	mov	r9, fp
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d1ca      	bne.n	800bb4c <_strtod_l+0x9b4>
 800bbb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800bbba:	0d1b      	lsrs	r3, r3, #20
 800bbbc:	051b      	lsls	r3, r3, #20
 800bbbe:	429f      	cmp	r7, r3
 800bbc0:	d1c4      	bne.n	800bb4c <_strtod_l+0x9b4>
 800bbc2:	ec51 0b18 	vmov	r0, r1, d8
 800bbc6:	f7f4 fd67 	bl	8000698 <__aeabi_d2lz>
 800bbca:	f7f4 fd1f 	bl	800060c <__aeabi_l2d>
 800bbce:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800bbd2:	ec41 0b17 	vmov	d7, r0, r1
 800bbd6:	ea49 090a 	orr.w	r9, r9, sl
 800bbda:	ea59 0908 	orrs.w	r9, r9, r8
 800bbde:	ee38 8b47 	vsub.f64	d8, d8, d7
 800bbe2:	d03c      	beq.n	800bc5e <_strtod_l+0xac6>
 800bbe4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800bc98 <_strtod_l+0xb00>
 800bbe8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbf0:	f53f aced 	bmi.w	800b5ce <_strtod_l+0x436>
 800bbf4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800bca0 <_strtod_l+0xb08>
 800bbf8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bbfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc00:	dda4      	ble.n	800bb4c <_strtod_l+0x9b4>
 800bc02:	e4e4      	b.n	800b5ce <_strtod_l+0x436>
 800bc04:	9906      	ldr	r1, [sp, #24]
 800bc06:	b1e1      	cbz	r1, 800bc42 <_strtod_l+0xaaa>
 800bc08:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800bc0c:	d819      	bhi.n	800bc42 <_strtod_l+0xaaa>
 800bc0e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800bc12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc16:	d811      	bhi.n	800bc3c <_strtod_l+0xaa4>
 800bc18:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800bc1c:	ee18 3a10 	vmov	r3, s16
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	bf38      	it	cc
 800bc24:	2301      	movcc	r3, #1
 800bc26:	ee08 3a10 	vmov	s16, r3
 800bc2a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800bc2e:	f1b8 0f00 	cmp.w	r8, #0
 800bc32:	d111      	bne.n	800bc58 <_strtod_l+0xac0>
 800bc34:	eeb1 7b48 	vneg.f64	d7, d8
 800bc38:	ec53 2b17 	vmov	r2, r3, d7
 800bc3c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800bc40:	1bcb      	subs	r3, r1, r7
 800bc42:	eeb0 0b49 	vmov.f64	d0, d9
 800bc46:	ec43 2b1a 	vmov	d10, r2, r3
 800bc4a:	f7ff f94f 	bl	800aeec <__ulp>
 800bc4e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800bc52:	ec5b ab19 	vmov	sl, fp, d9
 800bc56:	e7aa      	b.n	800bbae <_strtod_l+0xa16>
 800bc58:	eeb0 7b48 	vmov.f64	d7, d8
 800bc5c:	e7ec      	b.n	800bc38 <_strtod_l+0xaa0>
 800bc5e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800bca8 <_strtod_l+0xb10>
 800bc62:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800bc66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc6a:	f57f af6f 	bpl.w	800bb4c <_strtod_l+0x9b4>
 800bc6e:	e4ae      	b.n	800b5ce <_strtod_l+0x436>
 800bc70:	2300      	movs	r3, #0
 800bc72:	9308      	str	r3, [sp, #32]
 800bc74:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bc76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800bc78:	6013      	str	r3, [r2, #0]
 800bc7a:	f7ff bacc 	b.w	800b216 <_strtod_l+0x7e>
 800bc7e:	2a65      	cmp	r2, #101	@ 0x65
 800bc80:	f43f abbc 	beq.w	800b3fc <_strtod_l+0x264>
 800bc84:	2a45      	cmp	r2, #69	@ 0x45
 800bc86:	f43f abb9 	beq.w	800b3fc <_strtod_l+0x264>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	9306      	str	r3, [sp, #24]
 800bc8e:	f7ff bbf0 	b.w	800b472 <_strtod_l+0x2da>
 800bc92:	bf00      	nop
 800bc94:	f3af 8000 	nop.w
 800bc98:	94a03595 	.word	0x94a03595
 800bc9c:	3fdfffff 	.word	0x3fdfffff
 800bca0:	35afe535 	.word	0x35afe535
 800bca4:	3fe00000 	.word	0x3fe00000
 800bca8:	94a03595 	.word	0x94a03595
 800bcac:	3fcfffff 	.word	0x3fcfffff
 800bcb0:	000fffff 	.word	0x000fffff
 800bcb4:	7ff00000 	.word	0x7ff00000
 800bcb8:	7fefffff 	.word	0x7fefffff
 800bcbc:	7fe00000 	.word	0x7fe00000
 800bcc0:	7c9fffff 	.word	0x7c9fffff

0800bcc4 <_strtod_r>:
 800bcc4:	4b01      	ldr	r3, [pc, #4]	@ (800bccc <_strtod_r+0x8>)
 800bcc6:	f7ff ba67 	b.w	800b198 <_strtod_l>
 800bcca:	bf00      	nop
 800bccc:	2000009c 	.word	0x2000009c

0800bcd0 <_strtol_l.constprop.0>:
 800bcd0:	2b24      	cmp	r3, #36	@ 0x24
 800bcd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcd6:	4686      	mov	lr, r0
 800bcd8:	4690      	mov	r8, r2
 800bcda:	d801      	bhi.n	800bce0 <_strtol_l.constprop.0+0x10>
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d106      	bne.n	800bcee <_strtol_l.constprop.0+0x1e>
 800bce0:	f7fd fe7e 	bl	80099e0 <__errno>
 800bce4:	2316      	movs	r3, #22
 800bce6:	6003      	str	r3, [r0, #0]
 800bce8:	2000      	movs	r0, #0
 800bcea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcee:	4834      	ldr	r0, [pc, #208]	@ (800bdc0 <_strtol_l.constprop.0+0xf0>)
 800bcf0:	460d      	mov	r5, r1
 800bcf2:	462a      	mov	r2, r5
 800bcf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bcf8:	5d06      	ldrb	r6, [r0, r4]
 800bcfa:	f016 0608 	ands.w	r6, r6, #8
 800bcfe:	d1f8      	bne.n	800bcf2 <_strtol_l.constprop.0+0x22>
 800bd00:	2c2d      	cmp	r4, #45	@ 0x2d
 800bd02:	d12d      	bne.n	800bd60 <_strtol_l.constprop.0+0x90>
 800bd04:	782c      	ldrb	r4, [r5, #0]
 800bd06:	2601      	movs	r6, #1
 800bd08:	1c95      	adds	r5, r2, #2
 800bd0a:	f033 0210 	bics.w	r2, r3, #16
 800bd0e:	d109      	bne.n	800bd24 <_strtol_l.constprop.0+0x54>
 800bd10:	2c30      	cmp	r4, #48	@ 0x30
 800bd12:	d12a      	bne.n	800bd6a <_strtol_l.constprop.0+0x9a>
 800bd14:	782a      	ldrb	r2, [r5, #0]
 800bd16:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800bd1a:	2a58      	cmp	r2, #88	@ 0x58
 800bd1c:	d125      	bne.n	800bd6a <_strtol_l.constprop.0+0x9a>
 800bd1e:	786c      	ldrb	r4, [r5, #1]
 800bd20:	2310      	movs	r3, #16
 800bd22:	3502      	adds	r5, #2
 800bd24:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800bd28:	f10c 3cff 	add.w	ip, ip, #4294967295
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	fbbc f9f3 	udiv	r9, ip, r3
 800bd32:	4610      	mov	r0, r2
 800bd34:	fb03 ca19 	mls	sl, r3, r9, ip
 800bd38:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800bd3c:	2f09      	cmp	r7, #9
 800bd3e:	d81b      	bhi.n	800bd78 <_strtol_l.constprop.0+0xa8>
 800bd40:	463c      	mov	r4, r7
 800bd42:	42a3      	cmp	r3, r4
 800bd44:	dd27      	ble.n	800bd96 <_strtol_l.constprop.0+0xc6>
 800bd46:	1c57      	adds	r7, r2, #1
 800bd48:	d007      	beq.n	800bd5a <_strtol_l.constprop.0+0x8a>
 800bd4a:	4581      	cmp	r9, r0
 800bd4c:	d320      	bcc.n	800bd90 <_strtol_l.constprop.0+0xc0>
 800bd4e:	d101      	bne.n	800bd54 <_strtol_l.constprop.0+0x84>
 800bd50:	45a2      	cmp	sl, r4
 800bd52:	db1d      	blt.n	800bd90 <_strtol_l.constprop.0+0xc0>
 800bd54:	fb00 4003 	mla	r0, r0, r3, r4
 800bd58:	2201      	movs	r2, #1
 800bd5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bd5e:	e7eb      	b.n	800bd38 <_strtol_l.constprop.0+0x68>
 800bd60:	2c2b      	cmp	r4, #43	@ 0x2b
 800bd62:	bf04      	itt	eq
 800bd64:	782c      	ldrbeq	r4, [r5, #0]
 800bd66:	1c95      	addeq	r5, r2, #2
 800bd68:	e7cf      	b.n	800bd0a <_strtol_l.constprop.0+0x3a>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1da      	bne.n	800bd24 <_strtol_l.constprop.0+0x54>
 800bd6e:	2c30      	cmp	r4, #48	@ 0x30
 800bd70:	bf0c      	ite	eq
 800bd72:	2308      	moveq	r3, #8
 800bd74:	230a      	movne	r3, #10
 800bd76:	e7d5      	b.n	800bd24 <_strtol_l.constprop.0+0x54>
 800bd78:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800bd7c:	2f19      	cmp	r7, #25
 800bd7e:	d801      	bhi.n	800bd84 <_strtol_l.constprop.0+0xb4>
 800bd80:	3c37      	subs	r4, #55	@ 0x37
 800bd82:	e7de      	b.n	800bd42 <_strtol_l.constprop.0+0x72>
 800bd84:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800bd88:	2f19      	cmp	r7, #25
 800bd8a:	d804      	bhi.n	800bd96 <_strtol_l.constprop.0+0xc6>
 800bd8c:	3c57      	subs	r4, #87	@ 0x57
 800bd8e:	e7d8      	b.n	800bd42 <_strtol_l.constprop.0+0x72>
 800bd90:	f04f 32ff 	mov.w	r2, #4294967295
 800bd94:	e7e1      	b.n	800bd5a <_strtol_l.constprop.0+0x8a>
 800bd96:	1c53      	adds	r3, r2, #1
 800bd98:	d108      	bne.n	800bdac <_strtol_l.constprop.0+0xdc>
 800bd9a:	2322      	movs	r3, #34	@ 0x22
 800bd9c:	f8ce 3000 	str.w	r3, [lr]
 800bda0:	4660      	mov	r0, ip
 800bda2:	f1b8 0f00 	cmp.w	r8, #0
 800bda6:	d0a0      	beq.n	800bcea <_strtol_l.constprop.0+0x1a>
 800bda8:	1e69      	subs	r1, r5, #1
 800bdaa:	e006      	b.n	800bdba <_strtol_l.constprop.0+0xea>
 800bdac:	b106      	cbz	r6, 800bdb0 <_strtol_l.constprop.0+0xe0>
 800bdae:	4240      	negs	r0, r0
 800bdb0:	f1b8 0f00 	cmp.w	r8, #0
 800bdb4:	d099      	beq.n	800bcea <_strtol_l.constprop.0+0x1a>
 800bdb6:	2a00      	cmp	r2, #0
 800bdb8:	d1f6      	bne.n	800bda8 <_strtol_l.constprop.0+0xd8>
 800bdba:	f8c8 1000 	str.w	r1, [r8]
 800bdbe:	e794      	b.n	800bcea <_strtol_l.constprop.0+0x1a>
 800bdc0:	0800d4f1 	.word	0x0800d4f1

0800bdc4 <_strtol_r>:
 800bdc4:	f7ff bf84 	b.w	800bcd0 <_strtol_l.constprop.0>

0800bdc8 <__ssputs_r>:
 800bdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdcc:	688e      	ldr	r6, [r1, #8]
 800bdce:	461f      	mov	r7, r3
 800bdd0:	42be      	cmp	r6, r7
 800bdd2:	680b      	ldr	r3, [r1, #0]
 800bdd4:	4682      	mov	sl, r0
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	4690      	mov	r8, r2
 800bdda:	d82d      	bhi.n	800be38 <__ssputs_r+0x70>
 800bddc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bde0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bde4:	d026      	beq.n	800be34 <__ssputs_r+0x6c>
 800bde6:	6965      	ldr	r5, [r4, #20]
 800bde8:	6909      	ldr	r1, [r1, #16]
 800bdea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdee:	eba3 0901 	sub.w	r9, r3, r1
 800bdf2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdf6:	1c7b      	adds	r3, r7, #1
 800bdf8:	444b      	add	r3, r9
 800bdfa:	106d      	asrs	r5, r5, #1
 800bdfc:	429d      	cmp	r5, r3
 800bdfe:	bf38      	it	cc
 800be00:	461d      	movcc	r5, r3
 800be02:	0553      	lsls	r3, r2, #21
 800be04:	d527      	bpl.n	800be56 <__ssputs_r+0x8e>
 800be06:	4629      	mov	r1, r5
 800be08:	f7fe fc70 	bl	800a6ec <_malloc_r>
 800be0c:	4606      	mov	r6, r0
 800be0e:	b360      	cbz	r0, 800be6a <__ssputs_r+0xa2>
 800be10:	6921      	ldr	r1, [r4, #16]
 800be12:	464a      	mov	r2, r9
 800be14:	f000 fa18 	bl	800c248 <memcpy>
 800be18:	89a3      	ldrh	r3, [r4, #12]
 800be1a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800be1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be22:	81a3      	strh	r3, [r4, #12]
 800be24:	6126      	str	r6, [r4, #16]
 800be26:	6165      	str	r5, [r4, #20]
 800be28:	444e      	add	r6, r9
 800be2a:	eba5 0509 	sub.w	r5, r5, r9
 800be2e:	6026      	str	r6, [r4, #0]
 800be30:	60a5      	str	r5, [r4, #8]
 800be32:	463e      	mov	r6, r7
 800be34:	42be      	cmp	r6, r7
 800be36:	d900      	bls.n	800be3a <__ssputs_r+0x72>
 800be38:	463e      	mov	r6, r7
 800be3a:	6820      	ldr	r0, [r4, #0]
 800be3c:	4632      	mov	r2, r6
 800be3e:	4641      	mov	r1, r8
 800be40:	f000 f9c6 	bl	800c1d0 <memmove>
 800be44:	68a3      	ldr	r3, [r4, #8]
 800be46:	1b9b      	subs	r3, r3, r6
 800be48:	60a3      	str	r3, [r4, #8]
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	4433      	add	r3, r6
 800be4e:	6023      	str	r3, [r4, #0]
 800be50:	2000      	movs	r0, #0
 800be52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be56:	462a      	mov	r2, r5
 800be58:	f000 fd8b 	bl	800c972 <_realloc_r>
 800be5c:	4606      	mov	r6, r0
 800be5e:	2800      	cmp	r0, #0
 800be60:	d1e0      	bne.n	800be24 <__ssputs_r+0x5c>
 800be62:	6921      	ldr	r1, [r4, #16]
 800be64:	4650      	mov	r0, sl
 800be66:	f7fe fbcd 	bl	800a604 <_free_r>
 800be6a:	230c      	movs	r3, #12
 800be6c:	f8ca 3000 	str.w	r3, [sl]
 800be70:	89a3      	ldrh	r3, [r4, #12]
 800be72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be76:	81a3      	strh	r3, [r4, #12]
 800be78:	f04f 30ff 	mov.w	r0, #4294967295
 800be7c:	e7e9      	b.n	800be52 <__ssputs_r+0x8a>
	...

0800be80 <_svfiprintf_r>:
 800be80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	4698      	mov	r8, r3
 800be86:	898b      	ldrh	r3, [r1, #12]
 800be88:	061b      	lsls	r3, r3, #24
 800be8a:	b09d      	sub	sp, #116	@ 0x74
 800be8c:	4607      	mov	r7, r0
 800be8e:	460d      	mov	r5, r1
 800be90:	4614      	mov	r4, r2
 800be92:	d510      	bpl.n	800beb6 <_svfiprintf_r+0x36>
 800be94:	690b      	ldr	r3, [r1, #16]
 800be96:	b973      	cbnz	r3, 800beb6 <_svfiprintf_r+0x36>
 800be98:	2140      	movs	r1, #64	@ 0x40
 800be9a:	f7fe fc27 	bl	800a6ec <_malloc_r>
 800be9e:	6028      	str	r0, [r5, #0]
 800bea0:	6128      	str	r0, [r5, #16]
 800bea2:	b930      	cbnz	r0, 800beb2 <_svfiprintf_r+0x32>
 800bea4:	230c      	movs	r3, #12
 800bea6:	603b      	str	r3, [r7, #0]
 800bea8:	f04f 30ff 	mov.w	r0, #4294967295
 800beac:	b01d      	add	sp, #116	@ 0x74
 800beae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb2:	2340      	movs	r3, #64	@ 0x40
 800beb4:	616b      	str	r3, [r5, #20]
 800beb6:	2300      	movs	r3, #0
 800beb8:	9309      	str	r3, [sp, #36]	@ 0x24
 800beba:	2320      	movs	r3, #32
 800bebc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bec0:	f8cd 800c 	str.w	r8, [sp, #12]
 800bec4:	2330      	movs	r3, #48	@ 0x30
 800bec6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c064 <_svfiprintf_r+0x1e4>
 800beca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bece:	f04f 0901 	mov.w	r9, #1
 800bed2:	4623      	mov	r3, r4
 800bed4:	469a      	mov	sl, r3
 800bed6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800beda:	b10a      	cbz	r2, 800bee0 <_svfiprintf_r+0x60>
 800bedc:	2a25      	cmp	r2, #37	@ 0x25
 800bede:	d1f9      	bne.n	800bed4 <_svfiprintf_r+0x54>
 800bee0:	ebba 0b04 	subs.w	fp, sl, r4
 800bee4:	d00b      	beq.n	800befe <_svfiprintf_r+0x7e>
 800bee6:	465b      	mov	r3, fp
 800bee8:	4622      	mov	r2, r4
 800beea:	4629      	mov	r1, r5
 800beec:	4638      	mov	r0, r7
 800beee:	f7ff ff6b 	bl	800bdc8 <__ssputs_r>
 800bef2:	3001      	adds	r0, #1
 800bef4:	f000 80a7 	beq.w	800c046 <_svfiprintf_r+0x1c6>
 800bef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800befa:	445a      	add	r2, fp
 800befc:	9209      	str	r2, [sp, #36]	@ 0x24
 800befe:	f89a 3000 	ldrb.w	r3, [sl]
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	f000 809f 	beq.w	800c046 <_svfiprintf_r+0x1c6>
 800bf08:	2300      	movs	r3, #0
 800bf0a:	f04f 32ff 	mov.w	r2, #4294967295
 800bf0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bf12:	f10a 0a01 	add.w	sl, sl, #1
 800bf16:	9304      	str	r3, [sp, #16]
 800bf18:	9307      	str	r3, [sp, #28]
 800bf1a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bf1e:	931a      	str	r3, [sp, #104]	@ 0x68
 800bf20:	4654      	mov	r4, sl
 800bf22:	2205      	movs	r2, #5
 800bf24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf28:	484e      	ldr	r0, [pc, #312]	@ (800c064 <_svfiprintf_r+0x1e4>)
 800bf2a:	f7f4 f989 	bl	8000240 <memchr>
 800bf2e:	9a04      	ldr	r2, [sp, #16]
 800bf30:	b9d8      	cbnz	r0, 800bf6a <_svfiprintf_r+0xea>
 800bf32:	06d0      	lsls	r0, r2, #27
 800bf34:	bf44      	itt	mi
 800bf36:	2320      	movmi	r3, #32
 800bf38:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf3c:	0711      	lsls	r1, r2, #28
 800bf3e:	bf44      	itt	mi
 800bf40:	232b      	movmi	r3, #43	@ 0x2b
 800bf42:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf46:	f89a 3000 	ldrb.w	r3, [sl]
 800bf4a:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf4c:	d015      	beq.n	800bf7a <_svfiprintf_r+0xfa>
 800bf4e:	9a07      	ldr	r2, [sp, #28]
 800bf50:	4654      	mov	r4, sl
 800bf52:	2000      	movs	r0, #0
 800bf54:	f04f 0c0a 	mov.w	ip, #10
 800bf58:	4621      	mov	r1, r4
 800bf5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf5e:	3b30      	subs	r3, #48	@ 0x30
 800bf60:	2b09      	cmp	r3, #9
 800bf62:	d94b      	bls.n	800bffc <_svfiprintf_r+0x17c>
 800bf64:	b1b0      	cbz	r0, 800bf94 <_svfiprintf_r+0x114>
 800bf66:	9207      	str	r2, [sp, #28]
 800bf68:	e014      	b.n	800bf94 <_svfiprintf_r+0x114>
 800bf6a:	eba0 0308 	sub.w	r3, r0, r8
 800bf6e:	fa09 f303 	lsl.w	r3, r9, r3
 800bf72:	4313      	orrs	r3, r2
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	46a2      	mov	sl, r4
 800bf78:	e7d2      	b.n	800bf20 <_svfiprintf_r+0xa0>
 800bf7a:	9b03      	ldr	r3, [sp, #12]
 800bf7c:	1d19      	adds	r1, r3, #4
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	9103      	str	r1, [sp, #12]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	bfbb      	ittet	lt
 800bf86:	425b      	neglt	r3, r3
 800bf88:	f042 0202 	orrlt.w	r2, r2, #2
 800bf8c:	9307      	strge	r3, [sp, #28]
 800bf8e:	9307      	strlt	r3, [sp, #28]
 800bf90:	bfb8      	it	lt
 800bf92:	9204      	strlt	r2, [sp, #16]
 800bf94:	7823      	ldrb	r3, [r4, #0]
 800bf96:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf98:	d10a      	bne.n	800bfb0 <_svfiprintf_r+0x130>
 800bf9a:	7863      	ldrb	r3, [r4, #1]
 800bf9c:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf9e:	d132      	bne.n	800c006 <_svfiprintf_r+0x186>
 800bfa0:	9b03      	ldr	r3, [sp, #12]
 800bfa2:	1d1a      	adds	r2, r3, #4
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	9203      	str	r2, [sp, #12]
 800bfa8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bfac:	3402      	adds	r4, #2
 800bfae:	9305      	str	r3, [sp, #20]
 800bfb0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c074 <_svfiprintf_r+0x1f4>
 800bfb4:	7821      	ldrb	r1, [r4, #0]
 800bfb6:	2203      	movs	r2, #3
 800bfb8:	4650      	mov	r0, sl
 800bfba:	f7f4 f941 	bl	8000240 <memchr>
 800bfbe:	b138      	cbz	r0, 800bfd0 <_svfiprintf_r+0x150>
 800bfc0:	9b04      	ldr	r3, [sp, #16]
 800bfc2:	eba0 000a 	sub.w	r0, r0, sl
 800bfc6:	2240      	movs	r2, #64	@ 0x40
 800bfc8:	4082      	lsls	r2, r0
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	3401      	adds	r4, #1
 800bfce:	9304      	str	r3, [sp, #16]
 800bfd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bfd4:	4824      	ldr	r0, [pc, #144]	@ (800c068 <_svfiprintf_r+0x1e8>)
 800bfd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bfda:	2206      	movs	r2, #6
 800bfdc:	f7f4 f930 	bl	8000240 <memchr>
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	d036      	beq.n	800c052 <_svfiprintf_r+0x1d2>
 800bfe4:	4b21      	ldr	r3, [pc, #132]	@ (800c06c <_svfiprintf_r+0x1ec>)
 800bfe6:	bb1b      	cbnz	r3, 800c030 <_svfiprintf_r+0x1b0>
 800bfe8:	9b03      	ldr	r3, [sp, #12]
 800bfea:	3307      	adds	r3, #7
 800bfec:	f023 0307 	bic.w	r3, r3, #7
 800bff0:	3308      	adds	r3, #8
 800bff2:	9303      	str	r3, [sp, #12]
 800bff4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff6:	4433      	add	r3, r6
 800bff8:	9309      	str	r3, [sp, #36]	@ 0x24
 800bffa:	e76a      	b.n	800bed2 <_svfiprintf_r+0x52>
 800bffc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c000:	460c      	mov	r4, r1
 800c002:	2001      	movs	r0, #1
 800c004:	e7a8      	b.n	800bf58 <_svfiprintf_r+0xd8>
 800c006:	2300      	movs	r3, #0
 800c008:	3401      	adds	r4, #1
 800c00a:	9305      	str	r3, [sp, #20]
 800c00c:	4619      	mov	r1, r3
 800c00e:	f04f 0c0a 	mov.w	ip, #10
 800c012:	4620      	mov	r0, r4
 800c014:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c018:	3a30      	subs	r2, #48	@ 0x30
 800c01a:	2a09      	cmp	r2, #9
 800c01c:	d903      	bls.n	800c026 <_svfiprintf_r+0x1a6>
 800c01e:	2b00      	cmp	r3, #0
 800c020:	d0c6      	beq.n	800bfb0 <_svfiprintf_r+0x130>
 800c022:	9105      	str	r1, [sp, #20]
 800c024:	e7c4      	b.n	800bfb0 <_svfiprintf_r+0x130>
 800c026:	fb0c 2101 	mla	r1, ip, r1, r2
 800c02a:	4604      	mov	r4, r0
 800c02c:	2301      	movs	r3, #1
 800c02e:	e7f0      	b.n	800c012 <_svfiprintf_r+0x192>
 800c030:	ab03      	add	r3, sp, #12
 800c032:	9300      	str	r3, [sp, #0]
 800c034:	462a      	mov	r2, r5
 800c036:	4b0e      	ldr	r3, [pc, #56]	@ (800c070 <_svfiprintf_r+0x1f0>)
 800c038:	a904      	add	r1, sp, #16
 800c03a:	4638      	mov	r0, r7
 800c03c:	f7fc fda4 	bl	8008b88 <_printf_float>
 800c040:	1c42      	adds	r2, r0, #1
 800c042:	4606      	mov	r6, r0
 800c044:	d1d6      	bne.n	800bff4 <_svfiprintf_r+0x174>
 800c046:	89ab      	ldrh	r3, [r5, #12]
 800c048:	065b      	lsls	r3, r3, #25
 800c04a:	f53f af2d 	bmi.w	800bea8 <_svfiprintf_r+0x28>
 800c04e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c050:	e72c      	b.n	800beac <_svfiprintf_r+0x2c>
 800c052:	ab03      	add	r3, sp, #12
 800c054:	9300      	str	r3, [sp, #0]
 800c056:	462a      	mov	r2, r5
 800c058:	4b05      	ldr	r3, [pc, #20]	@ (800c070 <_svfiprintf_r+0x1f0>)
 800c05a:	a904      	add	r1, sp, #16
 800c05c:	4638      	mov	r0, r7
 800c05e:	f7fd f81b 	bl	8009098 <_printf_i>
 800c062:	e7ed      	b.n	800c040 <_svfiprintf_r+0x1c0>
 800c064:	0800d5f1 	.word	0x0800d5f1
 800c068:	0800d5fb 	.word	0x0800d5fb
 800c06c:	08008b89 	.word	0x08008b89
 800c070:	0800bdc9 	.word	0x0800bdc9
 800c074:	0800d5f7 	.word	0x0800d5f7

0800c078 <__sflush_r>:
 800c078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c080:	0716      	lsls	r6, r2, #28
 800c082:	4605      	mov	r5, r0
 800c084:	460c      	mov	r4, r1
 800c086:	d454      	bmi.n	800c132 <__sflush_r+0xba>
 800c088:	684b      	ldr	r3, [r1, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	dc02      	bgt.n	800c094 <__sflush_r+0x1c>
 800c08e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c090:	2b00      	cmp	r3, #0
 800c092:	dd48      	ble.n	800c126 <__sflush_r+0xae>
 800c094:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c096:	2e00      	cmp	r6, #0
 800c098:	d045      	beq.n	800c126 <__sflush_r+0xae>
 800c09a:	2300      	movs	r3, #0
 800c09c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c0a0:	682f      	ldr	r7, [r5, #0]
 800c0a2:	6a21      	ldr	r1, [r4, #32]
 800c0a4:	602b      	str	r3, [r5, #0]
 800c0a6:	d030      	beq.n	800c10a <__sflush_r+0x92>
 800c0a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c0aa:	89a3      	ldrh	r3, [r4, #12]
 800c0ac:	0759      	lsls	r1, r3, #29
 800c0ae:	d505      	bpl.n	800c0bc <__sflush_r+0x44>
 800c0b0:	6863      	ldr	r3, [r4, #4]
 800c0b2:	1ad2      	subs	r2, r2, r3
 800c0b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c0b6:	b10b      	cbz	r3, 800c0bc <__sflush_r+0x44>
 800c0b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c0ba:	1ad2      	subs	r2, r2, r3
 800c0bc:	2300      	movs	r3, #0
 800c0be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c0c0:	6a21      	ldr	r1, [r4, #32]
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	47b0      	blx	r6
 800c0c6:	1c43      	adds	r3, r0, #1
 800c0c8:	89a3      	ldrh	r3, [r4, #12]
 800c0ca:	d106      	bne.n	800c0da <__sflush_r+0x62>
 800c0cc:	6829      	ldr	r1, [r5, #0]
 800c0ce:	291d      	cmp	r1, #29
 800c0d0:	d82b      	bhi.n	800c12a <__sflush_r+0xb2>
 800c0d2:	4a2a      	ldr	r2, [pc, #168]	@ (800c17c <__sflush_r+0x104>)
 800c0d4:	410a      	asrs	r2, r1
 800c0d6:	07d6      	lsls	r6, r2, #31
 800c0d8:	d427      	bmi.n	800c12a <__sflush_r+0xb2>
 800c0da:	2200      	movs	r2, #0
 800c0dc:	6062      	str	r2, [r4, #4]
 800c0de:	04d9      	lsls	r1, r3, #19
 800c0e0:	6922      	ldr	r2, [r4, #16]
 800c0e2:	6022      	str	r2, [r4, #0]
 800c0e4:	d504      	bpl.n	800c0f0 <__sflush_r+0x78>
 800c0e6:	1c42      	adds	r2, r0, #1
 800c0e8:	d101      	bne.n	800c0ee <__sflush_r+0x76>
 800c0ea:	682b      	ldr	r3, [r5, #0]
 800c0ec:	b903      	cbnz	r3, 800c0f0 <__sflush_r+0x78>
 800c0ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800c0f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c0f2:	602f      	str	r7, [r5, #0]
 800c0f4:	b1b9      	cbz	r1, 800c126 <__sflush_r+0xae>
 800c0f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	d002      	beq.n	800c104 <__sflush_r+0x8c>
 800c0fe:	4628      	mov	r0, r5
 800c100:	f7fe fa80 	bl	800a604 <_free_r>
 800c104:	2300      	movs	r3, #0
 800c106:	6363      	str	r3, [r4, #52]	@ 0x34
 800c108:	e00d      	b.n	800c126 <__sflush_r+0xae>
 800c10a:	2301      	movs	r3, #1
 800c10c:	4628      	mov	r0, r5
 800c10e:	47b0      	blx	r6
 800c110:	4602      	mov	r2, r0
 800c112:	1c50      	adds	r0, r2, #1
 800c114:	d1c9      	bne.n	800c0aa <__sflush_r+0x32>
 800c116:	682b      	ldr	r3, [r5, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d0c6      	beq.n	800c0aa <__sflush_r+0x32>
 800c11c:	2b1d      	cmp	r3, #29
 800c11e:	d001      	beq.n	800c124 <__sflush_r+0xac>
 800c120:	2b16      	cmp	r3, #22
 800c122:	d11e      	bne.n	800c162 <__sflush_r+0xea>
 800c124:	602f      	str	r7, [r5, #0]
 800c126:	2000      	movs	r0, #0
 800c128:	e022      	b.n	800c170 <__sflush_r+0xf8>
 800c12a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c12e:	b21b      	sxth	r3, r3
 800c130:	e01b      	b.n	800c16a <__sflush_r+0xf2>
 800c132:	690f      	ldr	r7, [r1, #16]
 800c134:	2f00      	cmp	r7, #0
 800c136:	d0f6      	beq.n	800c126 <__sflush_r+0xae>
 800c138:	0793      	lsls	r3, r2, #30
 800c13a:	680e      	ldr	r6, [r1, #0]
 800c13c:	bf08      	it	eq
 800c13e:	694b      	ldreq	r3, [r1, #20]
 800c140:	600f      	str	r7, [r1, #0]
 800c142:	bf18      	it	ne
 800c144:	2300      	movne	r3, #0
 800c146:	eba6 0807 	sub.w	r8, r6, r7
 800c14a:	608b      	str	r3, [r1, #8]
 800c14c:	f1b8 0f00 	cmp.w	r8, #0
 800c150:	dde9      	ble.n	800c126 <__sflush_r+0xae>
 800c152:	6a21      	ldr	r1, [r4, #32]
 800c154:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c156:	4643      	mov	r3, r8
 800c158:	463a      	mov	r2, r7
 800c15a:	4628      	mov	r0, r5
 800c15c:	47b0      	blx	r6
 800c15e:	2800      	cmp	r0, #0
 800c160:	dc08      	bgt.n	800c174 <__sflush_r+0xfc>
 800c162:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c16a:	81a3      	strh	r3, [r4, #12]
 800c16c:	f04f 30ff 	mov.w	r0, #4294967295
 800c170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c174:	4407      	add	r7, r0
 800c176:	eba8 0800 	sub.w	r8, r8, r0
 800c17a:	e7e7      	b.n	800c14c <__sflush_r+0xd4>
 800c17c:	dfbffffe 	.word	0xdfbffffe

0800c180 <_fflush_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	690b      	ldr	r3, [r1, #16]
 800c184:	4605      	mov	r5, r0
 800c186:	460c      	mov	r4, r1
 800c188:	b913      	cbnz	r3, 800c190 <_fflush_r+0x10>
 800c18a:	2500      	movs	r5, #0
 800c18c:	4628      	mov	r0, r5
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	b118      	cbz	r0, 800c19a <_fflush_r+0x1a>
 800c192:	6a03      	ldr	r3, [r0, #32]
 800c194:	b90b      	cbnz	r3, 800c19a <_fflush_r+0x1a>
 800c196:	f7fd fb37 	bl	8009808 <__sinit>
 800c19a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d0f3      	beq.n	800c18a <_fflush_r+0xa>
 800c1a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c1a4:	07d0      	lsls	r0, r2, #31
 800c1a6:	d404      	bmi.n	800c1b2 <_fflush_r+0x32>
 800c1a8:	0599      	lsls	r1, r3, #22
 800c1aa:	d402      	bmi.n	800c1b2 <_fflush_r+0x32>
 800c1ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1ae:	f7fd fc42 	bl	8009a36 <__retarget_lock_acquire_recursive>
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	4621      	mov	r1, r4
 800c1b6:	f7ff ff5f 	bl	800c078 <__sflush_r>
 800c1ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c1bc:	07da      	lsls	r2, r3, #31
 800c1be:	4605      	mov	r5, r0
 800c1c0:	d4e4      	bmi.n	800c18c <_fflush_r+0xc>
 800c1c2:	89a3      	ldrh	r3, [r4, #12]
 800c1c4:	059b      	lsls	r3, r3, #22
 800c1c6:	d4e1      	bmi.n	800c18c <_fflush_r+0xc>
 800c1c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c1ca:	f7fd fc35 	bl	8009a38 <__retarget_lock_release_recursive>
 800c1ce:	e7dd      	b.n	800c18c <_fflush_r+0xc>

0800c1d0 <memmove>:
 800c1d0:	4288      	cmp	r0, r1
 800c1d2:	b510      	push	{r4, lr}
 800c1d4:	eb01 0402 	add.w	r4, r1, r2
 800c1d8:	d902      	bls.n	800c1e0 <memmove+0x10>
 800c1da:	4284      	cmp	r4, r0
 800c1dc:	4623      	mov	r3, r4
 800c1de:	d807      	bhi.n	800c1f0 <memmove+0x20>
 800c1e0:	1e43      	subs	r3, r0, #1
 800c1e2:	42a1      	cmp	r1, r4
 800c1e4:	d008      	beq.n	800c1f8 <memmove+0x28>
 800c1e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c1ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c1ee:	e7f8      	b.n	800c1e2 <memmove+0x12>
 800c1f0:	4402      	add	r2, r0
 800c1f2:	4601      	mov	r1, r0
 800c1f4:	428a      	cmp	r2, r1
 800c1f6:	d100      	bne.n	800c1fa <memmove+0x2a>
 800c1f8:	bd10      	pop	{r4, pc}
 800c1fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c1fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c202:	e7f7      	b.n	800c1f4 <memmove+0x24>

0800c204 <strncmp>:
 800c204:	b510      	push	{r4, lr}
 800c206:	b16a      	cbz	r2, 800c224 <strncmp+0x20>
 800c208:	3901      	subs	r1, #1
 800c20a:	1884      	adds	r4, r0, r2
 800c20c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c210:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c214:	429a      	cmp	r2, r3
 800c216:	d103      	bne.n	800c220 <strncmp+0x1c>
 800c218:	42a0      	cmp	r0, r4
 800c21a:	d001      	beq.n	800c220 <strncmp+0x1c>
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	d1f5      	bne.n	800c20c <strncmp+0x8>
 800c220:	1ad0      	subs	r0, r2, r3
 800c222:	bd10      	pop	{r4, pc}
 800c224:	4610      	mov	r0, r2
 800c226:	e7fc      	b.n	800c222 <strncmp+0x1e>

0800c228 <_sbrk_r>:
 800c228:	b538      	push	{r3, r4, r5, lr}
 800c22a:	4d06      	ldr	r5, [pc, #24]	@ (800c244 <_sbrk_r+0x1c>)
 800c22c:	2300      	movs	r3, #0
 800c22e:	4604      	mov	r4, r0
 800c230:	4608      	mov	r0, r1
 800c232:	602b      	str	r3, [r5, #0]
 800c234:	f7f6 ff64 	bl	8003100 <_sbrk>
 800c238:	1c43      	adds	r3, r0, #1
 800c23a:	d102      	bne.n	800c242 <_sbrk_r+0x1a>
 800c23c:	682b      	ldr	r3, [r5, #0]
 800c23e:	b103      	cbz	r3, 800c242 <_sbrk_r+0x1a>
 800c240:	6023      	str	r3, [r4, #0]
 800c242:	bd38      	pop	{r3, r4, r5, pc}
 800c244:	20031d7c 	.word	0x20031d7c

0800c248 <memcpy>:
 800c248:	440a      	add	r2, r1
 800c24a:	4291      	cmp	r1, r2
 800c24c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c250:	d100      	bne.n	800c254 <memcpy+0xc>
 800c252:	4770      	bx	lr
 800c254:	b510      	push	{r4, lr}
 800c256:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c25a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c25e:	4291      	cmp	r1, r2
 800c260:	d1f9      	bne.n	800c256 <memcpy+0xe>
 800c262:	bd10      	pop	{r4, pc}
 800c264:	0000      	movs	r0, r0
	...

0800c268 <nan>:
 800c268:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c270 <nan+0x8>
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	00000000 	.word	0x00000000
 800c274:	7ff80000 	.word	0x7ff80000

0800c278 <__assert_func>:
 800c278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c27a:	4614      	mov	r4, r2
 800c27c:	461a      	mov	r2, r3
 800c27e:	4b09      	ldr	r3, [pc, #36]	@ (800c2a4 <__assert_func+0x2c>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4605      	mov	r5, r0
 800c284:	68d8      	ldr	r0, [r3, #12]
 800c286:	b954      	cbnz	r4, 800c29e <__assert_func+0x26>
 800c288:	4b07      	ldr	r3, [pc, #28]	@ (800c2a8 <__assert_func+0x30>)
 800c28a:	461c      	mov	r4, r3
 800c28c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c290:	9100      	str	r1, [sp, #0]
 800c292:	462b      	mov	r3, r5
 800c294:	4905      	ldr	r1, [pc, #20]	@ (800c2ac <__assert_func+0x34>)
 800c296:	f000 fba7 	bl	800c9e8 <fiprintf>
 800c29a:	f000 fbb7 	bl	800ca0c <abort>
 800c29e:	4b04      	ldr	r3, [pc, #16]	@ (800c2b0 <__assert_func+0x38>)
 800c2a0:	e7f4      	b.n	800c28c <__assert_func+0x14>
 800c2a2:	bf00      	nop
 800c2a4:	2000004c 	.word	0x2000004c
 800c2a8:	0800d645 	.word	0x0800d645
 800c2ac:	0800d617 	.word	0x0800d617
 800c2b0:	0800d60a 	.word	0x0800d60a

0800c2b4 <_calloc_r>:
 800c2b4:	b570      	push	{r4, r5, r6, lr}
 800c2b6:	fba1 5402 	umull	r5, r4, r1, r2
 800c2ba:	b93c      	cbnz	r4, 800c2cc <_calloc_r+0x18>
 800c2bc:	4629      	mov	r1, r5
 800c2be:	f7fe fa15 	bl	800a6ec <_malloc_r>
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	b928      	cbnz	r0, 800c2d2 <_calloc_r+0x1e>
 800c2c6:	2600      	movs	r6, #0
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	bd70      	pop	{r4, r5, r6, pc}
 800c2cc:	220c      	movs	r2, #12
 800c2ce:	6002      	str	r2, [r0, #0]
 800c2d0:	e7f9      	b.n	800c2c6 <_calloc_r+0x12>
 800c2d2:	462a      	mov	r2, r5
 800c2d4:	4621      	mov	r1, r4
 800c2d6:	f7fd fb30 	bl	800993a <memset>
 800c2da:	e7f5      	b.n	800c2c8 <_calloc_r+0x14>

0800c2dc <rshift>:
 800c2dc:	6903      	ldr	r3, [r0, #16]
 800c2de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c2e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c2e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c2ea:	f100 0414 	add.w	r4, r0, #20
 800c2ee:	dd45      	ble.n	800c37c <rshift+0xa0>
 800c2f0:	f011 011f 	ands.w	r1, r1, #31
 800c2f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c2f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c2fc:	d10c      	bne.n	800c318 <rshift+0x3c>
 800c2fe:	f100 0710 	add.w	r7, r0, #16
 800c302:	4629      	mov	r1, r5
 800c304:	42b1      	cmp	r1, r6
 800c306:	d334      	bcc.n	800c372 <rshift+0x96>
 800c308:	1a9b      	subs	r3, r3, r2
 800c30a:	009b      	lsls	r3, r3, #2
 800c30c:	1eea      	subs	r2, r5, #3
 800c30e:	4296      	cmp	r6, r2
 800c310:	bf38      	it	cc
 800c312:	2300      	movcc	r3, #0
 800c314:	4423      	add	r3, r4
 800c316:	e015      	b.n	800c344 <rshift+0x68>
 800c318:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c31c:	f1c1 0820 	rsb	r8, r1, #32
 800c320:	40cf      	lsrs	r7, r1
 800c322:	f105 0e04 	add.w	lr, r5, #4
 800c326:	46a1      	mov	r9, r4
 800c328:	4576      	cmp	r6, lr
 800c32a:	46f4      	mov	ip, lr
 800c32c:	d815      	bhi.n	800c35a <rshift+0x7e>
 800c32e:	1a9a      	subs	r2, r3, r2
 800c330:	0092      	lsls	r2, r2, #2
 800c332:	3a04      	subs	r2, #4
 800c334:	3501      	adds	r5, #1
 800c336:	42ae      	cmp	r6, r5
 800c338:	bf38      	it	cc
 800c33a:	2200      	movcc	r2, #0
 800c33c:	18a3      	adds	r3, r4, r2
 800c33e:	50a7      	str	r7, [r4, r2]
 800c340:	b107      	cbz	r7, 800c344 <rshift+0x68>
 800c342:	3304      	adds	r3, #4
 800c344:	1b1a      	subs	r2, r3, r4
 800c346:	42a3      	cmp	r3, r4
 800c348:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c34c:	bf08      	it	eq
 800c34e:	2300      	moveq	r3, #0
 800c350:	6102      	str	r2, [r0, #16]
 800c352:	bf08      	it	eq
 800c354:	6143      	streq	r3, [r0, #20]
 800c356:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c35a:	f8dc c000 	ldr.w	ip, [ip]
 800c35e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c362:	ea4c 0707 	orr.w	r7, ip, r7
 800c366:	f849 7b04 	str.w	r7, [r9], #4
 800c36a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c36e:	40cf      	lsrs	r7, r1
 800c370:	e7da      	b.n	800c328 <rshift+0x4c>
 800c372:	f851 cb04 	ldr.w	ip, [r1], #4
 800c376:	f847 cf04 	str.w	ip, [r7, #4]!
 800c37a:	e7c3      	b.n	800c304 <rshift+0x28>
 800c37c:	4623      	mov	r3, r4
 800c37e:	e7e1      	b.n	800c344 <rshift+0x68>

0800c380 <__hexdig_fun>:
 800c380:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c384:	2b09      	cmp	r3, #9
 800c386:	d802      	bhi.n	800c38e <__hexdig_fun+0xe>
 800c388:	3820      	subs	r0, #32
 800c38a:	b2c0      	uxtb	r0, r0
 800c38c:	4770      	bx	lr
 800c38e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c392:	2b05      	cmp	r3, #5
 800c394:	d801      	bhi.n	800c39a <__hexdig_fun+0x1a>
 800c396:	3847      	subs	r0, #71	@ 0x47
 800c398:	e7f7      	b.n	800c38a <__hexdig_fun+0xa>
 800c39a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c39e:	2b05      	cmp	r3, #5
 800c3a0:	d801      	bhi.n	800c3a6 <__hexdig_fun+0x26>
 800c3a2:	3827      	subs	r0, #39	@ 0x27
 800c3a4:	e7f1      	b.n	800c38a <__hexdig_fun+0xa>
 800c3a6:	2000      	movs	r0, #0
 800c3a8:	4770      	bx	lr
	...

0800c3ac <__gethex>:
 800c3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b0:	b085      	sub	sp, #20
 800c3b2:	468a      	mov	sl, r1
 800c3b4:	9302      	str	r3, [sp, #8]
 800c3b6:	680b      	ldr	r3, [r1, #0]
 800c3b8:	9001      	str	r0, [sp, #4]
 800c3ba:	4690      	mov	r8, r2
 800c3bc:	1c9c      	adds	r4, r3, #2
 800c3be:	46a1      	mov	r9, r4
 800c3c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c3c4:	2830      	cmp	r0, #48	@ 0x30
 800c3c6:	d0fa      	beq.n	800c3be <__gethex+0x12>
 800c3c8:	eba9 0303 	sub.w	r3, r9, r3
 800c3cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800c3d0:	f7ff ffd6 	bl	800c380 <__hexdig_fun>
 800c3d4:	4605      	mov	r5, r0
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	d168      	bne.n	800c4ac <__gethex+0x100>
 800c3da:	49a0      	ldr	r1, [pc, #640]	@ (800c65c <__gethex+0x2b0>)
 800c3dc:	2201      	movs	r2, #1
 800c3de:	4648      	mov	r0, r9
 800c3e0:	f7ff ff10 	bl	800c204 <strncmp>
 800c3e4:	4607      	mov	r7, r0
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	d167      	bne.n	800c4ba <__gethex+0x10e>
 800c3ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c3ee:	4626      	mov	r6, r4
 800c3f0:	f7ff ffc6 	bl	800c380 <__hexdig_fun>
 800c3f4:	2800      	cmp	r0, #0
 800c3f6:	d062      	beq.n	800c4be <__gethex+0x112>
 800c3f8:	4623      	mov	r3, r4
 800c3fa:	7818      	ldrb	r0, [r3, #0]
 800c3fc:	2830      	cmp	r0, #48	@ 0x30
 800c3fe:	4699      	mov	r9, r3
 800c400:	f103 0301 	add.w	r3, r3, #1
 800c404:	d0f9      	beq.n	800c3fa <__gethex+0x4e>
 800c406:	f7ff ffbb 	bl	800c380 <__hexdig_fun>
 800c40a:	fab0 f580 	clz	r5, r0
 800c40e:	096d      	lsrs	r5, r5, #5
 800c410:	f04f 0b01 	mov.w	fp, #1
 800c414:	464a      	mov	r2, r9
 800c416:	4616      	mov	r6, r2
 800c418:	3201      	adds	r2, #1
 800c41a:	7830      	ldrb	r0, [r6, #0]
 800c41c:	f7ff ffb0 	bl	800c380 <__hexdig_fun>
 800c420:	2800      	cmp	r0, #0
 800c422:	d1f8      	bne.n	800c416 <__gethex+0x6a>
 800c424:	498d      	ldr	r1, [pc, #564]	@ (800c65c <__gethex+0x2b0>)
 800c426:	2201      	movs	r2, #1
 800c428:	4630      	mov	r0, r6
 800c42a:	f7ff feeb 	bl	800c204 <strncmp>
 800c42e:	2800      	cmp	r0, #0
 800c430:	d13f      	bne.n	800c4b2 <__gethex+0x106>
 800c432:	b944      	cbnz	r4, 800c446 <__gethex+0x9a>
 800c434:	1c74      	adds	r4, r6, #1
 800c436:	4622      	mov	r2, r4
 800c438:	4616      	mov	r6, r2
 800c43a:	3201      	adds	r2, #1
 800c43c:	7830      	ldrb	r0, [r6, #0]
 800c43e:	f7ff ff9f 	bl	800c380 <__hexdig_fun>
 800c442:	2800      	cmp	r0, #0
 800c444:	d1f8      	bne.n	800c438 <__gethex+0x8c>
 800c446:	1ba4      	subs	r4, r4, r6
 800c448:	00a7      	lsls	r7, r4, #2
 800c44a:	7833      	ldrb	r3, [r6, #0]
 800c44c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c450:	2b50      	cmp	r3, #80	@ 0x50
 800c452:	d13e      	bne.n	800c4d2 <__gethex+0x126>
 800c454:	7873      	ldrb	r3, [r6, #1]
 800c456:	2b2b      	cmp	r3, #43	@ 0x2b
 800c458:	d033      	beq.n	800c4c2 <__gethex+0x116>
 800c45a:	2b2d      	cmp	r3, #45	@ 0x2d
 800c45c:	d034      	beq.n	800c4c8 <__gethex+0x11c>
 800c45e:	1c71      	adds	r1, r6, #1
 800c460:	2400      	movs	r4, #0
 800c462:	7808      	ldrb	r0, [r1, #0]
 800c464:	f7ff ff8c 	bl	800c380 <__hexdig_fun>
 800c468:	1e43      	subs	r3, r0, #1
 800c46a:	b2db      	uxtb	r3, r3
 800c46c:	2b18      	cmp	r3, #24
 800c46e:	d830      	bhi.n	800c4d2 <__gethex+0x126>
 800c470:	f1a0 0210 	sub.w	r2, r0, #16
 800c474:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c478:	f7ff ff82 	bl	800c380 <__hexdig_fun>
 800c47c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c480:	fa5f fc8c 	uxtb.w	ip, ip
 800c484:	f1bc 0f18 	cmp.w	ip, #24
 800c488:	f04f 030a 	mov.w	r3, #10
 800c48c:	d91e      	bls.n	800c4cc <__gethex+0x120>
 800c48e:	b104      	cbz	r4, 800c492 <__gethex+0xe6>
 800c490:	4252      	negs	r2, r2
 800c492:	4417      	add	r7, r2
 800c494:	f8ca 1000 	str.w	r1, [sl]
 800c498:	b1ed      	cbz	r5, 800c4d6 <__gethex+0x12a>
 800c49a:	f1bb 0f00 	cmp.w	fp, #0
 800c49e:	bf0c      	ite	eq
 800c4a0:	2506      	moveq	r5, #6
 800c4a2:	2500      	movne	r5, #0
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	b005      	add	sp, #20
 800c4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ac:	2500      	movs	r5, #0
 800c4ae:	462c      	mov	r4, r5
 800c4b0:	e7b0      	b.n	800c414 <__gethex+0x68>
 800c4b2:	2c00      	cmp	r4, #0
 800c4b4:	d1c7      	bne.n	800c446 <__gethex+0x9a>
 800c4b6:	4627      	mov	r7, r4
 800c4b8:	e7c7      	b.n	800c44a <__gethex+0x9e>
 800c4ba:	464e      	mov	r6, r9
 800c4bc:	462f      	mov	r7, r5
 800c4be:	2501      	movs	r5, #1
 800c4c0:	e7c3      	b.n	800c44a <__gethex+0x9e>
 800c4c2:	2400      	movs	r4, #0
 800c4c4:	1cb1      	adds	r1, r6, #2
 800c4c6:	e7cc      	b.n	800c462 <__gethex+0xb6>
 800c4c8:	2401      	movs	r4, #1
 800c4ca:	e7fb      	b.n	800c4c4 <__gethex+0x118>
 800c4cc:	fb03 0002 	mla	r0, r3, r2, r0
 800c4d0:	e7ce      	b.n	800c470 <__gethex+0xc4>
 800c4d2:	4631      	mov	r1, r6
 800c4d4:	e7de      	b.n	800c494 <__gethex+0xe8>
 800c4d6:	eba6 0309 	sub.w	r3, r6, r9
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	4629      	mov	r1, r5
 800c4de:	2b07      	cmp	r3, #7
 800c4e0:	dc0a      	bgt.n	800c4f8 <__gethex+0x14c>
 800c4e2:	9801      	ldr	r0, [sp, #4]
 800c4e4:	f7fe f98e 	bl	800a804 <_Balloc>
 800c4e8:	4604      	mov	r4, r0
 800c4ea:	b940      	cbnz	r0, 800c4fe <__gethex+0x152>
 800c4ec:	4b5c      	ldr	r3, [pc, #368]	@ (800c660 <__gethex+0x2b4>)
 800c4ee:	4602      	mov	r2, r0
 800c4f0:	21e4      	movs	r1, #228	@ 0xe4
 800c4f2:	485c      	ldr	r0, [pc, #368]	@ (800c664 <__gethex+0x2b8>)
 800c4f4:	f7ff fec0 	bl	800c278 <__assert_func>
 800c4f8:	3101      	adds	r1, #1
 800c4fa:	105b      	asrs	r3, r3, #1
 800c4fc:	e7ef      	b.n	800c4de <__gethex+0x132>
 800c4fe:	f100 0a14 	add.w	sl, r0, #20
 800c502:	2300      	movs	r3, #0
 800c504:	4655      	mov	r5, sl
 800c506:	469b      	mov	fp, r3
 800c508:	45b1      	cmp	r9, r6
 800c50a:	d337      	bcc.n	800c57c <__gethex+0x1d0>
 800c50c:	f845 bb04 	str.w	fp, [r5], #4
 800c510:	eba5 050a 	sub.w	r5, r5, sl
 800c514:	10ad      	asrs	r5, r5, #2
 800c516:	6125      	str	r5, [r4, #16]
 800c518:	4658      	mov	r0, fp
 800c51a:	f7fe fa65 	bl	800a9e8 <__hi0bits>
 800c51e:	016d      	lsls	r5, r5, #5
 800c520:	f8d8 6000 	ldr.w	r6, [r8]
 800c524:	1a2d      	subs	r5, r5, r0
 800c526:	42b5      	cmp	r5, r6
 800c528:	dd54      	ble.n	800c5d4 <__gethex+0x228>
 800c52a:	1bad      	subs	r5, r5, r6
 800c52c:	4629      	mov	r1, r5
 800c52e:	4620      	mov	r0, r4
 800c530:	f7fe fdf6 	bl	800b120 <__any_on>
 800c534:	4681      	mov	r9, r0
 800c536:	b178      	cbz	r0, 800c558 <__gethex+0x1ac>
 800c538:	1e6b      	subs	r3, r5, #1
 800c53a:	1159      	asrs	r1, r3, #5
 800c53c:	f003 021f 	and.w	r2, r3, #31
 800c540:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c544:	f04f 0901 	mov.w	r9, #1
 800c548:	fa09 f202 	lsl.w	r2, r9, r2
 800c54c:	420a      	tst	r2, r1
 800c54e:	d003      	beq.n	800c558 <__gethex+0x1ac>
 800c550:	454b      	cmp	r3, r9
 800c552:	dc36      	bgt.n	800c5c2 <__gethex+0x216>
 800c554:	f04f 0902 	mov.w	r9, #2
 800c558:	4629      	mov	r1, r5
 800c55a:	4620      	mov	r0, r4
 800c55c:	f7ff febe 	bl	800c2dc <rshift>
 800c560:	442f      	add	r7, r5
 800c562:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c566:	42bb      	cmp	r3, r7
 800c568:	da42      	bge.n	800c5f0 <__gethex+0x244>
 800c56a:	9801      	ldr	r0, [sp, #4]
 800c56c:	4621      	mov	r1, r4
 800c56e:	f7fe f989 	bl	800a884 <_Bfree>
 800c572:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c574:	2300      	movs	r3, #0
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	25a3      	movs	r5, #163	@ 0xa3
 800c57a:	e793      	b.n	800c4a4 <__gethex+0xf8>
 800c57c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c580:	2a2e      	cmp	r2, #46	@ 0x2e
 800c582:	d012      	beq.n	800c5aa <__gethex+0x1fe>
 800c584:	2b20      	cmp	r3, #32
 800c586:	d104      	bne.n	800c592 <__gethex+0x1e6>
 800c588:	f845 bb04 	str.w	fp, [r5], #4
 800c58c:	f04f 0b00 	mov.w	fp, #0
 800c590:	465b      	mov	r3, fp
 800c592:	7830      	ldrb	r0, [r6, #0]
 800c594:	9303      	str	r3, [sp, #12]
 800c596:	f7ff fef3 	bl	800c380 <__hexdig_fun>
 800c59a:	9b03      	ldr	r3, [sp, #12]
 800c59c:	f000 000f 	and.w	r0, r0, #15
 800c5a0:	4098      	lsls	r0, r3
 800c5a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800c5a6:	3304      	adds	r3, #4
 800c5a8:	e7ae      	b.n	800c508 <__gethex+0x15c>
 800c5aa:	45b1      	cmp	r9, r6
 800c5ac:	d8ea      	bhi.n	800c584 <__gethex+0x1d8>
 800c5ae:	492b      	ldr	r1, [pc, #172]	@ (800c65c <__gethex+0x2b0>)
 800c5b0:	9303      	str	r3, [sp, #12]
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	4630      	mov	r0, r6
 800c5b6:	f7ff fe25 	bl	800c204 <strncmp>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	2800      	cmp	r0, #0
 800c5be:	d1e1      	bne.n	800c584 <__gethex+0x1d8>
 800c5c0:	e7a2      	b.n	800c508 <__gethex+0x15c>
 800c5c2:	1ea9      	subs	r1, r5, #2
 800c5c4:	4620      	mov	r0, r4
 800c5c6:	f7fe fdab 	bl	800b120 <__any_on>
 800c5ca:	2800      	cmp	r0, #0
 800c5cc:	d0c2      	beq.n	800c554 <__gethex+0x1a8>
 800c5ce:	f04f 0903 	mov.w	r9, #3
 800c5d2:	e7c1      	b.n	800c558 <__gethex+0x1ac>
 800c5d4:	da09      	bge.n	800c5ea <__gethex+0x23e>
 800c5d6:	1b75      	subs	r5, r6, r5
 800c5d8:	4621      	mov	r1, r4
 800c5da:	9801      	ldr	r0, [sp, #4]
 800c5dc:	462a      	mov	r2, r5
 800c5de:	f7fe fb69 	bl	800acb4 <__lshift>
 800c5e2:	1b7f      	subs	r7, r7, r5
 800c5e4:	4604      	mov	r4, r0
 800c5e6:	f100 0a14 	add.w	sl, r0, #20
 800c5ea:	f04f 0900 	mov.w	r9, #0
 800c5ee:	e7b8      	b.n	800c562 <__gethex+0x1b6>
 800c5f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c5f4:	42bd      	cmp	r5, r7
 800c5f6:	dd6f      	ble.n	800c6d8 <__gethex+0x32c>
 800c5f8:	1bed      	subs	r5, r5, r7
 800c5fa:	42ae      	cmp	r6, r5
 800c5fc:	dc34      	bgt.n	800c668 <__gethex+0x2bc>
 800c5fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c602:	2b02      	cmp	r3, #2
 800c604:	d022      	beq.n	800c64c <__gethex+0x2a0>
 800c606:	2b03      	cmp	r3, #3
 800c608:	d024      	beq.n	800c654 <__gethex+0x2a8>
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d115      	bne.n	800c63a <__gethex+0x28e>
 800c60e:	42ae      	cmp	r6, r5
 800c610:	d113      	bne.n	800c63a <__gethex+0x28e>
 800c612:	2e01      	cmp	r6, #1
 800c614:	d10b      	bne.n	800c62e <__gethex+0x282>
 800c616:	9a02      	ldr	r2, [sp, #8]
 800c618:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c61c:	6013      	str	r3, [r2, #0]
 800c61e:	2301      	movs	r3, #1
 800c620:	6123      	str	r3, [r4, #16]
 800c622:	f8ca 3000 	str.w	r3, [sl]
 800c626:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c628:	2562      	movs	r5, #98	@ 0x62
 800c62a:	601c      	str	r4, [r3, #0]
 800c62c:	e73a      	b.n	800c4a4 <__gethex+0xf8>
 800c62e:	1e71      	subs	r1, r6, #1
 800c630:	4620      	mov	r0, r4
 800c632:	f7fe fd75 	bl	800b120 <__any_on>
 800c636:	2800      	cmp	r0, #0
 800c638:	d1ed      	bne.n	800c616 <__gethex+0x26a>
 800c63a:	9801      	ldr	r0, [sp, #4]
 800c63c:	4621      	mov	r1, r4
 800c63e:	f7fe f921 	bl	800a884 <_Bfree>
 800c642:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c644:	2300      	movs	r3, #0
 800c646:	6013      	str	r3, [r2, #0]
 800c648:	2550      	movs	r5, #80	@ 0x50
 800c64a:	e72b      	b.n	800c4a4 <__gethex+0xf8>
 800c64c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d1f3      	bne.n	800c63a <__gethex+0x28e>
 800c652:	e7e0      	b.n	800c616 <__gethex+0x26a>
 800c654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c656:	2b00      	cmp	r3, #0
 800c658:	d1dd      	bne.n	800c616 <__gethex+0x26a>
 800c65a:	e7ee      	b.n	800c63a <__gethex+0x28e>
 800c65c:	0800d498 	.word	0x0800d498
 800c660:	0800d32d 	.word	0x0800d32d
 800c664:	0800d646 	.word	0x0800d646
 800c668:	1e6f      	subs	r7, r5, #1
 800c66a:	f1b9 0f00 	cmp.w	r9, #0
 800c66e:	d130      	bne.n	800c6d2 <__gethex+0x326>
 800c670:	b127      	cbz	r7, 800c67c <__gethex+0x2d0>
 800c672:	4639      	mov	r1, r7
 800c674:	4620      	mov	r0, r4
 800c676:	f7fe fd53 	bl	800b120 <__any_on>
 800c67a:	4681      	mov	r9, r0
 800c67c:	117a      	asrs	r2, r7, #5
 800c67e:	2301      	movs	r3, #1
 800c680:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c684:	f007 071f 	and.w	r7, r7, #31
 800c688:	40bb      	lsls	r3, r7
 800c68a:	4213      	tst	r3, r2
 800c68c:	4629      	mov	r1, r5
 800c68e:	4620      	mov	r0, r4
 800c690:	bf18      	it	ne
 800c692:	f049 0902 	orrne.w	r9, r9, #2
 800c696:	f7ff fe21 	bl	800c2dc <rshift>
 800c69a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c69e:	1b76      	subs	r6, r6, r5
 800c6a0:	2502      	movs	r5, #2
 800c6a2:	f1b9 0f00 	cmp.w	r9, #0
 800c6a6:	d047      	beq.n	800c738 <__gethex+0x38c>
 800c6a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d015      	beq.n	800c6dc <__gethex+0x330>
 800c6b0:	2b03      	cmp	r3, #3
 800c6b2:	d017      	beq.n	800c6e4 <__gethex+0x338>
 800c6b4:	2b01      	cmp	r3, #1
 800c6b6:	d109      	bne.n	800c6cc <__gethex+0x320>
 800c6b8:	f019 0f02 	tst.w	r9, #2
 800c6bc:	d006      	beq.n	800c6cc <__gethex+0x320>
 800c6be:	f8da 3000 	ldr.w	r3, [sl]
 800c6c2:	ea49 0903 	orr.w	r9, r9, r3
 800c6c6:	f019 0f01 	tst.w	r9, #1
 800c6ca:	d10e      	bne.n	800c6ea <__gethex+0x33e>
 800c6cc:	f045 0510 	orr.w	r5, r5, #16
 800c6d0:	e032      	b.n	800c738 <__gethex+0x38c>
 800c6d2:	f04f 0901 	mov.w	r9, #1
 800c6d6:	e7d1      	b.n	800c67c <__gethex+0x2d0>
 800c6d8:	2501      	movs	r5, #1
 800c6da:	e7e2      	b.n	800c6a2 <__gethex+0x2f6>
 800c6dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6de:	f1c3 0301 	rsb	r3, r3, #1
 800c6e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d0f0      	beq.n	800c6cc <__gethex+0x320>
 800c6ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c6ee:	f104 0314 	add.w	r3, r4, #20
 800c6f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c6f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c6fa:	f04f 0c00 	mov.w	ip, #0
 800c6fe:	4618      	mov	r0, r3
 800c700:	f853 2b04 	ldr.w	r2, [r3], #4
 800c704:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c708:	d01b      	beq.n	800c742 <__gethex+0x396>
 800c70a:	3201      	adds	r2, #1
 800c70c:	6002      	str	r2, [r0, #0]
 800c70e:	2d02      	cmp	r5, #2
 800c710:	f104 0314 	add.w	r3, r4, #20
 800c714:	d13c      	bne.n	800c790 <__gethex+0x3e4>
 800c716:	f8d8 2000 	ldr.w	r2, [r8]
 800c71a:	3a01      	subs	r2, #1
 800c71c:	42b2      	cmp	r2, r6
 800c71e:	d109      	bne.n	800c734 <__gethex+0x388>
 800c720:	1171      	asrs	r1, r6, #5
 800c722:	2201      	movs	r2, #1
 800c724:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c728:	f006 061f 	and.w	r6, r6, #31
 800c72c:	fa02 f606 	lsl.w	r6, r2, r6
 800c730:	421e      	tst	r6, r3
 800c732:	d13a      	bne.n	800c7aa <__gethex+0x3fe>
 800c734:	f045 0520 	orr.w	r5, r5, #32
 800c738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c73a:	601c      	str	r4, [r3, #0]
 800c73c:	9b02      	ldr	r3, [sp, #8]
 800c73e:	601f      	str	r7, [r3, #0]
 800c740:	e6b0      	b.n	800c4a4 <__gethex+0xf8>
 800c742:	4299      	cmp	r1, r3
 800c744:	f843 cc04 	str.w	ip, [r3, #-4]
 800c748:	d8d9      	bhi.n	800c6fe <__gethex+0x352>
 800c74a:	68a3      	ldr	r3, [r4, #8]
 800c74c:	459b      	cmp	fp, r3
 800c74e:	db17      	blt.n	800c780 <__gethex+0x3d4>
 800c750:	6861      	ldr	r1, [r4, #4]
 800c752:	9801      	ldr	r0, [sp, #4]
 800c754:	3101      	adds	r1, #1
 800c756:	f7fe f855 	bl	800a804 <_Balloc>
 800c75a:	4681      	mov	r9, r0
 800c75c:	b918      	cbnz	r0, 800c766 <__gethex+0x3ba>
 800c75e:	4b1a      	ldr	r3, [pc, #104]	@ (800c7c8 <__gethex+0x41c>)
 800c760:	4602      	mov	r2, r0
 800c762:	2184      	movs	r1, #132	@ 0x84
 800c764:	e6c5      	b.n	800c4f2 <__gethex+0x146>
 800c766:	6922      	ldr	r2, [r4, #16]
 800c768:	3202      	adds	r2, #2
 800c76a:	f104 010c 	add.w	r1, r4, #12
 800c76e:	0092      	lsls	r2, r2, #2
 800c770:	300c      	adds	r0, #12
 800c772:	f7ff fd69 	bl	800c248 <memcpy>
 800c776:	4621      	mov	r1, r4
 800c778:	9801      	ldr	r0, [sp, #4]
 800c77a:	f7fe f883 	bl	800a884 <_Bfree>
 800c77e:	464c      	mov	r4, r9
 800c780:	6923      	ldr	r3, [r4, #16]
 800c782:	1c5a      	adds	r2, r3, #1
 800c784:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c788:	6122      	str	r2, [r4, #16]
 800c78a:	2201      	movs	r2, #1
 800c78c:	615a      	str	r2, [r3, #20]
 800c78e:	e7be      	b.n	800c70e <__gethex+0x362>
 800c790:	6922      	ldr	r2, [r4, #16]
 800c792:	455a      	cmp	r2, fp
 800c794:	dd0b      	ble.n	800c7ae <__gethex+0x402>
 800c796:	2101      	movs	r1, #1
 800c798:	4620      	mov	r0, r4
 800c79a:	f7ff fd9f 	bl	800c2dc <rshift>
 800c79e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7a2:	3701      	adds	r7, #1
 800c7a4:	42bb      	cmp	r3, r7
 800c7a6:	f6ff aee0 	blt.w	800c56a <__gethex+0x1be>
 800c7aa:	2501      	movs	r5, #1
 800c7ac:	e7c2      	b.n	800c734 <__gethex+0x388>
 800c7ae:	f016 061f 	ands.w	r6, r6, #31
 800c7b2:	d0fa      	beq.n	800c7aa <__gethex+0x3fe>
 800c7b4:	4453      	add	r3, sl
 800c7b6:	f1c6 0620 	rsb	r6, r6, #32
 800c7ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c7be:	f7fe f913 	bl	800a9e8 <__hi0bits>
 800c7c2:	42b0      	cmp	r0, r6
 800c7c4:	dbe7      	blt.n	800c796 <__gethex+0x3ea>
 800c7c6:	e7f0      	b.n	800c7aa <__gethex+0x3fe>
 800c7c8:	0800d32d 	.word	0x0800d32d

0800c7cc <L_shift>:
 800c7cc:	f1c2 0208 	rsb	r2, r2, #8
 800c7d0:	0092      	lsls	r2, r2, #2
 800c7d2:	b570      	push	{r4, r5, r6, lr}
 800c7d4:	f1c2 0620 	rsb	r6, r2, #32
 800c7d8:	6843      	ldr	r3, [r0, #4]
 800c7da:	6804      	ldr	r4, [r0, #0]
 800c7dc:	fa03 f506 	lsl.w	r5, r3, r6
 800c7e0:	432c      	orrs	r4, r5
 800c7e2:	40d3      	lsrs	r3, r2
 800c7e4:	6004      	str	r4, [r0, #0]
 800c7e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800c7ea:	4288      	cmp	r0, r1
 800c7ec:	d3f4      	bcc.n	800c7d8 <L_shift+0xc>
 800c7ee:	bd70      	pop	{r4, r5, r6, pc}

0800c7f0 <__match>:
 800c7f0:	b530      	push	{r4, r5, lr}
 800c7f2:	6803      	ldr	r3, [r0, #0]
 800c7f4:	3301      	adds	r3, #1
 800c7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7fa:	b914      	cbnz	r4, 800c802 <__match+0x12>
 800c7fc:	6003      	str	r3, [r0, #0]
 800c7fe:	2001      	movs	r0, #1
 800c800:	bd30      	pop	{r4, r5, pc}
 800c802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c806:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c80a:	2d19      	cmp	r5, #25
 800c80c:	bf98      	it	ls
 800c80e:	3220      	addls	r2, #32
 800c810:	42a2      	cmp	r2, r4
 800c812:	d0f0      	beq.n	800c7f6 <__match+0x6>
 800c814:	2000      	movs	r0, #0
 800c816:	e7f3      	b.n	800c800 <__match+0x10>

0800c818 <__hexnan>:
 800c818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c81c:	680b      	ldr	r3, [r1, #0]
 800c81e:	6801      	ldr	r1, [r0, #0]
 800c820:	115e      	asrs	r6, r3, #5
 800c822:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c826:	f013 031f 	ands.w	r3, r3, #31
 800c82a:	b087      	sub	sp, #28
 800c82c:	bf18      	it	ne
 800c82e:	3604      	addne	r6, #4
 800c830:	2500      	movs	r5, #0
 800c832:	1f37      	subs	r7, r6, #4
 800c834:	4682      	mov	sl, r0
 800c836:	4690      	mov	r8, r2
 800c838:	9301      	str	r3, [sp, #4]
 800c83a:	f846 5c04 	str.w	r5, [r6, #-4]
 800c83e:	46b9      	mov	r9, r7
 800c840:	463c      	mov	r4, r7
 800c842:	9502      	str	r5, [sp, #8]
 800c844:	46ab      	mov	fp, r5
 800c846:	784a      	ldrb	r2, [r1, #1]
 800c848:	1c4b      	adds	r3, r1, #1
 800c84a:	9303      	str	r3, [sp, #12]
 800c84c:	b342      	cbz	r2, 800c8a0 <__hexnan+0x88>
 800c84e:	4610      	mov	r0, r2
 800c850:	9105      	str	r1, [sp, #20]
 800c852:	9204      	str	r2, [sp, #16]
 800c854:	f7ff fd94 	bl	800c380 <__hexdig_fun>
 800c858:	2800      	cmp	r0, #0
 800c85a:	d151      	bne.n	800c900 <__hexnan+0xe8>
 800c85c:	9a04      	ldr	r2, [sp, #16]
 800c85e:	9905      	ldr	r1, [sp, #20]
 800c860:	2a20      	cmp	r2, #32
 800c862:	d818      	bhi.n	800c896 <__hexnan+0x7e>
 800c864:	9b02      	ldr	r3, [sp, #8]
 800c866:	459b      	cmp	fp, r3
 800c868:	dd13      	ble.n	800c892 <__hexnan+0x7a>
 800c86a:	454c      	cmp	r4, r9
 800c86c:	d206      	bcs.n	800c87c <__hexnan+0x64>
 800c86e:	2d07      	cmp	r5, #7
 800c870:	dc04      	bgt.n	800c87c <__hexnan+0x64>
 800c872:	462a      	mov	r2, r5
 800c874:	4649      	mov	r1, r9
 800c876:	4620      	mov	r0, r4
 800c878:	f7ff ffa8 	bl	800c7cc <L_shift>
 800c87c:	4544      	cmp	r4, r8
 800c87e:	d952      	bls.n	800c926 <__hexnan+0x10e>
 800c880:	2300      	movs	r3, #0
 800c882:	f1a4 0904 	sub.w	r9, r4, #4
 800c886:	f844 3c04 	str.w	r3, [r4, #-4]
 800c88a:	f8cd b008 	str.w	fp, [sp, #8]
 800c88e:	464c      	mov	r4, r9
 800c890:	461d      	mov	r5, r3
 800c892:	9903      	ldr	r1, [sp, #12]
 800c894:	e7d7      	b.n	800c846 <__hexnan+0x2e>
 800c896:	2a29      	cmp	r2, #41	@ 0x29
 800c898:	d157      	bne.n	800c94a <__hexnan+0x132>
 800c89a:	3102      	adds	r1, #2
 800c89c:	f8ca 1000 	str.w	r1, [sl]
 800c8a0:	f1bb 0f00 	cmp.w	fp, #0
 800c8a4:	d051      	beq.n	800c94a <__hexnan+0x132>
 800c8a6:	454c      	cmp	r4, r9
 800c8a8:	d206      	bcs.n	800c8b8 <__hexnan+0xa0>
 800c8aa:	2d07      	cmp	r5, #7
 800c8ac:	dc04      	bgt.n	800c8b8 <__hexnan+0xa0>
 800c8ae:	462a      	mov	r2, r5
 800c8b0:	4649      	mov	r1, r9
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f7ff ff8a 	bl	800c7cc <L_shift>
 800c8b8:	4544      	cmp	r4, r8
 800c8ba:	d936      	bls.n	800c92a <__hexnan+0x112>
 800c8bc:	f1a8 0204 	sub.w	r2, r8, #4
 800c8c0:	4623      	mov	r3, r4
 800c8c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800c8c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800c8ca:	429f      	cmp	r7, r3
 800c8cc:	d2f9      	bcs.n	800c8c2 <__hexnan+0xaa>
 800c8ce:	1b3b      	subs	r3, r7, r4
 800c8d0:	f023 0303 	bic.w	r3, r3, #3
 800c8d4:	3304      	adds	r3, #4
 800c8d6:	3401      	adds	r4, #1
 800c8d8:	3e03      	subs	r6, #3
 800c8da:	42b4      	cmp	r4, r6
 800c8dc:	bf88      	it	hi
 800c8de:	2304      	movhi	r3, #4
 800c8e0:	4443      	add	r3, r8
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	f843 2b04 	str.w	r2, [r3], #4
 800c8e8:	429f      	cmp	r7, r3
 800c8ea:	d2fb      	bcs.n	800c8e4 <__hexnan+0xcc>
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	b91b      	cbnz	r3, 800c8f8 <__hexnan+0xe0>
 800c8f0:	4547      	cmp	r7, r8
 800c8f2:	d128      	bne.n	800c946 <__hexnan+0x12e>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	603b      	str	r3, [r7, #0]
 800c8f8:	2005      	movs	r0, #5
 800c8fa:	b007      	add	sp, #28
 800c8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c900:	3501      	adds	r5, #1
 800c902:	2d08      	cmp	r5, #8
 800c904:	f10b 0b01 	add.w	fp, fp, #1
 800c908:	dd06      	ble.n	800c918 <__hexnan+0x100>
 800c90a:	4544      	cmp	r4, r8
 800c90c:	d9c1      	bls.n	800c892 <__hexnan+0x7a>
 800c90e:	2300      	movs	r3, #0
 800c910:	f844 3c04 	str.w	r3, [r4, #-4]
 800c914:	2501      	movs	r5, #1
 800c916:	3c04      	subs	r4, #4
 800c918:	6822      	ldr	r2, [r4, #0]
 800c91a:	f000 000f 	and.w	r0, r0, #15
 800c91e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c922:	6020      	str	r0, [r4, #0]
 800c924:	e7b5      	b.n	800c892 <__hexnan+0x7a>
 800c926:	2508      	movs	r5, #8
 800c928:	e7b3      	b.n	800c892 <__hexnan+0x7a>
 800c92a:	9b01      	ldr	r3, [sp, #4]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d0dd      	beq.n	800c8ec <__hexnan+0xd4>
 800c930:	f1c3 0320 	rsb	r3, r3, #32
 800c934:	f04f 32ff 	mov.w	r2, #4294967295
 800c938:	40da      	lsrs	r2, r3
 800c93a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c93e:	4013      	ands	r3, r2
 800c940:	f846 3c04 	str.w	r3, [r6, #-4]
 800c944:	e7d2      	b.n	800c8ec <__hexnan+0xd4>
 800c946:	3f04      	subs	r7, #4
 800c948:	e7d0      	b.n	800c8ec <__hexnan+0xd4>
 800c94a:	2004      	movs	r0, #4
 800c94c:	e7d5      	b.n	800c8fa <__hexnan+0xe2>

0800c94e <__ascii_mbtowc>:
 800c94e:	b082      	sub	sp, #8
 800c950:	b901      	cbnz	r1, 800c954 <__ascii_mbtowc+0x6>
 800c952:	a901      	add	r1, sp, #4
 800c954:	b142      	cbz	r2, 800c968 <__ascii_mbtowc+0x1a>
 800c956:	b14b      	cbz	r3, 800c96c <__ascii_mbtowc+0x1e>
 800c958:	7813      	ldrb	r3, [r2, #0]
 800c95a:	600b      	str	r3, [r1, #0]
 800c95c:	7812      	ldrb	r2, [r2, #0]
 800c95e:	1e10      	subs	r0, r2, #0
 800c960:	bf18      	it	ne
 800c962:	2001      	movne	r0, #1
 800c964:	b002      	add	sp, #8
 800c966:	4770      	bx	lr
 800c968:	4610      	mov	r0, r2
 800c96a:	e7fb      	b.n	800c964 <__ascii_mbtowc+0x16>
 800c96c:	f06f 0001 	mvn.w	r0, #1
 800c970:	e7f8      	b.n	800c964 <__ascii_mbtowc+0x16>

0800c972 <_realloc_r>:
 800c972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c976:	4680      	mov	r8, r0
 800c978:	4615      	mov	r5, r2
 800c97a:	460c      	mov	r4, r1
 800c97c:	b921      	cbnz	r1, 800c988 <_realloc_r+0x16>
 800c97e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c982:	4611      	mov	r1, r2
 800c984:	f7fd beb2 	b.w	800a6ec <_malloc_r>
 800c988:	b92a      	cbnz	r2, 800c996 <_realloc_r+0x24>
 800c98a:	f7fd fe3b 	bl	800a604 <_free_r>
 800c98e:	2400      	movs	r4, #0
 800c990:	4620      	mov	r0, r4
 800c992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c996:	f000 f840 	bl	800ca1a <_malloc_usable_size_r>
 800c99a:	4285      	cmp	r5, r0
 800c99c:	4606      	mov	r6, r0
 800c99e:	d802      	bhi.n	800c9a6 <_realloc_r+0x34>
 800c9a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c9a4:	d8f4      	bhi.n	800c990 <_realloc_r+0x1e>
 800c9a6:	4629      	mov	r1, r5
 800c9a8:	4640      	mov	r0, r8
 800c9aa:	f7fd fe9f 	bl	800a6ec <_malloc_r>
 800c9ae:	4607      	mov	r7, r0
 800c9b0:	2800      	cmp	r0, #0
 800c9b2:	d0ec      	beq.n	800c98e <_realloc_r+0x1c>
 800c9b4:	42b5      	cmp	r5, r6
 800c9b6:	462a      	mov	r2, r5
 800c9b8:	4621      	mov	r1, r4
 800c9ba:	bf28      	it	cs
 800c9bc:	4632      	movcs	r2, r6
 800c9be:	f7ff fc43 	bl	800c248 <memcpy>
 800c9c2:	4621      	mov	r1, r4
 800c9c4:	4640      	mov	r0, r8
 800c9c6:	f7fd fe1d 	bl	800a604 <_free_r>
 800c9ca:	463c      	mov	r4, r7
 800c9cc:	e7e0      	b.n	800c990 <_realloc_r+0x1e>

0800c9ce <__ascii_wctomb>:
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	4608      	mov	r0, r1
 800c9d2:	b141      	cbz	r1, 800c9e6 <__ascii_wctomb+0x18>
 800c9d4:	2aff      	cmp	r2, #255	@ 0xff
 800c9d6:	d904      	bls.n	800c9e2 <__ascii_wctomb+0x14>
 800c9d8:	228a      	movs	r2, #138	@ 0x8a
 800c9da:	601a      	str	r2, [r3, #0]
 800c9dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c9e0:	4770      	bx	lr
 800c9e2:	700a      	strb	r2, [r1, #0]
 800c9e4:	2001      	movs	r0, #1
 800c9e6:	4770      	bx	lr

0800c9e8 <fiprintf>:
 800c9e8:	b40e      	push	{r1, r2, r3}
 800c9ea:	b503      	push	{r0, r1, lr}
 800c9ec:	4601      	mov	r1, r0
 800c9ee:	ab03      	add	r3, sp, #12
 800c9f0:	4805      	ldr	r0, [pc, #20]	@ (800ca08 <fiprintf+0x20>)
 800c9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9f6:	6800      	ldr	r0, [r0, #0]
 800c9f8:	9301      	str	r3, [sp, #4]
 800c9fa:	f000 f83f 	bl	800ca7c <_vfiprintf_r>
 800c9fe:	b002      	add	sp, #8
 800ca00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca04:	b003      	add	sp, #12
 800ca06:	4770      	bx	lr
 800ca08:	2000004c 	.word	0x2000004c

0800ca0c <abort>:
 800ca0c:	b508      	push	{r3, lr}
 800ca0e:	2006      	movs	r0, #6
 800ca10:	f000 fa08 	bl	800ce24 <raise>
 800ca14:	2001      	movs	r0, #1
 800ca16:	f7f6 fafb 	bl	8003010 <_exit>

0800ca1a <_malloc_usable_size_r>:
 800ca1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca1e:	1f18      	subs	r0, r3, #4
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	bfbc      	itt	lt
 800ca24:	580b      	ldrlt	r3, [r1, r0]
 800ca26:	18c0      	addlt	r0, r0, r3
 800ca28:	4770      	bx	lr

0800ca2a <__sfputc_r>:
 800ca2a:	6893      	ldr	r3, [r2, #8]
 800ca2c:	3b01      	subs	r3, #1
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	b410      	push	{r4}
 800ca32:	6093      	str	r3, [r2, #8]
 800ca34:	da08      	bge.n	800ca48 <__sfputc_r+0x1e>
 800ca36:	6994      	ldr	r4, [r2, #24]
 800ca38:	42a3      	cmp	r3, r4
 800ca3a:	db01      	blt.n	800ca40 <__sfputc_r+0x16>
 800ca3c:	290a      	cmp	r1, #10
 800ca3e:	d103      	bne.n	800ca48 <__sfputc_r+0x1e>
 800ca40:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca44:	f000 b932 	b.w	800ccac <__swbuf_r>
 800ca48:	6813      	ldr	r3, [r2, #0]
 800ca4a:	1c58      	adds	r0, r3, #1
 800ca4c:	6010      	str	r0, [r2, #0]
 800ca4e:	7019      	strb	r1, [r3, #0]
 800ca50:	4608      	mov	r0, r1
 800ca52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca56:	4770      	bx	lr

0800ca58 <__sfputs_r>:
 800ca58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca5a:	4606      	mov	r6, r0
 800ca5c:	460f      	mov	r7, r1
 800ca5e:	4614      	mov	r4, r2
 800ca60:	18d5      	adds	r5, r2, r3
 800ca62:	42ac      	cmp	r4, r5
 800ca64:	d101      	bne.n	800ca6a <__sfputs_r+0x12>
 800ca66:	2000      	movs	r0, #0
 800ca68:	e007      	b.n	800ca7a <__sfputs_r+0x22>
 800ca6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca6e:	463a      	mov	r2, r7
 800ca70:	4630      	mov	r0, r6
 800ca72:	f7ff ffda 	bl	800ca2a <__sfputc_r>
 800ca76:	1c43      	adds	r3, r0, #1
 800ca78:	d1f3      	bne.n	800ca62 <__sfputs_r+0xa>
 800ca7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ca7c <_vfiprintf_r>:
 800ca7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca80:	460d      	mov	r5, r1
 800ca82:	b09d      	sub	sp, #116	@ 0x74
 800ca84:	4614      	mov	r4, r2
 800ca86:	4698      	mov	r8, r3
 800ca88:	4606      	mov	r6, r0
 800ca8a:	b118      	cbz	r0, 800ca94 <_vfiprintf_r+0x18>
 800ca8c:	6a03      	ldr	r3, [r0, #32]
 800ca8e:	b90b      	cbnz	r3, 800ca94 <_vfiprintf_r+0x18>
 800ca90:	f7fc feba 	bl	8009808 <__sinit>
 800ca94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca96:	07d9      	lsls	r1, r3, #31
 800ca98:	d405      	bmi.n	800caa6 <_vfiprintf_r+0x2a>
 800ca9a:	89ab      	ldrh	r3, [r5, #12]
 800ca9c:	059a      	lsls	r2, r3, #22
 800ca9e:	d402      	bmi.n	800caa6 <_vfiprintf_r+0x2a>
 800caa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800caa2:	f7fc ffc8 	bl	8009a36 <__retarget_lock_acquire_recursive>
 800caa6:	89ab      	ldrh	r3, [r5, #12]
 800caa8:	071b      	lsls	r3, r3, #28
 800caaa:	d501      	bpl.n	800cab0 <_vfiprintf_r+0x34>
 800caac:	692b      	ldr	r3, [r5, #16]
 800caae:	b99b      	cbnz	r3, 800cad8 <_vfiprintf_r+0x5c>
 800cab0:	4629      	mov	r1, r5
 800cab2:	4630      	mov	r0, r6
 800cab4:	f000 f938 	bl	800cd28 <__swsetup_r>
 800cab8:	b170      	cbz	r0, 800cad8 <_vfiprintf_r+0x5c>
 800caba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cabc:	07dc      	lsls	r4, r3, #31
 800cabe:	d504      	bpl.n	800caca <_vfiprintf_r+0x4e>
 800cac0:	f04f 30ff 	mov.w	r0, #4294967295
 800cac4:	b01d      	add	sp, #116	@ 0x74
 800cac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caca:	89ab      	ldrh	r3, [r5, #12]
 800cacc:	0598      	lsls	r0, r3, #22
 800cace:	d4f7      	bmi.n	800cac0 <_vfiprintf_r+0x44>
 800cad0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cad2:	f7fc ffb1 	bl	8009a38 <__retarget_lock_release_recursive>
 800cad6:	e7f3      	b.n	800cac0 <_vfiprintf_r+0x44>
 800cad8:	2300      	movs	r3, #0
 800cada:	9309      	str	r3, [sp, #36]	@ 0x24
 800cadc:	2320      	movs	r3, #32
 800cade:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cae2:	f8cd 800c 	str.w	r8, [sp, #12]
 800cae6:	2330      	movs	r3, #48	@ 0x30
 800cae8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc98 <_vfiprintf_r+0x21c>
 800caec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800caf0:	f04f 0901 	mov.w	r9, #1
 800caf4:	4623      	mov	r3, r4
 800caf6:	469a      	mov	sl, r3
 800caf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cafc:	b10a      	cbz	r2, 800cb02 <_vfiprintf_r+0x86>
 800cafe:	2a25      	cmp	r2, #37	@ 0x25
 800cb00:	d1f9      	bne.n	800caf6 <_vfiprintf_r+0x7a>
 800cb02:	ebba 0b04 	subs.w	fp, sl, r4
 800cb06:	d00b      	beq.n	800cb20 <_vfiprintf_r+0xa4>
 800cb08:	465b      	mov	r3, fp
 800cb0a:	4622      	mov	r2, r4
 800cb0c:	4629      	mov	r1, r5
 800cb0e:	4630      	mov	r0, r6
 800cb10:	f7ff ffa2 	bl	800ca58 <__sfputs_r>
 800cb14:	3001      	adds	r0, #1
 800cb16:	f000 80a7 	beq.w	800cc68 <_vfiprintf_r+0x1ec>
 800cb1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb1c:	445a      	add	r2, fp
 800cb1e:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb20:	f89a 3000 	ldrb.w	r3, [sl]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f000 809f 	beq.w	800cc68 <_vfiprintf_r+0x1ec>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	f04f 32ff 	mov.w	r2, #4294967295
 800cb30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb34:	f10a 0a01 	add.w	sl, sl, #1
 800cb38:	9304      	str	r3, [sp, #16]
 800cb3a:	9307      	str	r3, [sp, #28]
 800cb3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb40:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb42:	4654      	mov	r4, sl
 800cb44:	2205      	movs	r2, #5
 800cb46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb4a:	4853      	ldr	r0, [pc, #332]	@ (800cc98 <_vfiprintf_r+0x21c>)
 800cb4c:	f7f3 fb78 	bl	8000240 <memchr>
 800cb50:	9a04      	ldr	r2, [sp, #16]
 800cb52:	b9d8      	cbnz	r0, 800cb8c <_vfiprintf_r+0x110>
 800cb54:	06d1      	lsls	r1, r2, #27
 800cb56:	bf44      	itt	mi
 800cb58:	2320      	movmi	r3, #32
 800cb5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb5e:	0713      	lsls	r3, r2, #28
 800cb60:	bf44      	itt	mi
 800cb62:	232b      	movmi	r3, #43	@ 0x2b
 800cb64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb68:	f89a 3000 	ldrb.w	r3, [sl]
 800cb6c:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb6e:	d015      	beq.n	800cb9c <_vfiprintf_r+0x120>
 800cb70:	9a07      	ldr	r2, [sp, #28]
 800cb72:	4654      	mov	r4, sl
 800cb74:	2000      	movs	r0, #0
 800cb76:	f04f 0c0a 	mov.w	ip, #10
 800cb7a:	4621      	mov	r1, r4
 800cb7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb80:	3b30      	subs	r3, #48	@ 0x30
 800cb82:	2b09      	cmp	r3, #9
 800cb84:	d94b      	bls.n	800cc1e <_vfiprintf_r+0x1a2>
 800cb86:	b1b0      	cbz	r0, 800cbb6 <_vfiprintf_r+0x13a>
 800cb88:	9207      	str	r2, [sp, #28]
 800cb8a:	e014      	b.n	800cbb6 <_vfiprintf_r+0x13a>
 800cb8c:	eba0 0308 	sub.w	r3, r0, r8
 800cb90:	fa09 f303 	lsl.w	r3, r9, r3
 800cb94:	4313      	orrs	r3, r2
 800cb96:	9304      	str	r3, [sp, #16]
 800cb98:	46a2      	mov	sl, r4
 800cb9a:	e7d2      	b.n	800cb42 <_vfiprintf_r+0xc6>
 800cb9c:	9b03      	ldr	r3, [sp, #12]
 800cb9e:	1d19      	adds	r1, r3, #4
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	9103      	str	r1, [sp, #12]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	bfbb      	ittet	lt
 800cba8:	425b      	neglt	r3, r3
 800cbaa:	f042 0202 	orrlt.w	r2, r2, #2
 800cbae:	9307      	strge	r3, [sp, #28]
 800cbb0:	9307      	strlt	r3, [sp, #28]
 800cbb2:	bfb8      	it	lt
 800cbb4:	9204      	strlt	r2, [sp, #16]
 800cbb6:	7823      	ldrb	r3, [r4, #0]
 800cbb8:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbba:	d10a      	bne.n	800cbd2 <_vfiprintf_r+0x156>
 800cbbc:	7863      	ldrb	r3, [r4, #1]
 800cbbe:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbc0:	d132      	bne.n	800cc28 <_vfiprintf_r+0x1ac>
 800cbc2:	9b03      	ldr	r3, [sp, #12]
 800cbc4:	1d1a      	adds	r2, r3, #4
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	9203      	str	r2, [sp, #12]
 800cbca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbce:	3402      	adds	r4, #2
 800cbd0:	9305      	str	r3, [sp, #20]
 800cbd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cca8 <_vfiprintf_r+0x22c>
 800cbd6:	7821      	ldrb	r1, [r4, #0]
 800cbd8:	2203      	movs	r2, #3
 800cbda:	4650      	mov	r0, sl
 800cbdc:	f7f3 fb30 	bl	8000240 <memchr>
 800cbe0:	b138      	cbz	r0, 800cbf2 <_vfiprintf_r+0x176>
 800cbe2:	9b04      	ldr	r3, [sp, #16]
 800cbe4:	eba0 000a 	sub.w	r0, r0, sl
 800cbe8:	2240      	movs	r2, #64	@ 0x40
 800cbea:	4082      	lsls	r2, r0
 800cbec:	4313      	orrs	r3, r2
 800cbee:	3401      	adds	r4, #1
 800cbf0:	9304      	str	r3, [sp, #16]
 800cbf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbf6:	4829      	ldr	r0, [pc, #164]	@ (800cc9c <_vfiprintf_r+0x220>)
 800cbf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbfc:	2206      	movs	r2, #6
 800cbfe:	f7f3 fb1f 	bl	8000240 <memchr>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d03f      	beq.n	800cc86 <_vfiprintf_r+0x20a>
 800cc06:	4b26      	ldr	r3, [pc, #152]	@ (800cca0 <_vfiprintf_r+0x224>)
 800cc08:	bb1b      	cbnz	r3, 800cc52 <_vfiprintf_r+0x1d6>
 800cc0a:	9b03      	ldr	r3, [sp, #12]
 800cc0c:	3307      	adds	r3, #7
 800cc0e:	f023 0307 	bic.w	r3, r3, #7
 800cc12:	3308      	adds	r3, #8
 800cc14:	9303      	str	r3, [sp, #12]
 800cc16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc18:	443b      	add	r3, r7
 800cc1a:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc1c:	e76a      	b.n	800caf4 <_vfiprintf_r+0x78>
 800cc1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc22:	460c      	mov	r4, r1
 800cc24:	2001      	movs	r0, #1
 800cc26:	e7a8      	b.n	800cb7a <_vfiprintf_r+0xfe>
 800cc28:	2300      	movs	r3, #0
 800cc2a:	3401      	adds	r4, #1
 800cc2c:	9305      	str	r3, [sp, #20]
 800cc2e:	4619      	mov	r1, r3
 800cc30:	f04f 0c0a 	mov.w	ip, #10
 800cc34:	4620      	mov	r0, r4
 800cc36:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc3a:	3a30      	subs	r2, #48	@ 0x30
 800cc3c:	2a09      	cmp	r2, #9
 800cc3e:	d903      	bls.n	800cc48 <_vfiprintf_r+0x1cc>
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d0c6      	beq.n	800cbd2 <_vfiprintf_r+0x156>
 800cc44:	9105      	str	r1, [sp, #20]
 800cc46:	e7c4      	b.n	800cbd2 <_vfiprintf_r+0x156>
 800cc48:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc4c:	4604      	mov	r4, r0
 800cc4e:	2301      	movs	r3, #1
 800cc50:	e7f0      	b.n	800cc34 <_vfiprintf_r+0x1b8>
 800cc52:	ab03      	add	r3, sp, #12
 800cc54:	9300      	str	r3, [sp, #0]
 800cc56:	462a      	mov	r2, r5
 800cc58:	4b12      	ldr	r3, [pc, #72]	@ (800cca4 <_vfiprintf_r+0x228>)
 800cc5a:	a904      	add	r1, sp, #16
 800cc5c:	4630      	mov	r0, r6
 800cc5e:	f7fb ff93 	bl	8008b88 <_printf_float>
 800cc62:	4607      	mov	r7, r0
 800cc64:	1c78      	adds	r0, r7, #1
 800cc66:	d1d6      	bne.n	800cc16 <_vfiprintf_r+0x19a>
 800cc68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc6a:	07d9      	lsls	r1, r3, #31
 800cc6c:	d405      	bmi.n	800cc7a <_vfiprintf_r+0x1fe>
 800cc6e:	89ab      	ldrh	r3, [r5, #12]
 800cc70:	059a      	lsls	r2, r3, #22
 800cc72:	d402      	bmi.n	800cc7a <_vfiprintf_r+0x1fe>
 800cc74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc76:	f7fc fedf 	bl	8009a38 <__retarget_lock_release_recursive>
 800cc7a:	89ab      	ldrh	r3, [r5, #12]
 800cc7c:	065b      	lsls	r3, r3, #25
 800cc7e:	f53f af1f 	bmi.w	800cac0 <_vfiprintf_r+0x44>
 800cc82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc84:	e71e      	b.n	800cac4 <_vfiprintf_r+0x48>
 800cc86:	ab03      	add	r3, sp, #12
 800cc88:	9300      	str	r3, [sp, #0]
 800cc8a:	462a      	mov	r2, r5
 800cc8c:	4b05      	ldr	r3, [pc, #20]	@ (800cca4 <_vfiprintf_r+0x228>)
 800cc8e:	a904      	add	r1, sp, #16
 800cc90:	4630      	mov	r0, r6
 800cc92:	f7fc fa01 	bl	8009098 <_printf_i>
 800cc96:	e7e4      	b.n	800cc62 <_vfiprintf_r+0x1e6>
 800cc98:	0800d5f1 	.word	0x0800d5f1
 800cc9c:	0800d5fb 	.word	0x0800d5fb
 800cca0:	08008b89 	.word	0x08008b89
 800cca4:	0800ca59 	.word	0x0800ca59
 800cca8:	0800d5f7 	.word	0x0800d5f7

0800ccac <__swbuf_r>:
 800ccac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccae:	460e      	mov	r6, r1
 800ccb0:	4614      	mov	r4, r2
 800ccb2:	4605      	mov	r5, r0
 800ccb4:	b118      	cbz	r0, 800ccbe <__swbuf_r+0x12>
 800ccb6:	6a03      	ldr	r3, [r0, #32]
 800ccb8:	b90b      	cbnz	r3, 800ccbe <__swbuf_r+0x12>
 800ccba:	f7fc fda5 	bl	8009808 <__sinit>
 800ccbe:	69a3      	ldr	r3, [r4, #24]
 800ccc0:	60a3      	str	r3, [r4, #8]
 800ccc2:	89a3      	ldrh	r3, [r4, #12]
 800ccc4:	071a      	lsls	r2, r3, #28
 800ccc6:	d501      	bpl.n	800cccc <__swbuf_r+0x20>
 800ccc8:	6923      	ldr	r3, [r4, #16]
 800ccca:	b943      	cbnz	r3, 800ccde <__swbuf_r+0x32>
 800cccc:	4621      	mov	r1, r4
 800ccce:	4628      	mov	r0, r5
 800ccd0:	f000 f82a 	bl	800cd28 <__swsetup_r>
 800ccd4:	b118      	cbz	r0, 800ccde <__swbuf_r+0x32>
 800ccd6:	f04f 37ff 	mov.w	r7, #4294967295
 800ccda:	4638      	mov	r0, r7
 800ccdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccde:	6823      	ldr	r3, [r4, #0]
 800cce0:	6922      	ldr	r2, [r4, #16]
 800cce2:	1a98      	subs	r0, r3, r2
 800cce4:	6963      	ldr	r3, [r4, #20]
 800cce6:	b2f6      	uxtb	r6, r6
 800cce8:	4283      	cmp	r3, r0
 800ccea:	4637      	mov	r7, r6
 800ccec:	dc05      	bgt.n	800ccfa <__swbuf_r+0x4e>
 800ccee:	4621      	mov	r1, r4
 800ccf0:	4628      	mov	r0, r5
 800ccf2:	f7ff fa45 	bl	800c180 <_fflush_r>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d1ed      	bne.n	800ccd6 <__swbuf_r+0x2a>
 800ccfa:	68a3      	ldr	r3, [r4, #8]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	60a3      	str	r3, [r4, #8]
 800cd00:	6823      	ldr	r3, [r4, #0]
 800cd02:	1c5a      	adds	r2, r3, #1
 800cd04:	6022      	str	r2, [r4, #0]
 800cd06:	701e      	strb	r6, [r3, #0]
 800cd08:	6962      	ldr	r2, [r4, #20]
 800cd0a:	1c43      	adds	r3, r0, #1
 800cd0c:	429a      	cmp	r2, r3
 800cd0e:	d004      	beq.n	800cd1a <__swbuf_r+0x6e>
 800cd10:	89a3      	ldrh	r3, [r4, #12]
 800cd12:	07db      	lsls	r3, r3, #31
 800cd14:	d5e1      	bpl.n	800ccda <__swbuf_r+0x2e>
 800cd16:	2e0a      	cmp	r6, #10
 800cd18:	d1df      	bne.n	800ccda <__swbuf_r+0x2e>
 800cd1a:	4621      	mov	r1, r4
 800cd1c:	4628      	mov	r0, r5
 800cd1e:	f7ff fa2f 	bl	800c180 <_fflush_r>
 800cd22:	2800      	cmp	r0, #0
 800cd24:	d0d9      	beq.n	800ccda <__swbuf_r+0x2e>
 800cd26:	e7d6      	b.n	800ccd6 <__swbuf_r+0x2a>

0800cd28 <__swsetup_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	4b29      	ldr	r3, [pc, #164]	@ (800cdd0 <__swsetup_r+0xa8>)
 800cd2c:	4605      	mov	r5, r0
 800cd2e:	6818      	ldr	r0, [r3, #0]
 800cd30:	460c      	mov	r4, r1
 800cd32:	b118      	cbz	r0, 800cd3c <__swsetup_r+0x14>
 800cd34:	6a03      	ldr	r3, [r0, #32]
 800cd36:	b90b      	cbnz	r3, 800cd3c <__swsetup_r+0x14>
 800cd38:	f7fc fd66 	bl	8009808 <__sinit>
 800cd3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd40:	0719      	lsls	r1, r3, #28
 800cd42:	d422      	bmi.n	800cd8a <__swsetup_r+0x62>
 800cd44:	06da      	lsls	r2, r3, #27
 800cd46:	d407      	bmi.n	800cd58 <__swsetup_r+0x30>
 800cd48:	2209      	movs	r2, #9
 800cd4a:	602a      	str	r2, [r5, #0]
 800cd4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cd50:	81a3      	strh	r3, [r4, #12]
 800cd52:	f04f 30ff 	mov.w	r0, #4294967295
 800cd56:	e033      	b.n	800cdc0 <__swsetup_r+0x98>
 800cd58:	0758      	lsls	r0, r3, #29
 800cd5a:	d512      	bpl.n	800cd82 <__swsetup_r+0x5a>
 800cd5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd5e:	b141      	cbz	r1, 800cd72 <__swsetup_r+0x4a>
 800cd60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cd64:	4299      	cmp	r1, r3
 800cd66:	d002      	beq.n	800cd6e <__swsetup_r+0x46>
 800cd68:	4628      	mov	r0, r5
 800cd6a:	f7fd fc4b 	bl	800a604 <_free_r>
 800cd6e:	2300      	movs	r3, #0
 800cd70:	6363      	str	r3, [r4, #52]	@ 0x34
 800cd72:	89a3      	ldrh	r3, [r4, #12]
 800cd74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cd78:	81a3      	strh	r3, [r4, #12]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	6063      	str	r3, [r4, #4]
 800cd7e:	6923      	ldr	r3, [r4, #16]
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	89a3      	ldrh	r3, [r4, #12]
 800cd84:	f043 0308 	orr.w	r3, r3, #8
 800cd88:	81a3      	strh	r3, [r4, #12]
 800cd8a:	6923      	ldr	r3, [r4, #16]
 800cd8c:	b94b      	cbnz	r3, 800cda2 <__swsetup_r+0x7a>
 800cd8e:	89a3      	ldrh	r3, [r4, #12]
 800cd90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800cd94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd98:	d003      	beq.n	800cda2 <__swsetup_r+0x7a>
 800cd9a:	4621      	mov	r1, r4
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	f000 f883 	bl	800cea8 <__smakebuf_r>
 800cda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cda6:	f013 0201 	ands.w	r2, r3, #1
 800cdaa:	d00a      	beq.n	800cdc2 <__swsetup_r+0x9a>
 800cdac:	2200      	movs	r2, #0
 800cdae:	60a2      	str	r2, [r4, #8]
 800cdb0:	6962      	ldr	r2, [r4, #20]
 800cdb2:	4252      	negs	r2, r2
 800cdb4:	61a2      	str	r2, [r4, #24]
 800cdb6:	6922      	ldr	r2, [r4, #16]
 800cdb8:	b942      	cbnz	r2, 800cdcc <__swsetup_r+0xa4>
 800cdba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800cdbe:	d1c5      	bne.n	800cd4c <__swsetup_r+0x24>
 800cdc0:	bd38      	pop	{r3, r4, r5, pc}
 800cdc2:	0799      	lsls	r1, r3, #30
 800cdc4:	bf58      	it	pl
 800cdc6:	6962      	ldrpl	r2, [r4, #20]
 800cdc8:	60a2      	str	r2, [r4, #8]
 800cdca:	e7f4      	b.n	800cdb6 <__swsetup_r+0x8e>
 800cdcc:	2000      	movs	r0, #0
 800cdce:	e7f7      	b.n	800cdc0 <__swsetup_r+0x98>
 800cdd0:	2000004c 	.word	0x2000004c

0800cdd4 <_raise_r>:
 800cdd4:	291f      	cmp	r1, #31
 800cdd6:	b538      	push	{r3, r4, r5, lr}
 800cdd8:	4605      	mov	r5, r0
 800cdda:	460c      	mov	r4, r1
 800cddc:	d904      	bls.n	800cde8 <_raise_r+0x14>
 800cdde:	2316      	movs	r3, #22
 800cde0:	6003      	str	r3, [r0, #0]
 800cde2:	f04f 30ff 	mov.w	r0, #4294967295
 800cde6:	bd38      	pop	{r3, r4, r5, pc}
 800cde8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cdea:	b112      	cbz	r2, 800cdf2 <_raise_r+0x1e>
 800cdec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cdf0:	b94b      	cbnz	r3, 800ce06 <_raise_r+0x32>
 800cdf2:	4628      	mov	r0, r5
 800cdf4:	f000 f830 	bl	800ce58 <_getpid_r>
 800cdf8:	4622      	mov	r2, r4
 800cdfa:	4601      	mov	r1, r0
 800cdfc:	4628      	mov	r0, r5
 800cdfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce02:	f000 b817 	b.w	800ce34 <_kill_r>
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d00a      	beq.n	800ce20 <_raise_r+0x4c>
 800ce0a:	1c59      	adds	r1, r3, #1
 800ce0c:	d103      	bne.n	800ce16 <_raise_r+0x42>
 800ce0e:	2316      	movs	r3, #22
 800ce10:	6003      	str	r3, [r0, #0]
 800ce12:	2001      	movs	r0, #1
 800ce14:	e7e7      	b.n	800cde6 <_raise_r+0x12>
 800ce16:	2100      	movs	r1, #0
 800ce18:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	4798      	blx	r3
 800ce20:	2000      	movs	r0, #0
 800ce22:	e7e0      	b.n	800cde6 <_raise_r+0x12>

0800ce24 <raise>:
 800ce24:	4b02      	ldr	r3, [pc, #8]	@ (800ce30 <raise+0xc>)
 800ce26:	4601      	mov	r1, r0
 800ce28:	6818      	ldr	r0, [r3, #0]
 800ce2a:	f7ff bfd3 	b.w	800cdd4 <_raise_r>
 800ce2e:	bf00      	nop
 800ce30:	2000004c 	.word	0x2000004c

0800ce34 <_kill_r>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	4d07      	ldr	r5, [pc, #28]	@ (800ce54 <_kill_r+0x20>)
 800ce38:	2300      	movs	r3, #0
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	4608      	mov	r0, r1
 800ce3e:	4611      	mov	r1, r2
 800ce40:	602b      	str	r3, [r5, #0]
 800ce42:	f7f6 f8d5 	bl	8002ff0 <_kill>
 800ce46:	1c43      	adds	r3, r0, #1
 800ce48:	d102      	bne.n	800ce50 <_kill_r+0x1c>
 800ce4a:	682b      	ldr	r3, [r5, #0]
 800ce4c:	b103      	cbz	r3, 800ce50 <_kill_r+0x1c>
 800ce4e:	6023      	str	r3, [r4, #0]
 800ce50:	bd38      	pop	{r3, r4, r5, pc}
 800ce52:	bf00      	nop
 800ce54:	20031d7c 	.word	0x20031d7c

0800ce58 <_getpid_r>:
 800ce58:	f7f6 b8c2 	b.w	8002fe0 <_getpid>

0800ce5c <__swhatbuf_r>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	460c      	mov	r4, r1
 800ce60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ce64:	2900      	cmp	r1, #0
 800ce66:	b096      	sub	sp, #88	@ 0x58
 800ce68:	4615      	mov	r5, r2
 800ce6a:	461e      	mov	r6, r3
 800ce6c:	da0d      	bge.n	800ce8a <__swhatbuf_r+0x2e>
 800ce6e:	89a3      	ldrh	r3, [r4, #12]
 800ce70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ce74:	f04f 0100 	mov.w	r1, #0
 800ce78:	bf14      	ite	ne
 800ce7a:	2340      	movne	r3, #64	@ 0x40
 800ce7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ce80:	2000      	movs	r0, #0
 800ce82:	6031      	str	r1, [r6, #0]
 800ce84:	602b      	str	r3, [r5, #0]
 800ce86:	b016      	add	sp, #88	@ 0x58
 800ce88:	bd70      	pop	{r4, r5, r6, pc}
 800ce8a:	466a      	mov	r2, sp
 800ce8c:	f000 f848 	bl	800cf20 <_fstat_r>
 800ce90:	2800      	cmp	r0, #0
 800ce92:	dbec      	blt.n	800ce6e <__swhatbuf_r+0x12>
 800ce94:	9901      	ldr	r1, [sp, #4]
 800ce96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ce9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ce9e:	4259      	negs	r1, r3
 800cea0:	4159      	adcs	r1, r3
 800cea2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cea6:	e7eb      	b.n	800ce80 <__swhatbuf_r+0x24>

0800cea8 <__smakebuf_r>:
 800cea8:	898b      	ldrh	r3, [r1, #12]
 800ceaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceac:	079d      	lsls	r5, r3, #30
 800ceae:	4606      	mov	r6, r0
 800ceb0:	460c      	mov	r4, r1
 800ceb2:	d507      	bpl.n	800cec4 <__smakebuf_r+0x1c>
 800ceb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ceb8:	6023      	str	r3, [r4, #0]
 800ceba:	6123      	str	r3, [r4, #16]
 800cebc:	2301      	movs	r3, #1
 800cebe:	6163      	str	r3, [r4, #20]
 800cec0:	b003      	add	sp, #12
 800cec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cec4:	ab01      	add	r3, sp, #4
 800cec6:	466a      	mov	r2, sp
 800cec8:	f7ff ffc8 	bl	800ce5c <__swhatbuf_r>
 800cecc:	9f00      	ldr	r7, [sp, #0]
 800cece:	4605      	mov	r5, r0
 800ced0:	4639      	mov	r1, r7
 800ced2:	4630      	mov	r0, r6
 800ced4:	f7fd fc0a 	bl	800a6ec <_malloc_r>
 800ced8:	b948      	cbnz	r0, 800ceee <__smakebuf_r+0x46>
 800ceda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cede:	059a      	lsls	r2, r3, #22
 800cee0:	d4ee      	bmi.n	800cec0 <__smakebuf_r+0x18>
 800cee2:	f023 0303 	bic.w	r3, r3, #3
 800cee6:	f043 0302 	orr.w	r3, r3, #2
 800ceea:	81a3      	strh	r3, [r4, #12]
 800ceec:	e7e2      	b.n	800ceb4 <__smakebuf_r+0xc>
 800ceee:	89a3      	ldrh	r3, [r4, #12]
 800cef0:	6020      	str	r0, [r4, #0]
 800cef2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cef6:	81a3      	strh	r3, [r4, #12]
 800cef8:	9b01      	ldr	r3, [sp, #4]
 800cefa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cefe:	b15b      	cbz	r3, 800cf18 <__smakebuf_r+0x70>
 800cf00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf04:	4630      	mov	r0, r6
 800cf06:	f000 f81d 	bl	800cf44 <_isatty_r>
 800cf0a:	b128      	cbz	r0, 800cf18 <__smakebuf_r+0x70>
 800cf0c:	89a3      	ldrh	r3, [r4, #12]
 800cf0e:	f023 0303 	bic.w	r3, r3, #3
 800cf12:	f043 0301 	orr.w	r3, r3, #1
 800cf16:	81a3      	strh	r3, [r4, #12]
 800cf18:	89a3      	ldrh	r3, [r4, #12]
 800cf1a:	431d      	orrs	r5, r3
 800cf1c:	81a5      	strh	r5, [r4, #12]
 800cf1e:	e7cf      	b.n	800cec0 <__smakebuf_r+0x18>

0800cf20 <_fstat_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	4d07      	ldr	r5, [pc, #28]	@ (800cf40 <_fstat_r+0x20>)
 800cf24:	2300      	movs	r3, #0
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	4611      	mov	r1, r2
 800cf2c:	602b      	str	r3, [r5, #0]
 800cf2e:	f7f6 f8bf 	bl	80030b0 <_fstat>
 800cf32:	1c43      	adds	r3, r0, #1
 800cf34:	d102      	bne.n	800cf3c <_fstat_r+0x1c>
 800cf36:	682b      	ldr	r3, [r5, #0]
 800cf38:	b103      	cbz	r3, 800cf3c <_fstat_r+0x1c>
 800cf3a:	6023      	str	r3, [r4, #0]
 800cf3c:	bd38      	pop	{r3, r4, r5, pc}
 800cf3e:	bf00      	nop
 800cf40:	20031d7c 	.word	0x20031d7c

0800cf44 <_isatty_r>:
 800cf44:	b538      	push	{r3, r4, r5, lr}
 800cf46:	4d06      	ldr	r5, [pc, #24]	@ (800cf60 <_isatty_r+0x1c>)
 800cf48:	2300      	movs	r3, #0
 800cf4a:	4604      	mov	r4, r0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	602b      	str	r3, [r5, #0]
 800cf50:	f7f6 f8be 	bl	80030d0 <_isatty>
 800cf54:	1c43      	adds	r3, r0, #1
 800cf56:	d102      	bne.n	800cf5e <_isatty_r+0x1a>
 800cf58:	682b      	ldr	r3, [r5, #0]
 800cf5a:	b103      	cbz	r3, 800cf5e <_isatty_r+0x1a>
 800cf5c:	6023      	str	r3, [r4, #0]
 800cf5e:	bd38      	pop	{r3, r4, r5, pc}
 800cf60:	20031d7c 	.word	0x20031d7c

0800cf64 <_init>:
 800cf64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf66:	bf00      	nop
 800cf68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf6a:	bc08      	pop	{r3}
 800cf6c:	469e      	mov	lr, r3
 800cf6e:	4770      	bx	lr

0800cf70 <_fini>:
 800cf70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf72:	bf00      	nop
 800cf74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf76:	bc08      	pop	{r3}
 800cf78:	469e      	mov	lr, r3
 800cf7a:	4770      	bx	lr
